{"id":"bd5df38a44215e9713cd7fec93ac88c5","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/Base64URL.sol":{"content":"// SPDX-License-Identifier: MIT\n// from OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64URL {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode32(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        //string memory result = new string(4 * ((data.length + 2) / 3));\n        string memory result = new string(4 * ((data.length + 2) / 3) - 1);\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(\n                    resultPtr,\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\n                )\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            /*\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n*/\n        }\n\n        return result;\n    }\n}\n"},"contracts/FCL/FCL_elliptic.sol":{"content":"//********************************************************************************************/\n//  ___           _       ___               _         _    _ _    \n// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ \n// | _| '_/ -_|_-< ' \\  | (__| '_| || | '_ \\  _/ _ \\ | |__| | '_ \\\n// |_||_| \\___/__/_||_|  \\___|_|  \\_, | .__/\\__\\___/ |____|_|_.__/\n//                                |__/|_|                        \n///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project \n///* License: This software is licensed under MIT License \t \n///* This Code may be reused including license and copyright notice. \t \n///* See LICENSE file at the root folder of the project.\t\t\t\t \n///* FILE: FCL_elliptic.sol\t\t\t\t\t\t         \n///* \t\t\t\t\t\t\t\t\t\t\t \n///* \t\t\t\t\t\t\t\t\t\t\t \n///* DESCRIPTION: modified XYZZ system coordinates for EVM elliptic point multiplication\n///*  optimization\n///* \n//**************************************************************************************/\n//* WARNING: this code SHALL not be used for non prime order curves for security reasons.\n// Code is optimized for a=-3 only curves with prime order, constant like -1, -2 shall be replaced\n// if ever used for other curve than sec256R1\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\n\n//import \"hardhat/console.sol\";\n\n\nlibrary FCL_Elliptic_ZZ {\n    // Set parameters for curve sec256r1.\n    \n    //curve prime field modulus\n    uint constant p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\n    //short weierstrass first coefficient\n    uint constant a =\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\n    //short weierstrass second coefficient    \n    uint constant b =\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\n    //generating point affine coordinates    \n    uint constant gx =\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\n    uint constant gy =\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\n    //curve order (number of points)\n    uint constant n =\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;    \n    /* -2 mod p constant, used to speed up inversion and doubling (avoid negation)*/\n    uint constant minus_2 = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD;\n    /* -2 mod n constant, used to speed up inversion*/\n    uint constant minus_2modn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F; \n       \n    uint constant minus_1=      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n    \n    /**\n    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/\n    function FCL_nModInv(uint256 u) internal view returns (uint256 result) {\n        uint[6] memory pointer;\n        assembly {\n            \n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\n            mstore(pointer, 0x20)\n            mstore(add(pointer, 0x20), 0x20)\n            mstore(add(pointer, 0x40), 0x20)\n            // Define variables base, exponent and modulus\n            mstore(add(pointer, 0x60), u)\n            mstore(add(pointer, 0x80), minus_2modn)\n            mstore(add(pointer, 0xa0), n)\n          \n            // Call the precompiled contract 0x05 = ModExp\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\n                revert(0, 0)\n            }\n            result:=mload(pointer)\n        }\n       \n    }\n     /**\n    /* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled*/\n    function FCL_pModInv(uint256 u)   internal view returns (uint256 result) {\n        uint[6] memory pointer;\n        assembly {  \n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\n            mstore(pointer, 0x20)\n            mstore(add(pointer, 0x20), 0x20)\n            mstore(add(pointer, 0x40), 0x20)\n            // Define variables base, exponent and modulus\n            mstore(add(pointer, 0x60), u)\n            mstore(add(pointer, 0x80), minus_2)\n            mstore(add(pointer, 0xa0), p)\n          \n            // Call the precompiled contract 0x05 = ModExp\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\n                revert(0, 0)\n            }\n            result:=mload(pointer)\n        }\n    }\n    \n    /**\n    /* @dev Convert from affine rep to XYZZ rep*/\n    function ecAff_SetZZ(\n        uint x0,\n        uint y0\n    ) internal pure returns (uint[4] memory P) {\n        unchecked {\n            P[2] = 1; //ZZ\n            P[3] = 1; //ZZZ\n            P[0] = x0;\n            P[1] = y0;\n        }\n    }\n    \n    /**\n    /* @dev Convert from XYZZ rep to affine rep*/ \n    /*    https://hyperelliptic.org/EFD/g1p/auto-shortw-xyzz-3.html#addition-add-2008-s*/\n    function ecZZ_SetAff( uint x,\n        uint y,\n        uint zz,\n        uint zzz) internal view  returns (uint x1, uint y1)\n    {\n      uint zzzInv = FCL_pModInv(zzz); //1/zzz\n      y1=mulmod(y,zzzInv,p);//Y/zzz\n      uint b=mulmod(zz, zzzInv,p); //1/z\n      zzzInv= mulmod(b,b,p); //1/zz\n      x1=mulmod(x,zzzInv,p);//X/zz\n    }\n    \n \n    \n    /**\n    /* @dev Sutherland2008 doubling*/\n    /* The \"dbl-2008-s-1\" doubling formulas */\n    \n    function ecZZ_Dbl(\n    \tuint x,\n        uint y,\n        uint zz,\n        uint zzz\n    ) internal pure returns (uint P0, uint P1,uint P2,uint P3)\n    {\n     unchecked{\n     assembly{\n      P0:=mulmod(2, y, p) //U = 2*Y1\n      P2:=mulmod(P0,P0,p)  // V=U^2\n      P3:=mulmod(x, P2,p)// S = X1*V\n      P1:=mulmod(P0, P2,p) // W=UV\n      P2:=mulmod(P2, zz, p) //zz3=V*ZZ1\n      zz:=mulmod(3, mulmod(addmod(x,sub(p,zz),p), addmod(x,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\n      P0:=addmod(mulmod(zz,zz,p), mulmod(minus_2, P3,p),p) //X3=M^2-2S\n      x:=mulmod(zz,addmod(P3, sub(p,P0),p),p)//M(S-X3)\n      P3:=mulmod(P1,zzz,p)//zzz3=W*zzz1\n      P1:=addmod(x, sub(p, mulmod(P1, y,p)),p )//Y3= M(S-X3)-W*Y1\n      }\n     }\n     return (P0, P1, P2, P3);\n    }\n    \n     /**\n     * @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\n     * warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)\n     */\n     \n    //tbd: return -x1 and -Y1 in double to avoid two substractions\n    function ecZZ_AddN(\n    \tuint x1,\n        uint y1,\n        uint zz1,\n        uint zzz1,\n        uint x2,\n        uint y2) internal pure returns (uint P0, uint P1,uint P2,uint P3)\n     {\n       unchecked{\n      if(y1==0){\n       return (x2,y2,1,1);\n      }\n  \n       assembly{\n      y1:=sub(p, y1)\n      y2:=addmod(mulmod(y2, zzz1,p),y1,p)  \n      x2:=addmod(mulmod(x2, zz1,p),sub(p,x1),p)  \n      P0:=mulmod(x2, x2, p)//PP = P^2\n      P1:=mulmod(P0,x2,p)//PPP = P*PP\n      P2:=mulmod(zz1,P0,p) ////ZZ3 = ZZ1*PP\n      P3:= mulmod(zzz1,P1,p) ////ZZZ3 = ZZZ1*PPP\n      zz1:=mulmod(x1, P0, p)//Q = X1*PP\n      P0:=addmod(addmod(mulmod(y2,y2, p), sub(p,P1),p ), mulmod(minus_2, zz1,p) ,p )//R^2-PPP-2*Q\n      P1:=addmod(mulmod(addmod(zz1, sub(p,P0),p), y2, p), mulmod(y1, P1,p),p)//R*(Q-X3)\n     }\n    //end assembly\n      }//end unchecked\n      return (P0, P1, P2, P3);\n     }\n       \n     /**\n     * @dev Return the zero curve in XYZZ coordinates.\n     */\n    function ecZZ_SetZero() internal pure returns (uint x, uint y, uint zz, uint zzz) {\n        return (0, 0, 0, 0);\n    }\n     /**\n     * @dev Check if point is the neutral of the curve\n     */\n    function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\n    {\n     if ( (y0 == 0)  ) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)\n     */\n    function ecAff_SetZero() internal pure returns (uint x, uint y) {\n        return (0, 0);\n    }\n\n    /**\n     * @dev Check if the curve is the zero curve in affine rep.\n     */\n   function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\n        return (y==0);\n    }\n\n    /**\n     * @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve).\n     */\n    function ecAff_isOnCurve(uint x, uint y) internal pure returns (bool) {\n        if (0 == x || x == p || 0 == y || y == p) {\n            return false;\n        }\n        unchecked {\n            uint LHS = mulmod(y, y, p); // y^2\n            uint RHS = addmod(mulmod(mulmod(x, x, p), x, p), mulmod(x, a, p), p); // x^3+ax\n                 RHS = addmod(RHS, b, p); // x^3 + a*x + b\n           \n            return LHS == RHS;\n        }\n    }\n    \n\n      /**\n     * @dev Add two elliptic curve points in affine coordinates.\n     */\n     \n    function ecAff_add(\n        uint x0,\n        uint y0,\n        uint x1,\n        uint y1\n    ) internal view returns (uint, uint) {\n        uint zz0;\n        uint zzz0;\n        \n\tif(ecAff_IsZero(x0,y0)) return (x1,y1);\n\tif(ecAff_IsZero(x1,y1)) return (x1,y1);\n\t\n        (x0, y0, zz0, zzz0) = ecZZ_AddN(x0, y0, 1,1, x1, y1);\n\n        return ecZZ_SetAff(x0, y0, zz0, zzz0);\n    }\n\n     /**\n     * @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key\n     */\n     function ecZZ_mulmuladd_S_asm(\n        uint Q0, uint Q1,// Point G and Q stored in one memory for stack optimization\n        uint scalar_u,\n        uint scalar_v\n    ) internal view returns (uint X) {\n     uint zz;\n     uint zzz;\n     uint Y;\n     uint index=255;\n     uint[6] memory T;\n     uint H0;\n     uint H1;   \n     \n     unchecked {\n     \n     if(scalar_u==0 && scalar_v==0) return 0;\n     \n     (H0,H1 )=ecAff_add(gx,gy,Q0, Q1);//will not work if Q=P, obvious forbidden private key\n   \n   /*\n     while( ( ((scalar_u>>index)&1)+2*((scalar_v>>index)&1) ) ==0){\n      index=index-1; \n     }\n     */\n         \n      assembly{\n      \n     \n      for{  let T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\n      } eq(T4,0) {\n        index := sub(index, 1)\n        T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\n      }\n      {}\n       zz:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\n           \n      if eq(zz,1) {\n      \tX:=gx\n      \tY:=gy\n      \t}\n      if eq(zz,2) {\n       X:=Q0\n      \tY:=Q1\n      }\n      if eq(zz,3) {\n      \t X:=H0\n      \t Y:= H1\n      }\n     \n      index:=sub(index,1)\n      zz:=1\n      zzz:=1\n      \n      for {   } gt( minus_1, index) { index := sub(index, 1) } \n      {\n      // inlined EcZZ_Dbl\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\n      let T2:=mulmod(T1,T1,p)  // V=U^2\n      let T3:=mulmod(X, T2,p)// S = X1*V\n      T1:=mulmod(T1, T2,p) // W=UV\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\n     \n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\n      \n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\n      \n     { \n      //value of dibit\t\n      T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\n      \n      if iszero(T4){\n       Y:=sub(p,Y)//restore the -Y inversion \n       continue\n      }// if T4!=0\n        \n      if eq(T4,1) {\n      \tT1:=gx\n      \tT2:=gy\n      \t\n      \t}\n      if eq(T4,2) {\n        T1:=Q0\n      \tT2:=Q1\n      }\n      if eq(T4,3) {\n      \t T1:=H0\n      \t T2:= H1\n      \t }\n      \t \t \n       // inlined EcZZ_AddN\n      //T3:=sub(p, Y)\n      //T3:=Y\n      let y2:=addmod(mulmod(T2, zzz,p),Y,p)  //R\n      T2:=addmod(mulmod(T1, zz,p),sub(p,X),p)  //P\n      \n      //special extremely rare case accumulator where EcAdd is replaced by EcDbl, no need to optimize this\n      //todo : construct edge vector case\n      if eq(y2,0){\n       if eq(T2,0){\n       \n       T1:=mulmod(2, Y, p) //U = 2*Y1, y free\n       T2:=mulmod(T1,T1,p)  // V=U^2\n       T3:=mulmod(X, T2,p)// S = X1*V\n      \n      let TT1:=mulmod(T1, T2,p) // W=UV\n      y2:= addmod(X,zz,p)\n      TT1:=addmod(X,sub(p,zz),p)\n      y2:=mulmod(y2,TT1,p)\n      T2:=addmod(X,zz,p)\n      T1:=addmod(X,sub(p,zz),p)\n      T2:=mulmod(T1,T2,p)\n      T4:=mulmod(3,T2,p)\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\n     \n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\n      \n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\n      \n      continue  \n       }\n      }\n      \n      T4:=mulmod(T2, T2, p)//PP\n      let TT1:=mulmod(T4,T2,p)//PPP, this one could be spared, but adding this register spare gas\n      zz:=mulmod(zz,T4,p) \n      zzz:= mulmod(zzz,TT1,p) //zz3=V*ZZ1\n      let TT2:=mulmod(X, T4, p)\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,TT1),p ), mulmod(minus_2, TT2,p) ,p )\n      Y:=addmod(mulmod(addmod(TT2, sub(p,T4),p), y2, p), mulmod(Y, TT1,p),p)\n     \n      X:=T4\n       }\n          \n           }//end loop\n        mstore(add(T, 0x60),zz)\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\n      mstore(T, 0x20)\n      mstore(add(T, 0x20), 0x20)\n      mstore(add(T, 0x40), 0x20)\n      // Define variables base, exponent and modulus\n      //mstore(add(pointer, 0x60), u)\n      mstore(add(T, 0x80), minus_2)\n      mstore(add(T, 0xa0), p)\n               \n      // Call the precompiled contract 0x05 = ModExp\n      if iszero(staticcall(not(0), 0x05, T, 0xc0, T, 0x20)) {\n            revert(0, 0)\n      }\n       \n      //Y:=mulmod(Y,zzz,p)//Y/zzz\n      //zz :=mulmod(zz, mload(T),p) //1/z\n      //zz:= mulmod(zz,zz,p) //1/zz\n      X:=mulmod(X,mload(T),p)//X/zz\n      } //end assembly\n     }//end unchecked\n     \n      return X;\n    }\n    \n       \n      //8 dimensions Shamir's trick, using precomputations stored in Shamir8,  stored as Bytecode of an external\n      //contract at given address dataPointer\n      //(thx to Lakhdar https://github.com/Kelvyne for EVM storage explanations and tricks)\n      // the external tool to generate tables from public key is in the /sage directory\n    function ecZZ_mulmuladd_S8_extcode(uint scalar_u, uint scalar_v, address dataPointer) \n    internal  returns(uint X/*, uint Y*/)\n    {\n    \n      unchecked{ \n      uint zz; // third and  coordinates of the point\n     \n      uint[6] memory T;\n      zz=256;//start index\n      \n      \n      while(T[0]==0)\n      {\n      zz=zz-1;\n      //tbd case of msb octobit is null\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\n      }\n     assembly{\n   \n      extcodecopy(dataPointer, T, mload(T), 64)\n      \n      X:= mload(T)\n      let Y:= mload(add(T,32))\n      let zzz:=1\n      zz:=1\n     \n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \n      { \n   \t{\n      let TT1:=mulmod(2, Y, p) //U = 2*Y1, y free\n      let T2:=mulmod(TT1,TT1,p)  // V=U^2\n      let T3:=mulmod(X, T2,p)// S = X1*V\n      let T1:=mulmod(TT1, T2,p) // W=UV\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\n     \n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\n      let T5:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\n      \n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\n      Y:= addmod(mulmod(T1, Y ,p), T5,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\n       \n      /* compute element to access in precomputed table */\n      }\n      {\n      let T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\n      let index2:=sub(index, 64)\n      let T3:=add(T4, add( shl(12, and(shr(index2, scalar_v),1)), shl(8, and(shr(index2, scalar_u),1)) ))\n      let index3:=sub(index2, 64)\n      let T2:=add(T3,add( shl(11, and(shr(index3, scalar_v),1)), shl(7, and(shr(index3, scalar_u),1)) ))\n      index:=sub(index3, 64)\n      let T1:=add(T2,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\n      \n      //index:=add(index,192), restore index, interleaved with loop\n      \n      //tbd: check validity of formulae with (0,1) to remove conditional jump\n         if iszero(T1){\n           Y:=sub(p, Y)\n    \n         continue\n         }\n       extcodecopy(dataPointer, T,T1, 64)\n     }\n     \n     {\n     \n         /* Access to precomputed table using extcodecopy hack */\n          \n      // inlined EcZZ_AddN\n      \n      \n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \n      let T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \n      \n      //special case ecAdd(P,P)=EcDbl\n      if eq(y2,0){\n       if eq(T2,0){\n       let    T1:=mulmod(2, Y, p) //U = 2*Y1, y free\n       T2:=mulmod(T1,T1,p)  // V=U^2\n       let T3:=mulmod(X, T2,p)// S = X1*V\n      \n      let TT1:=mulmod(T1, T2,p) // W=UV\n      y2:= addmod(X,zz,p)\n      TT1:=addmod(X,sub(p,zz),p)\n      y2:=mulmod(y2,TT1,p)\n      T2:=addmod(X,zz,p)\n      T1:=addmod(X,sub(p,zz),p)\n      T2:=mulmod(T1,T2,p)\n      let T4:=mulmod(3,T2,p)\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\n     \n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\n      \n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\n         continue\n       }\n      }\n      \n      let T4:=mulmod(T2, T2, p)\n      let T1:=mulmod(T4,T2,p)//\n       zz:=mulmod(zz,T4,p) //zzz3=V*ZZ1\n      zzz:= mulmod(zzz,T1,p) // W=UV/\n      let zz1:=mulmod(X, T4, p)\n      X:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\n      Y:=addmod(mulmod(addmod(zz1, sub(p,X),p), y2, p), mulmod(Y, T1,p),p)\n      \n    \n      }\n      \n     }//end loop\n      mstore(add(T, 0x60),zz)\n        \n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\n      mstore(T, 0x20)\n      mstore(add(T, 0x20), 0x20)\n      mstore(add(T, 0x40), 0x20)\n      // Define variables base, exponent and modulus\n      //mstore(add(pointer, 0x60), u)\n      mstore(add(T, 0x80), minus_2)\n      mstore(add(T, 0xa0), p)\n               \n      // Call the precompiled contract 0x05 = ModExp\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\n            revert(0, 0)\n      }\n      \n      zz:=mload(T)\n      X:=mulmod(X,zz,p)//X/zz\n       }       \n      }//end unchecked\n    }\n\n   \n     \n      // improving the extcodecopy trick : append array at end of contract\n    function ecZZ_mulmuladd_S8_hackmem(uint scalar_u, uint scalar_v, uint dataPointer) \n    internal  returns(uint X/*, uint Y*/)\n    {\n      uint zz; // third and  coordinates of the point\n     \n      uint[6] memory T;\n      zz=256;//start index\n      \n      unchecked{ \n      \n      while(T[0]==0)\n      {\n      zz=zz-1;\n      //tbd case of msb octobit is null\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\n      }\n     assembly{\n   \n      codecopy( T, add(mload(T), dataPointer), 64)\n      X:= mload(T)\n      let Y:= mload(add(T,32))\n      let zzz:=1\n      zz:=1\n     \n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \n      { \n   \n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\n      let T2:=mulmod(T1,T1,p)  // V=U^2\n      let T3:=mulmod(X, T2,p)// S = X1*V\n      T1:=mulmod(T1, T2,p) // W=UV\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\n     \n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\n     \n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\n       \n      /* compute element to access in precomputed table */\n      \n      T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\n      index:=sub(index, 64)\n      T4:=add(T4, add( shl(12, and(shr(index, scalar_v),1)), shl(8, and(shr(index, scalar_u),1)) ))\n      index:=sub(index, 64)\n      T4:=add(T4,add( shl(11, and(shr(index, scalar_v),1)), shl(7, and(shr(index, scalar_u),1)) ))\n      index:=sub(index, 64)\n      T4:=add(T4,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\n      //index:=add(index,192), restore index, interleaved with loop\n      \n      //tbd: check validity of formulae with (0,1) to remove conditional jump\n         if iszero(T4){\n           Y:=sub(p, Y)\n    \n         continue\n         }\n     {\n         /* Access to precomputed table using extcodecopy hack */\n      codecopy( T, add(T4, dataPointer), 64)\n          \n      // inlined EcZZ_AddN\n      \n     \n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \n      T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \n      T4:=mulmod(T2, T2, p)\n      T1:=mulmod(T4,T2,p)\n      T2:=mulmod(zz,T4,p) // W=UV\n      zzz:= mulmod(zzz,T1,p) //zz3=V*ZZ1\n      let zz1:=mulmod(X, T4, p)\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\n      Y:=addmod(mulmod(addmod(zz1, sub(p,T4),p), y2, p), mulmod(Y, T1,p),p)\n      zz:=T2\n      X:=T4\n      }\n      \n     }//end loop\n      mstore(add(T, 0x60),zz)\n        \n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\n      mstore(T, 0x20)\n      mstore(add(T, 0x20), 0x20)\n      mstore(add(T, 0x40), 0x20)\n      // Define variables base, exponent and modulus\n      //mstore(add(pointer, 0x60), u)\n      mstore(add(T, 0x80), minus_2)\n      mstore(add(T, 0xa0), p)\n               \n      // Call the precompiled contract 0x05 = ModExp\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\n            revert(0, 0)\n      }\n      \n      zz:=mload(T)\n      X:=mulmod(X,zz,p)//X/zz\n       }       \n      }//end unchecked\n    }\n\n    function ecdsa_verify_mem(\n        bytes32 message,\n        uint[2] memory rs,\n        uint[2] memory Q\n    ) internal view returns (bool) {\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\n            return false;\n        }\n        \n        \n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\n            return false;\n        }\n  \t\n        uint sInv = FCL_nModInv(n-rs[1]);\n        \n        uint scalar_u=mulmod(uint(message), sInv, n);\n        uint scalar_v= mulmod(rs[0], sInv, n);\n        uint x1;\n\t\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\n       \t\n        assembly{\n\t x1:=addmod(x1,sub(n,mload(rs)), n)\n\t}\n\t//return true; \t\n        return x1 == 0;\n        \n       }\n                \n    /**\n     * @dev ECDSA verification, given , signature, and public key.\n     */\n    function ecdsa_verify(\n        bytes32 message,\n        uint[2] calldata rs,\n        uint[2] calldata Q\n    ) internal  returns (bool) {\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\n            return false;\n        }\n        \n        \n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\n            return false;\n        }\n  \t\n        uint sInv = FCL_nModInv(n-rs[1]);\n        \n        uint scalar_u=mulmod(uint(message), sInv, n);\n        uint scalar_v= mulmod(rs[0], sInv, n);\n        uint x1;\n\t\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\n       \t\n       \t\n        assembly{\n\t x1:=addmod(x1,sub(n,calldataload(rs)), n)\n\t}\n\t//return true; \t\n        return x1 == 0;\n        \n       }\n     \n      /**\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\n        generation of contract bytecode for precomputations is done using sagemath code \n        (see sage directory, WebAuthn_precompute.sage)\n      */\n        \n      function ecdsa_precomputed_verify(\n        bytes32 message,\n        uint[2] calldata rs,\n        address Shamir8\n    ) internal  returns (bool) {\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\n            return false;\n        }\n        /* Q is pushed via bytecode assumed to be correct\n        if (!isOnCurve(Q[0], Q[1])) {\n            return false;\n        }*/\n        \n       uint sInv =FCL_nModInv(rs[1]);\n       //uint sInv =2;\n       \n     \tuint X;\n         \n       //Shamir 8 dimensions\t\n        X=ecZZ_mulmuladd_S8_extcode(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), Shamir8);\n      \n\tassembly{\n\t\n\t X:=addmod(X,sub(n,calldataload(rs)), n)\n\t}\n\t\n\t \n        return X == 0;\n        \n        }//end  ecdsa_precomputed_verify()\n        \n        \n      /**\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\n        generation of contract bytecode for precomputations is done using sagemath code \n        (see sage directory, WebAuthn_precompute.sage)\n      */\n        \n      function ecdsa_precomputed_hackmem(\n        bytes32 message,\n        uint[2] calldata rs,\n        uint256 endcontract\n    ) internal  returns (bool) {\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\n            return false;\n        }\n        /* Q is pushed via bytecode assumed to be correct\n        if (!isOnCurve(Q[0], Q[1])) {\n            return false;\n        }*/\n        \n        uint sInv =FCL_nModInv(rs[1]);\n     \tuint X;\n         \n       //Shamir 8 dimensions\t\n        X=ecZZ_mulmuladd_S8_hackmem(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), endcontract);\n      \n\tassembly{\n\t X:=addmod(X,sub(n,calldataload(rs)), n)\n\t}\n        return X == 0;\n        \n        }//end  ecdsa_precomputed_verify()\n}//EOF\n\n\n"},"contracts/P256Signer.sol":{"content":"pragma solidity ^0.8.0;\n\nimport {Webauthn} from \"./Webauthn.sol\";\n\n/// @title P256Signer\n/// @notice A contract used to verify ECDSA signatures over secp256r1 through\n///         EIP-1271 of Webauthn payloads.\n/// @dev This contract is the implementation. It is meant to be used through\n///      proxy clone.\ncontract P256Signer {\n    /// @notice The EIP-1271 magic value\n    bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\n\n    /// @notice The old EIP-1271 magic value\n    bytes4 internal constant OLD_EIP1271_MAGICVALUE = 0x20c13b0b;\n\n    /// @notice Whether the contract has been initialized\n    bool public initialized;\n\n    /// @notice The x coordinate of the secp256r1 public key\n    uint256 public x;\n\n    /// @notice The y coordinate of the secp256r1 public key\n    uint256 public y;\n\n    /// @notice Error message when the signature is invalid\n    error InvalidSignature();\n\n    /// @notice Error message when the hash is invalid\n    error InvalidHash();\n\n    /// @notice Error message when the contract is already initialized\n    error AlreadyInitialized();\n\n    constructor() {\n        initialized = true;\n    }\n\n    /// @notice Verifies that the signer is the owner of the secp256r1 public key.\n    /// @param _hash The hash of the data signed\n    /// @param _signature The signature\n    /// @return The EIP-1271 magic value\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4) {\n        _validate(abi.encode(_hash), _signature);\n        return EIP1271_MAGICVALUE;\n    }\n\n    /// @notice Verifies that the signer is the owner of the secp256r1 public key.\n    /// @dev This is the old version of the function of EIP-1271 using bytes\n    ///      memory instead of bytes32\n    /// @param _hash The hash of the data signed\n    /// @param _signature The signature\n    /// @return The EIP-1271 magic value\n    function isValidSignature(bytes memory _hash, bytes memory _signature) public view returns (bytes4) {\n        _validate(_hash, _signature);\n        return OLD_EIP1271_MAGICVALUE;\n    }\n\n    /// @notice Validates the signature\n    /// @param data The data signed\n    /// @param _signature The signature\n    function _validate(bytes memory data, bytes memory _signature) private view {\n        bytes32 _hash = keccak256(data);\n        (bytes memory authenticatorData, bytes memory clientData, uint256 challengeOffset, uint256[2] memory rs) =\n            abi.decode(_signature, (bytes, bytes, uint256, uint256[2]));\n\n        bool valid = Webauthn.checkSignature(authenticatorData, 0x01, clientData, _hash, challengeOffset, rs, [x, y]);\n\n        if (!valid) revert InvalidSignature();\n    }\n\n    /// @dev This function is only callable once and needs to be called immediately\n    ///      after deployment by the factory in the same transaction.\n    /// @param x_ The x coordinate of the public key\n    /// @param y_ The y coordinate of the public key\n    function initialize(uint256 x_, uint256 y_) external {\n        if (initialized) revert AlreadyInitialized();\n        initialized = true;\n        x = x_;\n        y = y_;\n    }\n}\n"},"contracts/P256SignerFactory.sol":{"content":"pragma solidity ^0.8.0;\n\nimport {P256Signer} from \"./P256Signer.sol\";\nimport \"solady/src/utils/LibClone.sol\";\n\n/// @title P256SignerFactory\n/// @notice Factory contract for creating proxies for P256Signer\ncontract P256SignerFactory {\n    /// @notice The implementation address of the P256Signer contract\n    address public immutable implementation;\n\n    constructor(address implementation_) {\n        implementation = implementation_;\n    }\n\n    /// @notice Emitted when a new P256Signer proxy contract is created\n    event NewSignerCreated(uint256 indexed x, uint256 indexed y, address signer);\n\n    /// @notice Creates a new P256Signer proxy contract\n    /// @param x The x coordinate of the public key\n    /// @param y The y coordinate of the public key\n    function create(uint256 x, uint256 y) external returns (address) {\n        bytes32 salt = keccak256(abi.encodePacked(x, y));\n        address signer = LibClone.cloneDeterministic(implementation, salt);\n        P256Signer(signer).initialize(x, y);\n        emit NewSignerCreated(x, y, signer);\n        return signer;\n    }\n}\n"},"contracts/Webauthn.sol":{"content":"// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport {Base64URL} from \"./Base64URL.sol\";\nimport {FCL_Elliptic_ZZ} from \"./FCL/FCL_elliptic.sol\";\n\nerror InvalidAuthenticatorData();\nerror InvalidClientData();\nerror InvalidSignature();\n\nlibrary Webauthn {\n    function checkSignature(\n        bytes memory authenticatorData,\n        bytes1 authenticatorDataFlagMask,\n        bytes memory clientData,\n        bytes32 clientChallenge,\n        uint clientChallengeDataOffset,\n        uint[2] memory rs,\n        uint[2] memory Q\n    ) public view returns (bool) {\n        // Let the caller check if User Presence (0x01) or User Verification (0x04) are set\n        if (\n            (authenticatorData[32] & authenticatorDataFlagMask) !=\n            authenticatorDataFlagMask\n        ) {\n            revert InvalidAuthenticatorData();\n        }\n        // Verify that clientData commits to the expected client challenge\n        string memory challengeEncoded = Base64URL.encode32(\n            abi.encodePacked(clientChallenge)\n        );\n        bytes memory challengeExtracted = new bytes(\n            bytes(challengeEncoded).length\n        );\n        copyBytes(\n            clientData,\n            clientChallengeDataOffset,\n            challengeExtracted.length,\n            challengeExtracted,\n            0\n        );\n        if (\n            keccak256(abi.encodePacked(bytes(challengeEncoded))) !=\n            keccak256(abi.encodePacked(challengeExtracted))\n        ) {\n            revert InvalidClientData();\n        }      \n        // Verify the signature over sha256(authenticatorData || sha256(clientData))\n        bytes memory verifyData = new bytes(authenticatorData.length + 32);\n        copyBytes(\n            authenticatorData,\n            0,\n            authenticatorData.length,\n            verifyData,\n            0\n        );\n        copyBytes(\n            abi.encodePacked(sha256(clientData)),\n            0,\n            32,\n            verifyData,\n            authenticatorData.length\n        );\n        bytes32 message = sha256(verifyData);\n        return FCL_Elliptic_ZZ.ecdsa_verify_mem(message, rs, Q);\n    }\n\n    /*\n    The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n  */\n    function copyBytes(\n        bytes memory _from,\n        uint _fromOffset,\n        uint _length,\n        bytes memory _to,\n        uint _toOffset\n    ) internal pure returns (bytes memory _copiedBytes) {\n        uint minLength = _length + _toOffset;\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint j = 32 + _toOffset;\n        while (i < (32 + _fromOffset + _length)) {\n            assembly {\n                let tmp := mload(add(_from, i))\n                mstore(add(_to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n        return _to;\n    }\n}\n"},"solady/src/utils/LibClone.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/// @notice Minimal proxy library.\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)\n/// @author Minimal proxy by 0age (https://github.com/0age)\n/// @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie\n/// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\n///\n/// @dev Minimal proxy:\n/// Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime,\n/// it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,\n/// which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.\n///\n/// @dev Minimal proxy (PUSH0 variant):\n/// This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai.\n/// It is optimized first for minimal runtime gas, then for minimal bytecode.\n/// The PUSH0 clone functions are intentionally postfixed with a jarring \"_PUSH0\" as\n/// many EVM chains may not support the PUSH0 opcode in the early months after Shanghai.\n/// Please use with caution.\n///\n/// @dev Clones with immutable args (CWIA):\n/// The implementation of CWIA here implements a `receive()` method that emits the\n/// `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata,\n/// enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards\n/// composability. The minimal proxy implementation does not offer this feature.\nlibrary LibClone {\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                       CUSTOM ERRORS                        */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Unable to deploy the clone.\n    error DeploymentFailed();\n\n    /// @dev The salt must start with either the zero address or the caller.\n    error SaltDoesNotStartWithCaller();\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                  MINIMAL PROXY OPERATIONS                  */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a clone of `implementation`.\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * --------------------------------------------------------------------------+\n             * CREATION (9 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\n             * --------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize     | r         |                              |\n             * 3d         | RETURNDATASIZE    | 0 r       |                              |\n             * 81         | DUP2              | r 0 r     |                              |\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                              |\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\n             * --------------------------------------------------------------------------|\n             * RUNTIME (44 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\n             * --------------------------------------------------------------------------|\n             *                                                                           |\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | 0                      |                       |\n             * 3d      | RETURNDATASIZE | 0 0                    |                       |\n             * 3d      | RETURNDATASIZE | 0 0 0                  |                       |\n             * 3d      | RETURNDATASIZE | 0 0 0 0                |                       |\n             *                                                                           |\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            |                       |\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          |                       |\n             * 3d      | RETURNDATASIZE | 0 0 cds 0 0 0 0        |                       |\n             * 37      | CALLDATACOPY   | 0 0 0 0                | [0..cds): calldata    |\n             *                                                                           |\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            | [0..cds): calldata    |\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          | [0..cds): calldata    |\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0 0 0     | [0..cds): calldata    |\n             * 5a      | GAS            | gas addr 0 cds 0 0 0 0 | [0..cds): calldata    |\n             * f4      | DELEGATECALL   | success 0 0            | [0..cds): calldata    |\n             *                                                                           |\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | rds success 0 0        | [0..cds): calldata    |\n             * 3d      | RETURNDATASIZE | rds rds success 0 0    | [0..cds): calldata    |\n             * 93      | SWAP4          | 0 rds success 0 rds    | [0..cds): calldata    |\n             * 80      | DUP1           | 0 0 rds success 0 rds  | [0..cds): calldata    |\n             * 3e      | RETURNDATACOPY | success 0 rds          | [0..rds): returndata  |\n             *                                                                           |\n             * 60 0x2a | PUSH1 0x2a     | 0x2a success 0 rds     | [0..rds): returndata  |\n             * 57      | JUMPI          | 0 rds                  | [0..rds): returndata  |\n             *                                                                           |\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * fd      | REVERT         |                        | [0..rds): returndata  |\n             *                                                                           |\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b      | JUMPDEST       | 0 rds                  | [0..rds): returndata  |\n             * f3      | RETURN         |                        | [0..rds): returndata  |\n             * --------------------------------------------------------------------------+\n             */\n\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\n            mstore(0x14, implementation)\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            instance := create(0, 0x0c, 0x35)\n            // If `instance` is zero, revert.\n            if iszero(instance) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x21, 0)\n        }\n    }\n\n    /// @dev Deploys a deterministic clone of `implementation` with `salt`.\n    function cloneDeterministic(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\n            mstore(0x14, implementation)\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            instance := create2(0, 0x0c, 0x35, salt)\n            // If `instance` is zero, revert.\n            if iszero(instance) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x21, 0)\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the clone of `implementation`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash(address implementation) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\n            mstore(0x14, implementation)\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\n            hash := keccak256(0x0c, 0x35)\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x21, 0)\n        }\n    }\n\n    /// @dev Returns the address of the deterministic clone of `implementation`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer)\n        internal\n        pure\n        returns (address predicted)\n    {\n        bytes32 hash = initCodeHash(implementation);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*          MINIMAL PROXY OPERATIONS (PUSH0 VARIANT)          */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a PUSH0 clone of `implementation`.\n    function clone_PUSH0(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            /**\n             * --------------------------------------------------------------------------+\n             * CREATION (9 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\n             * --------------------------------------------------------------------------|\n             * 60 runSize | PUSH1 runSize     | r         |                              |\n             * 5f         | PUSH0             | 0 r       |                              |\n             * 81         | DUP2              | r 0 r     |                              |\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\n             * 5f         | PUSH0             | 0 o r 0 r |                              |\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\n             * --------------------------------------------------------------------------|\n             * RUNTIME (45 bytes)                                                        |\n             * --------------------------------------------------------------------------|\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\n             * --------------------------------------------------------------------------|\n             *                                                                           |\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\n             * 5f      | PUSH0          | 0                      |                       |\n             * 5f      | PUSH0          | 0 0                    |                       |\n             *                                                                           |\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0                |                       |\n             * 5f      | PUSH0          | 0 cds 0 0              |                       |\n             * 5f      | PUSH0          | 0 0 cds 0 0            |                       |\n             * 37      | CALLDATACOPY   | 0 0                    | [0..cds): calldata    |\n             *                                                                           |\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\n             * 36      | CALLDATASIZE   | cds 0 0                | [0..cds): calldata    |\n             * 5f      | PUSH0          | 0 cds 0 0              | [0..cds): calldata    |\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0         | [0..cds): calldata    |\n             * 5a      | GAS            | gas addr 0 cds 0 0     | [0..cds): calldata    |\n             * f4      | DELEGATECALL   | success                | [0..cds): calldata    |\n             *                                                                           |\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | rds success            | [0..cds): calldata    |\n             * 5f      | PUSH0          | 0 rds success          | [0..cds): calldata    |\n             * 5f      | PUSH0          | 0 0 rds success        | [0..cds): calldata    |\n             * 3e      | RETURNDATACOPY | success                | [0..rds): returndata  |\n             *                                                                           |\n             * 60 0x29 | PUSH1 0x29     | 0x29 success           | [0..rds): returndata  |\n             * 57      | JUMPI          |                        | [0..rds): returndata  |\n             *                                                                           |\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\n             * fd      | REVERT         |                        | [0..rds): returndata  |\n             *                                                                           |\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b      | JUMPDEST       |                        | [0..rds): returndata  |\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\n             * f3      | RETURN         |                        | [0..rds): returndata  |\n             * --------------------------------------------------------------------------+\n             */\n\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\n            mstore(0x14, implementation) // 20\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            instance := create(0, 0x0e, 0x36)\n            // If `instance` is zero, revert.\n            if iszero(instance) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x24, 0)\n        }\n    }\n\n    /// @dev Deploys a deterministic PUSH0 clone of `implementation` with `salt`.\n    function cloneDeterministic_PUSH0(address implementation, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\n            mstore(0x14, implementation) // 20\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            instance := create2(0, 0x0e, 0x36, salt)\n            // If `instance` is zero, revert.\n            if iszero(instance) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x24, 0)\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the PUSH0 clone of `implementation`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash_PUSH0(address implementation) internal pure returns (bytes32 hash) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\n            mstore(0x14, implementation) // 20\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\n            hash := keccak256(0x0e, 0x36)\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x24, 0)\n        }\n    }\n\n    /// @dev Returns the address of the deterministic PUSH0 clone of `implementation`,\n    /// with `salt` by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress_PUSH0(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHash_PUSH0(implementation);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*           CLONES WITH IMMUTABLE ARGS OPERATIONS            */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Deploys a minimal proxy with `implementation`,\n    /// using immutable arguments encoded in `data`.\n    ///\n    /// Note: This implementation of CWIA differs from the original implementation.\n    /// If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`.\n    function clone(address implementation, bytes memory data) internal returns (address instance) {\n        assembly {\n            // Compute the boundaries of the data and cache the memory slots around it.\n            let mBefore3 := mload(sub(data, 0x60))\n            let mBefore2 := mload(sub(data, 0x40))\n            let mBefore1 := mload(sub(data, 0x20))\n            let dataLength := mload(data)\n            let dataEnd := add(add(data, 0x20), dataLength)\n            let mAfter1 := mload(dataEnd)\n\n            // +2 bytes for telling how much data there is appended to the call.\n            let extraLength := add(dataLength, 2)\n            // The `creationSize` is `extraLength + 108`\n            // The `runSize` is `creationSize - 10`.\n\n            /**\n             * ---------------------------------------------------------------------------------------------------+\n             * CREATION (10 bytes)                                                                                |\n             * ---------------------------------------------------------------------------------------------------|\n             * Opcode     | Mnemonic          | Stack     | Memory                                                |\n             * ---------------------------------------------------------------------------------------------------|\n             * 61 runSize | PUSH2 runSize     | r         |                                                       |\n             * 3d         | RETURNDATASIZE    | 0 r       |                                                       |\n             * 81         | DUP2              | r 0 r     |                                                       |\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                                                       |\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                                                       |\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code                            |\n             * f3         | RETURN            |           | [0..runSize): runtime code                            |\n             * ---------------------------------------------------------------------------------------------------|\n             * RUNTIME (98 bytes + extraLength)                                                                   |\n             * ---------------------------------------------------------------------------------------------------|\n             * Opcode   | Mnemonic       | Stack                    | Memory                                      |\n             * ---------------------------------------------------------------------------------------------------|\n             *                                                                                                    |\n             * ::: if no calldata, emit event & return w/o `DELEGATECALL` ::::::::::::::::::::::::::::::::::::::: |\n             * 36       | CALLDATASIZE   | cds                      |                                             |\n             * 60 0x2c  | PUSH1 0x2c     | 0x2c cds                 |                                             |\n             * 57       | JUMPI          |                          |                                             |\n             * 34       | CALLVALUE      | cv                       |                                             |\n             * 3d       | RETURNDATASIZE | 0 cv                     |                                             |\n             * 52       | MSTORE         |                          | [0..0x20): callvalue                        |\n             * 7f sig   | PUSH32 0x9e..  | sig                      | [0..0x20): callvalue                        |\n             * 59       | MSIZE          | 0x20 sig                 | [0..0x20): callvalue                        |\n             * 3d       | RETURNDATASIZE | 0 0x20 sig               | [0..0x20): callvalue                        |\n             * a1       | LOG1           |                          | [0..0x20): callvalue                        |\n             * 00       | STOP           |                          | [0..0x20): callvalue                        |\n             * 5b       | JUMPDEST       |                          |                                             |\n             *                                                                                                    |\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36       | CALLDATASIZE   | cds                      |                                             |\n             * 3d       | RETURNDATASIZE | 0 cds                    |                                             |\n             * 3d       | RETURNDATASIZE | 0 0 cds                  |                                             |\n             * 37       | CALLDATACOPY   |                          | [0..cds): calldata                          |\n             *                                                                                                    |\n             * ::: keep some values in stack :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d       | RETURNDATASIZE | 0                        | [0..cds): calldata                          |\n             * 3d       | RETURNDATASIZE | 0 0                      | [0..cds): calldata                          |\n             * 3d       | RETURNDATASIZE | 0 0 0                    | [0..cds): calldata                          |\n             * 3d       | RETURNDATASIZE | 0 0 0 0                  | [0..cds): calldata                          |\n             * 61 extra | PUSH2 extra    | e 0 0 0 0                | [0..cds): calldata                          |\n             *                                                                                                    |\n             * ::: copy extra data to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 80       | DUP1           | e e 0 0 0 0              | [0..cds): calldata                          |\n             * 60 0x62  | PUSH1 0x62     | 0x62 e e 0 0 0 0         | [0..cds): calldata                          |\n             * 36       | CALLDATASIZE   | cds 0x62 e e 0 0 0 0     | [0..cds): calldata                          |\n             * 39       | CODECOPY       | e 0 0 0 0                | [0..cds): calldata, [cds..cds+e): extraData |\n             *                                                                                                    |\n             * ::: delegate call to the implementation contract ::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 36       | CALLDATASIZE   | cds e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\n             * 01       | ADD            | cds+e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\n             * 3d       | RETURNDATASIZE | 0 cds+e 0 0 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\n             * 73 addr  | PUSH20 addr    | addr 0 cds+e 0 0 0 0     | [0..cds): calldata, [cds..cds+e): extraData |\n             * 5a       | GAS            | gas addr 0 cds+e 0 0 0 0 | [0..cds): calldata, [cds..cds+e): extraData |\n             * f4       | DELEGATECALL   | success 0 0              | [0..cds): calldata, [cds..cds+e): extraData |\n             *                                                                                                    |\n             * ::: copy return data to memory ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 3d       | RETURNDATASIZE | rds success 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\n             * 3d       | RETURNDATASIZE | rds rds success 0 0      | [0..cds): calldata, [cds..cds+e): extraData |\n             * 93       | SWAP4          | 0 rds success 0 rds      | [0..cds): calldata, [cds..cds+e): extraData |\n             * 80       | DUP1           | 0 0 rds success 0 rds    | [0..cds): calldata, [cds..cds+e): extraData |\n             * 3e       | RETURNDATACOPY | success 0 rds            | [0..rds): returndata                        |\n             *                                                                                                    |\n             * 60 0x60  | PUSH1 0x60     | 0x60 success 0 rds       | [0..rds): returndata                        |\n             * 57       | JUMPI          | 0 rds                    | [0..rds): returndata                        |\n             *                                                                                                    |\n             * ::: revert ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * fd       | REVERT         |                          | [0..rds): returndata                        |\n             *                                                                                                    |\n             * ::: return ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\n             * 5b       | JUMPDEST       | 0 rds                    | [0..rds): returndata                        |\n             * f3       | RETURN         |                          | [0..rds): returndata                        |\n             * ---------------------------------------------------------------------------------------------------+\n             */\n            // Write the bytecode before the data.\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\n            // Write the address of the implementation.\n            mstore(sub(data, 0x0d), implementation)\n            // Write the rest of the bytecode.\n            mstore(\n                sub(data, 0x21),\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\n            )\n            // `keccak256(\"ReceiveETH(uint256)\")`\n            mstore(\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\n            )\n            mstore(\n                // Do a out-of-gas revert if `extraLength` is too big. 0xffff - 0x62 + 0x01 = 0xff9e.\n                // The actual EVM limit may be smaller and may change over time.\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\n            )\n            mstore(dataEnd, shl(0xf0, extraLength))\n\n            // Create the instance.\n            instance := create(0, sub(data, 0x4c), add(extraLength, 0x6c))\n\n            // If `instance` is zero, revert.\n            if iszero(instance) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // Restore the overwritten memory surrounding `data`.\n            mstore(dataEnd, mAfter1)\n            mstore(data, dataLength)\n            mstore(sub(data, 0x20), mBefore1)\n            mstore(sub(data, 0x40), mBefore2)\n            mstore(sub(data, 0x60), mBefore3)\n        }\n    }\n\n    /// @dev Deploys a deterministic clone of `implementation`,\n    /// using immutable arguments encoded in `data`, with `salt`.\n    ///\n    /// Note: This implementation of CWIA differs from the original implementation.\n    /// If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`.\n    function cloneDeterministic(address implementation, bytes memory data, bytes32 salt)\n        internal\n        returns (address instance)\n    {\n        assembly {\n            // Compute the boundaries of the data and cache the memory slots around it.\n            let mBefore3 := mload(sub(data, 0x60))\n            let mBefore2 := mload(sub(data, 0x40))\n            let mBefore1 := mload(sub(data, 0x20))\n            let dataLength := mload(data)\n            let dataEnd := add(add(data, 0x20), dataLength)\n            let mAfter1 := mload(dataEnd)\n\n            // +2 bytes for telling how much data there is appended to the call.\n            let extraLength := add(dataLength, 2)\n\n            // Write the bytecode before the data.\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\n            // Write the address of the implementation.\n            mstore(sub(data, 0x0d), implementation)\n            // Write the rest of the bytecode.\n            mstore(\n                sub(data, 0x21),\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\n            )\n            // `keccak256(\"ReceiveETH(uint256)\")`\n            mstore(\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\n            )\n            mstore(\n                // Do a out-of-gas revert if `extraLength` is too big. 0xffff - 0x62 + 0x01 = 0xff9e.\n                // The actual EVM limit may be smaller and may change over time.\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\n            )\n            mstore(dataEnd, shl(0xf0, extraLength))\n\n            // Create the instance.\n            instance := create2(0, sub(data, 0x4c), add(extraLength, 0x6c), salt)\n\n            // If `instance` is zero, revert.\n            if iszero(instance) {\n                // Store the function selector of `DeploymentFailed()`.\n                mstore(0x00, 0x30116425)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n\n            // Restore the overwritten memory surrounding `data`.\n            mstore(dataEnd, mAfter1)\n            mstore(data, dataLength)\n            mstore(sub(data, 0x20), mBefore1)\n            mstore(sub(data, 0x40), mBefore2)\n            mstore(sub(data, 0x60), mBefore3)\n        }\n    }\n\n    /// @dev Returns the initialization code hash of the clone of `implementation`\n    /// using immutable arguments encoded in `data`.\n    /// Used for mining vanity addresses with create2crunch.\n    function initCodeHash(address implementation, bytes memory data)\n        internal\n        pure\n        returns (bytes32 hash)\n    {\n        assembly {\n            // Compute the boundaries of the data and cache the memory slots around it.\n            let mBefore3 := mload(sub(data, 0x60))\n            let mBefore2 := mload(sub(data, 0x40))\n            let mBefore1 := mload(sub(data, 0x20))\n            let dataLength := mload(data)\n            let dataEnd := add(add(data, 0x20), dataLength)\n            let mAfter1 := mload(dataEnd)\n\n            // Do a out-of-gas revert if `dataLength` is too big. 0xffff - 0x02 - 0x62 = 0xff9b.\n            // The actual EVM limit may be smaller and may change over time.\n            returndatacopy(returndatasize(), returndatasize(), gt(dataLength, 0xff9b))\n\n            // +2 bytes for telling how much data there is appended to the call.\n            let extraLength := add(dataLength, 2)\n\n            // Write the bytecode before the data.\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\n            // Write the address of the implementation.\n            mstore(sub(data, 0x0d), implementation)\n            // Write the rest of the bytecode.\n            mstore(\n                sub(data, 0x21),\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\n            )\n            // `keccak256(\"ReceiveETH(uint256)\")`\n            mstore(\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\n            )\n            mstore(\n                sub(data, 0x5a),\n                or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)\n            )\n            mstore(dataEnd, shl(0xf0, extraLength))\n\n            // Compute and store the bytecode hash.\n            hash := keccak256(sub(data, 0x4c), add(extraLength, 0x6c))\n\n            // Restore the overwritten memory surrounding `data`.\n            mstore(dataEnd, mAfter1)\n            mstore(data, dataLength)\n            mstore(sub(data, 0x20), mBefore1)\n            mstore(sub(data, 0x40), mBefore2)\n            mstore(sub(data, 0x60), mBefore3)\n        }\n    }\n\n    /// @dev Returns the address of the deterministic clone of\n    /// `implementation` using immutable arguments encoded in `data`, with `salt`, by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress(\n        address implementation,\n        bytes memory data,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        bytes32 hash = initCodeHash(implementation, data);\n        predicted = predictDeterministicAddress(hash, salt, deployer);\n    }\n\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\n    /*                      OTHER OPERATIONS                      */\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\n\n    /// @dev Returns the address when a contract with initialization code hash,\n    /// `hash`, is deployed with `salt`, by `deployer`.\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\n    function predictDeterministicAddress(bytes32 hash, bytes32 salt, address deployer)\n        internal\n        pure\n        returns (address predicted)\n    {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Compute and store the bytecode hash.\n            mstore8(0x00, 0xff) // Write the prefix.\n            mstore(0x35, hash)\n            mstore(0x01, shl(96, deployer))\n            mstore(0x15, salt)\n            predicted := keccak256(0x00, 0x55)\n            // Restore the part of the free memory pointer that has been overwritten.\n            mstore(0x35, 0)\n        }\n    }\n\n    /// @dev Reverts if `salt` does not start with either the zero address or the caller.\n    function checkStartsWithCaller(bytes32 salt) internal view {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // If the salt does not start with the zero address or the caller.\n            if iszero(or(iszero(shr(96, salt)), eq(caller(), shr(96, salt)))) {\n                // Store the function selector of `SaltDoesNotStartWithCaller()`.\n                mstore(0x00, 0x2f634836)\n                // Revert with (offset, size).\n                revert(0x1c, 0x04)\n            }\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1000000},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/P256Signer.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/P256Signer.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/P256SignerFactory.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/P256SignerFactory.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n   --> contracts/FCL/FCL_elliptic.sol:124:7:\n    |\n124 |       uint b=mulmod(zz, zzzInv,p); //1/z\n    |       ^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/FCL/FCL_elliptic.sol:38:5:\n   |\n38 |     uint constant b =\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":1808,"file":"contracts/FCL/FCL_elliptic.sol","message":"The shadowed declaration is here:","start":1716}],"severity":"warning","sourceLocation":{"end":5080,"file":"contracts/FCL/FCL_elliptic.sol","start":5074},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/FCL/FCL_elliptic.sol:204:27:\n    |\n204 |     function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\n    |                           ^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":7520,"file":"contracts/FCL/FCL_elliptic.sol","start":7513},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/FCL/FCL_elliptic.sol:204:45:\n    |\n204 |     function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\n    |                                             ^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":7539,"file":"contracts/FCL/FCL_elliptic.sol","start":7531},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/FCL/FCL_elliptic.sol:204:55:\n    |\n204 |     function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\n    |                                                       ^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":7550,"file":"contracts/FCL/FCL_elliptic.sol","start":7541},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/FCL/FCL_elliptic.sol:221:26:\n    |\n221 |    function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\n    |                          ^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8013,"file":"contracts/FCL/FCL_elliptic.sol","start":8007},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n   --> contracts/FCL/FCL_elliptic.sol:723:5:\n    |\n723 |     function ecdsa_verify(\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":24722,"file":"contracts/FCL/FCL_elliptic.sol","start":24007},"type":"Warning"}],"sources":{"contracts/Base64URL.sol":{"ast":{"absolutePath":"contracts/Base64URL.sol","exportedSymbols":{"Base64URL":[48]},"id":49,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Base64URL","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"130:105:0","text":" @dev Provides a set of functions to operate with Base64 strings.\n _Available since v4.5._"},"fullyImplemented":true,"id":48,"linearizedBaseContracts":[48],"name":"Base64URL","nameLocation":"244:9:0","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"260:54:0","text":" @dev Base64 Encoding/Decoding Table"},"id":6,"mutability":"constant","name":"_TABLE","nameLocation":"344:6:0","nodeType":"VariableDeclaration","scope":48,"src":"319:108:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4,"name":"string","nodeType":"ElementaryTypeName","src":"319:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f","id":5,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"361:66:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_5f7e6d3cba140c1411e96b7033571a229a3135b5c436a9698b398a19a1c64b50","typeString":"literal_string \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\""},"value":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},"visibility":"internal"},{"body":{"id":46,"nodeType":"Block","src":"596:3223:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":17,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":14,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"813:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":15,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"818:6:0","memberName":"length","nodeType":"MemberAccess","src":"813:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":16,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"828:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"813:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"documentation":" Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol","id":20,"nodeType":"IfStatement","src":"809:31:0","trueBody":{"expression":{"hexValue":"","id":18,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"838:2:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":13,"id":19,"nodeType":"Return","src":"831:9:0"}},{"assignments":[22],"declarations":[{"constant":false,"id":22,"mutability":"mutable","name":"table","nameLocation":"904:5:0","nodeType":"VariableDeclaration","scope":46,"src":"890:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":21,"name":"string","nodeType":"ElementaryTypeName","src":"890:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":24,"initialValue":{"id":23,"name":"_TABLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6,"src":"912:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"890:28:0"},{"assignments":[26],"declarations":[{"constant":false,"id":26,"mutability":"mutable","name":"result","nameLocation":"1409:6:0","nodeType":"VariableDeclaration","scope":46,"src":"1395:20:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":25,"name":"string","nodeType":"ElementaryTypeName","src":"1395:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":42,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":29,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1429:1:0","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":30,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":9,"src":"1435:4:0","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1440:6:0","memberName":"length","nodeType":"MemberAccess","src":"1435:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":32,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1449:1:0","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1435:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":34,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1434:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"33","id":35,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1454:1:0","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"1434:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":37,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1433:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1429:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1459:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1429:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":28,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1418:10:0","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":27,"name":"string","nodeType":"ElementaryTypeName","src":"1422:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1418:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"1395:66:0"},{"AST":{"nodeType":"YulBlock","src":"1524:2265:0","statements":[{"nodeType":"YulVariableDeclaration","src":"1609:29:0","value":{"arguments":[{"name":"table","nodeType":"YulIdentifier","src":"1629:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"1636:1:0","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1625:3:0"},"nodeType":"YulFunctionCall","src":"1625:13:0"},"variables":[{"name":"tablePtr","nodeType":"YulTypedName","src":"1613:8:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1708:32:0","value":{"arguments":[{"name":"result","nodeType":"YulIdentifier","src":"1729:6:0"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:0","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1725:3:0"},"nodeType":"YulFunctionCall","src":"1725:15:0"},"variables":[{"name":"resultPtr","nodeType":"YulTypedName","src":"1712:9:0","type":""}]},{"body":{"nodeType":"YulBlock","src":"1953:1431:0","statements":[{"nodeType":"YulAssignment","src":"2006:26:0","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2021:7:0"},{"kind":"number","nodeType":"YulLiteral","src":"2030:1:0","type":"","value":"3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2017:3:0"},"nodeType":"YulFunctionCall","src":"2017:15:0"},"variableNames":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2006:7:0"}]},{"nodeType":"YulVariableDeclaration","src":"2049:27:0","value":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"2068:7:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2062:5:0"},"nodeType":"YulFunctionCall","src":"2062:14:0"},"variables":[{"name":"input","nodeType":"YulTypedName","src":"2053:5:0","type":""}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2681:9:0"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2722:8:0"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2740:2:0","type":"","value":"18"},{"name":"input","nodeType":"YulIdentifier","src":"2744:5:0"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2736:3:0"},"nodeType":"YulFunctionCall","src":"2736:14:0"},{"kind":"number","nodeType":"YulLiteral","src":"2752:4:0","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2732:3:0"},"nodeType":"YulFunctionCall","src":"2732:25:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2718:3:0"},"nodeType":"YulFunctionCall","src":"2718:40:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2712:5:0"},"nodeType":"YulFunctionCall","src":"2712:47:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2652:7:0"},"nodeType":"YulFunctionCall","src":"2652:125:0"},"nodeType":"YulExpressionStatement","src":"2652:125:0"},{"nodeType":"YulAssignment","src":"2794:30:0","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2811:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"2822:1:0","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2807:3:0"},"nodeType":"YulFunctionCall","src":"2807:17:0"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2794:9:0"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2882:9:0"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"2923:8:0"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2941:2:0","type":"","value":"12"},{"name":"input","nodeType":"YulIdentifier","src":"2945:5:0"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2937:3:0"},"nodeType":"YulFunctionCall","src":"2937:14:0"},{"kind":"number","nodeType":"YulLiteral","src":"2953:4:0","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2933:3:0"},"nodeType":"YulFunctionCall","src":"2933:25:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2919:3:0"},"nodeType":"YulFunctionCall","src":"2919:40:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2913:5:0"},"nodeType":"YulFunctionCall","src":"2913:47:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"2853:7:0"},"nodeType":"YulFunctionCall","src":"2853:125:0"},"nodeType":"YulExpressionStatement","src":"2853:125:0"},{"nodeType":"YulAssignment","src":"2995:30:0","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3012:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"3023:1:0","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3008:3:0"},"nodeType":"YulFunctionCall","src":"3008:17:0"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"2995:9:0"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3083:9:0"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"3124:8:0"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3142:1:0","type":"","value":"6"},{"name":"input","nodeType":"YulIdentifier","src":"3145:5:0"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3138:3:0"},"nodeType":"YulFunctionCall","src":"3138:13:0"},{"kind":"number","nodeType":"YulLiteral","src":"3153:4:0","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3134:3:0"},"nodeType":"YulFunctionCall","src":"3134:24:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3120:3:0"},"nodeType":"YulFunctionCall","src":"3120:39:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3114:5:0"},"nodeType":"YulFunctionCall","src":"3114:46:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3054:7:0"},"nodeType":"YulFunctionCall","src":"3054:124:0"},"nodeType":"YulExpressionStatement","src":"3054:124:0"},{"nodeType":"YulAssignment","src":"3195:30:0","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3212:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"3223:1:0","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3208:3:0"},"nodeType":"YulFunctionCall","src":"3208:17:0"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3195:9:0"}]},{"expression":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3262:9:0"},{"arguments":[{"arguments":[{"name":"tablePtr","nodeType":"YulIdentifier","src":"3283:8:0"},{"arguments":[{"name":"input","nodeType":"YulIdentifier","src":"3297:5:0"},{"kind":"number","nodeType":"YulLiteral","src":"3304:4:0","type":"","value":"0x3F"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3293:3:0"},"nodeType":"YulFunctionCall","src":"3293:16:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3279:3:0"},"nodeType":"YulFunctionCall","src":"3279:31:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3273:5:0"},"nodeType":"YulFunctionCall","src":"3273:38:0"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"3254:7:0"},"nodeType":"YulFunctionCall","src":"3254:58:0"},"nodeType":"YulExpressionStatement","src":"3254:58:0"},{"nodeType":"YulAssignment","src":"3329:30:0","value":{"arguments":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3346:9:0"},{"kind":"number","nodeType":"YulLiteral","src":"3357:1:0","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3342:3:0"},"nodeType":"YulFunctionCall","src":"3342:17:0"},"variableNames":[{"name":"resultPtr","nodeType":"YulIdentifier","src":"3329:9:0"}]}]},"condition":{"arguments":[{"name":"dataPtr","nodeType":"YulIdentifier","src":"1919:7:0"},{"name":"endPtr","nodeType":"YulIdentifier","src":"1928:6:0"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1916:2:0"},"nodeType":"YulFunctionCall","src":"1916:19:0"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1936:16:0","statements":[]},"pre":{"nodeType":"YulBlock","src":"1811:104:0","statements":[{"nodeType":"YulVariableDeclaration","src":"1829:19:0","value":{"name":"data","nodeType":"YulIdentifier","src":"1844:4:0"},"variables":[{"name":"dataPtr","nodeType":"YulTypedName","src":"1833:7:0","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1865:36:0","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1883:4:0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1895:4:0"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1889:5:0"},"nodeType":"YulFunctionCall","src":"1889:11:0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1879:3:0"},"nodeType":"YulFunctionCall","src":"1879:22:0"},"variables":[{"name":"endPtr","nodeType":"YulTypedName","src":"1869:6:0","type":""}]}]},"src":"1807:1577:0"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":9,"isOffset":false,"isSlot":false,"src":"1844:4:0","valueSize":1},{"declaration":9,"isOffset":false,"isSlot":false,"src":"1883:4:0","valueSize":1},{"declaration":9,"isOffset":false,"isSlot":false,"src":"1895:4:0","valueSize":1},{"declaration":26,"isOffset":false,"isSlot":false,"src":"1729:6:0","valueSize":1},{"declaration":22,"isOffset":false,"isSlot":false,"src":"1629:5:0","valueSize":1}],"id":43,"nodeType":"InlineAssembly","src":"1515:2274:0"},{"expression":{"id":44,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"3806:6:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":13,"id":45,"nodeType":"Return","src":"3799:13:0"}]},"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"434:82:0","text":" @dev Converts a `bytes` to its Bytes64 `string` representation."},"id":47,"implemented":true,"kind":"function","modifiers":[],"name":"encode32","nameLocation":"530:8:0","nodeType":"FunctionDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"data","nameLocation":"552:4:0","nodeType":"VariableDeclaration","scope":47,"src":"539:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8,"name":"bytes","nodeType":"ElementaryTypeName","src":"539:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"538:19:0"},"returnParameters":{"id":13,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":47,"src":"581:13:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":11,"name":"string","nodeType":"ElementaryTypeName","src":"581:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"580:15:0"},"scope":48,"src":"521:3298:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":49,"src":"236:3585:0","usedErrors":[]}],"src":"105:3717:0"},"id":0},"contracts/FCL/FCL_elliptic.sol":{"ast":{"absolutePath":"contracts/FCL/FCL_elliptic.sol","exportedSymbols":{"FCL_Elliptic_ZZ":[1202]},"id":1203,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":50,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"1269:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"FCL_Elliptic_ZZ","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1202,"linearizedBaseContracts":[1202],"name":"FCL_Elliptic_ZZ","nameLocation":"1338:15:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":53,"mutability":"constant","name":"p","nameLocation":"1453:1:1","nodeType":"VariableDeclaration","scope":1202,"src":"1439:84:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint","nodeType":"ElementaryTypeName","src":"1439:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303031303030303030303030303030303030303030303030303030464646464646464646464646464646464646464646464646","id":52,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1457:66:1","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573530086143415290314195533631308867097853951_by_1","typeString":"int_const 1157...(70 digits omitted)...3951"},"value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF"},"visibility":"internal"},{"constant":true,"id":56,"mutability":"constant","name":"a","nameLocation":"1585:1:1","nodeType":"VariableDeclaration","scope":1202,"src":"1571:92:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":54,"name":"uint","nodeType":"ElementaryTypeName","src":"1571:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303031303030303030303030303030303030303030303030303030464646464646464646464646464646464646464646464643","id":55,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1597:66:1","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573530086143415290314195533631308867097853948_by_1","typeString":"int_const 1157...(70 digits omitted)...3948"},"value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC"},"visibility":"internal"},{"constant":true,"id":59,"mutability":"constant","name":"b","nameLocation":"1730:1:1","nodeType":"VariableDeclaration","scope":1202,"src":"1716:92:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":57,"name":"uint","nodeType":"ElementaryTypeName","src":"1716:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307835414336333544384141334139334537423345424244353537363938383642433635314430364230434335334230463633424345334333453237443236303442","id":58,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:66:1","typeDescriptions":{"typeIdentifier":"t_rational_41058363725152142129326129780047268409114441015993725554835256314039467401291_by_1","typeString":"int_const 4105...(69 digits omitted)...1291"},"value":"0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"},"visibility":"internal"},{"constant":true,"id":62,"mutability":"constant","name":"gx","nameLocation":"1874:2:1","nodeType":"VariableDeclaration","scope":1202,"src":"1860:93:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":60,"name":"uint","nodeType":"ElementaryTypeName","src":"1860:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307836423137443146324531324334323437463842434536453536334134343046323737303337443831324445423333413046344131333934354438393843323936","id":61,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1887:66:1","typeDescriptions":{"typeIdentifier":"t_rational_48439561293906451759052585252797914202762949526041747995844080717082404635286_by_1","typeString":"int_const 4843...(69 digits omitted)...5286"},"value":"0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296"},"visibility":"internal"},{"constant":true,"id":65,"mutability":"constant","name":"gy","nameLocation":"1973:2:1","nodeType":"VariableDeclaration","scope":1202,"src":"1959:93:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint","nodeType":"ElementaryTypeName","src":"1959:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307834464533343245324645314137463942384545374542344137433046394531363242434533333537364233313545434543424236343036383337424635314635","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1986:66:1","typeDescriptions":{"typeIdentifier":"t_rational_36134250956749795798585127919587881956611106672985015071877198253568414405109_by_1","typeString":"int_const 3613...(69 digits omitted)...5109"},"value":"0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5"},"visibility":"internal"},{"constant":true,"id":68,"mutability":"constant","name":"n","nameLocation":"2109:1:1","nodeType":"VariableDeclaration","scope":1202,"src":"2095:92:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":66,"name":"uint","nodeType":"ElementaryTypeName","src":"2095:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303030464646464646464646464646464646464243453646414144413731373945383446334239434143324643363332353531","id":67,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:66:1","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573529996955224135760342422259061068512044369_by_1","typeString":"int_const 1157...(70 digits omitted)...4369"},"value":"0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"},"visibility":"internal"},{"constant":true,"id":71,"mutability":"constant","name":"minus_2","nameLocation":"2296:7:1","nodeType":"VariableDeclaration","scope":1202,"src":"2282:90:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":69,"name":"uint","nodeType":"ElementaryTypeName","src":"2282:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303031303030303030303030303030303030303030303030303030464646464646464646464646464646464646464646464644","id":70,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2306:66:1","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573530086143415290314195533631308867097853949_by_1","typeString":"int_const 1157...(70 digits omitted)...3949"},"value":"0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD"},"visibility":"internal"},{"constant":true,"id":74,"mutability":"constant","name":"minus_2modn","nameLocation":"2447:11:1","nodeType":"VariableDeclaration","scope":1202,"src":"2433:94:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":72,"name":"uint","nodeType":"ElementaryTypeName","src":"2433:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646463030303030303030464646464646464646464646464646464243453646414144413731373945383446334239434143324643363332353446","id":73,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2461:66:1","typeDescriptions":{"typeIdentifier":"t_rational_115792089210356248762697446949407573529996955224135760342422259061068512044367_by_1","typeString":"int_const 1157...(70 digits omitted)...4367"},"value":"0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F"},"visibility":"internal"},{"constant":true,"id":77,"mutability":"constant","name":"minus_1","nameLocation":"2556:7:1","nodeType":"VariableDeclaration","scope":1202,"src":"2542:94:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":75,"name":"uint","nodeType":"ElementaryTypeName","src":"2542:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307846464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646","id":76,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2570:66:1","typeDescriptions":{"typeIdentifier":"t_rational_115792089237316195423570985008687907853269984665640564039457584007913129639935_by_1","typeString":"int_const 1157...(70 digits omitted)...9935"},"value":"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"},"visibility":"internal"},{"body":{"id":93,"nodeType":"Block","src":"2811:713:1","statements":[{"assignments":[90],"declarations":[{"constant":false,"id":90,"mutability":"mutable","name":"pointer","nameLocation":"2836:7:1","nodeType":"VariableDeclaration","scope":93,"src":"2821:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":88,"name":"uint","nodeType":"ElementaryTypeName","src":"2821:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":89,"length":{"hexValue":"36","id":87,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2826:1:1","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"2821:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"visibility":"internal"}],"id":91,"nodeType":"VariableDeclarationStatement","src":"2821:22:1"},{"AST":{"nodeType":"YulBlock","src":"2862:648:1","statements":[{"expression":{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"2973:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"2982:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2966:6:1"},"nodeType":"YulFunctionCall","src":"2966:21:1"},"nodeType":"YulExpressionStatement","src":"2966:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3011:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3020:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3007:3:1"},"nodeType":"YulFunctionCall","src":"3007:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3027:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3000:6:1"},"nodeType":"YulFunctionCall","src":"3000:32:1"},"nodeType":"YulExpressionStatement","src":"3000:32:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3056:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3065:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3052:3:1"},"nodeType":"YulFunctionCall","src":"3052:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3072:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3045:6:1"},"nodeType":"YulFunctionCall","src":"3045:32:1"},"nodeType":"YulExpressionStatement","src":"3045:32:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3160:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3169:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3156:3:1"},"nodeType":"YulFunctionCall","src":"3156:18:1"},{"name":"u","nodeType":"YulIdentifier","src":"3176:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3149:6:1"},"nodeType":"YulFunctionCall","src":"3149:29:1"},"nodeType":"YulExpressionStatement","src":"3149:29:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3202:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3211:4:1","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3198:3:1"},"nodeType":"YulFunctionCall","src":"3198:18:1"},{"name":"minus_2modn","nodeType":"YulIdentifier","src":"3218:11:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3191:6:1"},"nodeType":"YulFunctionCall","src":"3191:39:1"},"nodeType":"YulExpressionStatement","src":"3191:39:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3254:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3263:4:1","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3250:3:1"},"nodeType":"YulFunctionCall","src":"3250:18:1"},{"name":"n","nodeType":"YulIdentifier","src":"3270:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3243:6:1"},"nodeType":"YulFunctionCall","src":"3243:29:1"},"nodeType":"YulExpressionStatement","src":"3243:29:1"},{"body":{"nodeType":"YulBlock","src":"3421:44:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3446:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3449:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3439:6:1"},"nodeType":"YulFunctionCall","src":"3439:12:1"},"nodeType":"YulExpressionStatement","src":"3439:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3380:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3376:3:1"},"nodeType":"YulFunctionCall","src":"3376:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"3384:4:1","type":"","value":"0x05"},{"name":"pointer","nodeType":"YulIdentifier","src":"3390:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3399:4:1","type":"","value":"0xc0"},{"name":"pointer","nodeType":"YulIdentifier","src":"3405:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3414:4:1","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"3365:10:1"},"nodeType":"YulFunctionCall","src":"3365:54:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3358:6:1"},"nodeType":"YulFunctionCall","src":"3358:62:1"},"nodeType":"YulIf","src":"3355:110:1"},{"nodeType":"YulAssignment","src":"3478:22:1","value":{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3492:7:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3486:5:1"},"nodeType":"YulFunctionCall","src":"3486:14:1"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3478:6:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":74,"isOffset":false,"isSlot":false,"src":"3218:11:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"3270:1:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"2973:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3011:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3056:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3160:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3202:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3254:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3390:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3405:7:1","valueSize":1},{"declaration":90,"isOffset":false,"isSlot":false,"src":"3492:7:1","valueSize":1},{"declaration":83,"isOffset":false,"isSlot":false,"src":"3478:6:1","valueSize":1},{"declaration":80,"isOffset":false,"isSlot":false,"src":"3176:1:1","valueSize":1}],"id":92,"nodeType":"InlineAssembly","src":"2853:657:1"}]},"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"2647:88:1","text":"/* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem"},"id":94,"implemented":true,"kind":"function","modifiers":[],"name":"FCL_nModInv","nameLocation":"2749:11:1","nodeType":"FunctionDefinition","parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":80,"mutability":"mutable","name":"u","nameLocation":"2769:1:1","nodeType":"VariableDeclaration","scope":94,"src":"2761:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":79,"name":"uint256","nodeType":"ElementaryTypeName","src":"2761:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2760:11:1"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":83,"mutability":"mutable","name":"result","nameLocation":"2803:6:1","nodeType":"VariableDeclaration","scope":94,"src":"2795:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":82,"name":"uint256","nodeType":"ElementaryTypeName","src":"2795:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2794:16:1"},"scope":1202,"src":"2740:784:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":110,"nodeType":"Block","src":"3700:690:1","statements":[{"assignments":[107],"declarations":[{"constant":false,"id":107,"mutability":"mutable","name":"pointer","nameLocation":"3725:7:1","nodeType":"VariableDeclaration","scope":110,"src":"3710:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":105,"name":"uint","nodeType":"ElementaryTypeName","src":"3710:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":106,"length":{"hexValue":"36","id":104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3715:1:1","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"3710:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"visibility":"internal"}],"id":108,"nodeType":"VariableDeclarationStatement","src":"3710:22:1"},{"AST":{"nodeType":"YulBlock","src":"3751:633:1","statements":[{"expression":{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3851:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3860:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3844:6:1"},"nodeType":"YulFunctionCall","src":"3844:21:1"},"nodeType":"YulExpressionStatement","src":"3844:21:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3889:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3898:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3885:3:1"},"nodeType":"YulFunctionCall","src":"3885:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3905:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3878:6:1"},"nodeType":"YulFunctionCall","src":"3878:32:1"},"nodeType":"YulExpressionStatement","src":"3878:32:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"3934:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"3943:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3930:3:1"},"nodeType":"YulFunctionCall","src":"3930:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"3950:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3923:6:1"},"nodeType":"YulFunctionCall","src":"3923:32:1"},"nodeType":"YulExpressionStatement","src":"3923:32:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"4038:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"4047:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4034:3:1"},"nodeType":"YulFunctionCall","src":"4034:18:1"},{"name":"u","nodeType":"YulIdentifier","src":"4054:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4027:6:1"},"nodeType":"YulFunctionCall","src":"4027:29:1"},"nodeType":"YulExpressionStatement","src":"4027:29:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"4080:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"4089:4:1","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4076:3:1"},"nodeType":"YulFunctionCall","src":"4076:18:1"},{"name":"minus_2","nodeType":"YulIdentifier","src":"4096:7:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4069:6:1"},"nodeType":"YulFunctionCall","src":"4069:35:1"},"nodeType":"YulExpressionStatement","src":"4069:35:1"},{"expression":{"arguments":[{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"4128:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"4137:4:1","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4124:3:1"},"nodeType":"YulFunctionCall","src":"4124:18:1"},{"name":"p","nodeType":"YulIdentifier","src":"4144:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4117:6:1"},"nodeType":"YulFunctionCall","src":"4117:29:1"},"nodeType":"YulExpressionStatement","src":"4117:29:1"},{"body":{"nodeType":"YulBlock","src":"4295:44:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4320:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4323:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4313:6:1"},"nodeType":"YulFunctionCall","src":"4313:12:1"},"nodeType":"YulExpressionStatement","src":"4313:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4254:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4250:3:1"},"nodeType":"YulFunctionCall","src":"4250:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"4258:4:1","type":"","value":"0x05"},{"name":"pointer","nodeType":"YulIdentifier","src":"4264:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"4273:4:1","type":"","value":"0xc0"},{"name":"pointer","nodeType":"YulIdentifier","src":"4279:7:1"},{"kind":"number","nodeType":"YulLiteral","src":"4288:4:1","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"4239:10:1"},"nodeType":"YulFunctionCall","src":"4239:54:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4232:6:1"},"nodeType":"YulFunctionCall","src":"4232:62:1"},"nodeType":"YulIf","src":"4229:110:1"},{"nodeType":"YulAssignment","src":"4352:22:1","value":{"arguments":[{"name":"pointer","nodeType":"YulIdentifier","src":"4366:7:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4360:5:1"},"nodeType":"YulFunctionCall","src":"4360:14:1"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4352:6:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":71,"isOffset":false,"isSlot":false,"src":"4096:7:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"4144:1:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"3851:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"3889:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"3934:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"4038:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"4080:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"4128:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"4264:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"4279:7:1","valueSize":1},{"declaration":107,"isOffset":false,"isSlot":false,"src":"4366:7:1","valueSize":1},{"declaration":100,"isOffset":false,"isSlot":false,"src":"4352:6:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"4054:1:1","valueSize":1}],"id":109,"nodeType":"InlineAssembly","src":"3742:642:1"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"3530:92:1","text":"/* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled"},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"FCL_pModInv","nameLocation":"3636:11:1","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"u","nameLocation":"3656:1:1","nodeType":"VariableDeclaration","scope":111,"src":"3648:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"3648:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3647:11:1"},"returnParameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"result","nameLocation":"3692:6:1","nodeType":"VariableDeclaration","scope":111,"src":"3684:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99,"name":"uint256","nodeType":"ElementaryTypeName","src":"3684:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3683:16:1"},"scope":1202,"src":"3627:763:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":148,"nodeType":"Block","src":"4560:138:1","statements":[{"id":147,"nodeType":"UncheckedBlock","src":"4570:122:1","statements":[{"expression":{"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":123,"name":"P","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4594:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4] memory"}},"id":125,"indexExpression":{"hexValue":"32","id":124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4596:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4594:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4601:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4594:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":128,"nodeType":"ExpressionStatement","src":"4594:8:1"},{"expression":{"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":129,"name":"P","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4621:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4] memory"}},"id":131,"indexExpression":{"hexValue":"33","id":130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4623:1:1","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4621:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4628:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4621:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":134,"nodeType":"ExpressionStatement","src":"4621:8:1"},{"expression":{"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":135,"name":"P","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4649:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4] memory"}},"id":137,"indexExpression":{"hexValue":"30","id":136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4651:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4649:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":138,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":114,"src":"4656:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4649:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":140,"nodeType":"ExpressionStatement","src":"4649:9:1"},{"expression":{"id":145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":141,"name":"P","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4672:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4] memory"}},"id":143,"indexExpression":{"hexValue":"31","id":142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4674:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4672:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":144,"name":"y0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"4679:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4672:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":146,"nodeType":"ExpressionStatement","src":"4672:9:1"}]}]},"documentation":{"id":112,"nodeType":"StructuredDocumentation","src":"4400:53:1","text":"/* @dev Convert from affine rep to XYZZ rep"},"id":149,"implemented":true,"kind":"function","modifiers":[],"name":"ecAff_SetZZ","nameLocation":"4467:11:1","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":114,"mutability":"mutable","name":"x0","nameLocation":"4493:2:1","nodeType":"VariableDeclaration","scope":149,"src":"4488:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":113,"name":"uint","nodeType":"ElementaryTypeName","src":"4488:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":116,"mutability":"mutable","name":"y0","nameLocation":"4510:2:1","nodeType":"VariableDeclaration","scope":149,"src":"4505:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint","nodeType":"ElementaryTypeName","src":"4505:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4478:40:1"},"returnParameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"mutability":"mutable","name":"P","nameLocation":"4557:1:1","nodeType":"VariableDeclaration","scope":149,"src":"4542:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_memory_ptr","typeString":"uint256[4]"},"typeName":{"baseType":{"id":118,"name":"uint","nodeType":"ElementaryTypeName","src":"4542:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":120,"length":{"hexValue":"34","id":119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4547:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"ArrayTypeName","src":"4542:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$4_storage_ptr","typeString":"uint256[4]"}},"visibility":"internal"}],"src":"4541:18:1"},"scope":1202,"src":"4458:240:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":203,"nodeType":"Block","src":"4984:201:1","statements":[{"assignments":[166],"declarations":[{"constant":false,"id":166,"mutability":"mutable","name":"zzzInv","nameLocation":"4997:6:1","nodeType":"VariableDeclaration","scope":203,"src":"4992:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":165,"name":"uint","nodeType":"ElementaryTypeName","src":"4992:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":170,"initialValue":{"arguments":[{"id":168,"name":"zzz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":158,"src":"5018:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":167,"name":"FCL_pModInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"5006:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5006:16:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4992:30:1"},{"expression":{"id":177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":171,"name":"y1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"5038:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":173,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":154,"src":"5048:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":174,"name":"zzzInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5050:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":175,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"5057:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":172,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5041:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5041:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5038:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":178,"nodeType":"ExpressionStatement","src":"5038:21:1"},{"assignments":[180],"declarations":[{"constant":false,"id":180,"mutability":"mutable","name":"b","nameLocation":"5079:1:1","nodeType":"VariableDeclaration","scope":203,"src":"5074:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":179,"name":"uint","nodeType":"ElementaryTypeName","src":"5074:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":186,"initialValue":{"arguments":[{"id":182,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"5088:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":183,"name":"zzzInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5092:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":184,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"5099:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":181,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5081:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5081:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5074:27:1"},{"expression":{"id":193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":187,"name":"zzzInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5115:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":189,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"5130:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"5132:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":191,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"5134:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":188,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5123:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5123:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5115:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":194,"nodeType":"ExpressionStatement","src":"5115:21:1"},{"expression":{"id":201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":195,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"5151:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":197,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":152,"src":"5161:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":198,"name":"zzzInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":166,"src":"5163:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":199,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"5170:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":196,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5154:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5154:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5151:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":202,"nodeType":"ExpressionStatement","src":"5151:21:1"}]},"documentation":{"id":150,"nodeType":"StructuredDocumentation","src":"4708:53:1","text":"/* @dev Convert from XYZZ rep to affine rep"},"id":204,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_SetAff","nameLocation":"4866:11:1","nodeType":"FunctionDefinition","parameters":{"id":159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"mutability":"mutable","name":"x","nameLocation":"4884:1:1","nodeType":"VariableDeclaration","scope":204,"src":"4879:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":151,"name":"uint","nodeType":"ElementaryTypeName","src":"4879:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":154,"mutability":"mutable","name":"y","nameLocation":"4900:1:1","nodeType":"VariableDeclaration","scope":204,"src":"4895:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":153,"name":"uint","nodeType":"ElementaryTypeName","src":"4895:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"zz","nameLocation":"4916:2:1","nodeType":"VariableDeclaration","scope":204,"src":"4911:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":155,"name":"uint","nodeType":"ElementaryTypeName","src":"4911:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":158,"mutability":"mutable","name":"zzz","nameLocation":"4933:3:1","nodeType":"VariableDeclaration","scope":204,"src":"4928:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint","nodeType":"ElementaryTypeName","src":"4928:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4877:60:1"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":161,"mutability":"mutable","name":"x1","nameLocation":"4967:2:1","nodeType":"VariableDeclaration","scope":204,"src":"4962:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":160,"name":"uint","nodeType":"ElementaryTypeName","src":"4962:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":163,"mutability":"mutable","name":"y1","nameLocation":"4976:2:1","nodeType":"VariableDeclaration","scope":204,"src":"4971:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":162,"name":"uint","nodeType":"ElementaryTypeName","src":"4971:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4961:18:1"},"scope":1202,"src":"4857:328:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":232,"nodeType":"Block","src":"5449:596:1","statements":[{"id":225,"nodeType":"UncheckedBlock","src":"5456:553:1","statements":[{"AST":{"nodeType":"YulBlock","src":"5480:522:1","statements":[{"nodeType":"YulAssignment","src":"5488:19:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5499:1:1","type":"","value":"2"},{"name":"y","nodeType":"YulIdentifier","src":"5502:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"5505:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5492:6:1"},"nodeType":"YulFunctionCall","src":"5492:15:1"},"variableNames":[{"name":"P0","nodeType":"YulIdentifier","src":"5488:2:1"}]},{"nodeType":"YulAssignment","src":"5525:19:1","value":{"arguments":[{"name":"P0","nodeType":"YulIdentifier","src":"5536:2:1"},{"name":"P0","nodeType":"YulIdentifier","src":"5539:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5542:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5529:6:1"},"nodeType":"YulFunctionCall","src":"5529:15:1"},"variableNames":[{"name":"P2","nodeType":"YulIdentifier","src":"5525:2:1"}]},{"nodeType":"YulAssignment","src":"5561:19:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5572:1:1"},{"name":"P2","nodeType":"YulIdentifier","src":"5575:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5578:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5565:6:1"},"nodeType":"YulFunctionCall","src":"5565:15:1"},"variableNames":[{"name":"P3","nodeType":"YulIdentifier","src":"5561:2:1"}]},{"nodeType":"YulAssignment","src":"5598:20:1","value":{"arguments":[{"name":"P0","nodeType":"YulIdentifier","src":"5609:2:1"},{"name":"P2","nodeType":"YulIdentifier","src":"5613:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5616:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5602:6:1"},"nodeType":"YulFunctionCall","src":"5602:16:1"},"variableNames":[{"name":"P1","nodeType":"YulIdentifier","src":"5598:2:1"}]},{"nodeType":"YulAssignment","src":"5633:21:1","value":{"arguments":[{"name":"P2","nodeType":"YulIdentifier","src":"5644:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"5648:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5652:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5637:6:1"},"nodeType":"YulFunctionCall","src":"5637:17:1"},"variableNames":[{"name":"P2","nodeType":"YulIdentifier","src":"5633:2:1"}]},{"nodeType":"YulAssignment","src":"5673:65:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5684:1:1","type":"","value":"3"},{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5701:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"5707:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"5709:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5703:3:1"},"nodeType":"YulFunctionCall","src":"5703:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"5713:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"5694:6:1"},"nodeType":"YulFunctionCall","src":"5694:21:1"},{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5724:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"5726:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5729:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"5717:6:1"},"nodeType":"YulFunctionCall","src":"5717:14:1"},{"name":"p","nodeType":"YulIdentifier","src":"5732:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5687:6:1"},"nodeType":"YulFunctionCall","src":"5687:47:1"},{"name":"p","nodeType":"YulIdentifier","src":"5736:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5677:6:1"},"nodeType":"YulFunctionCall","src":"5677:61:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"5673:2:1"}]},{"nodeType":"YulAssignment","src":"5769:52:1","value":{"arguments":[{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"5787:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"5790:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5793:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5780:6:1"},"nodeType":"YulFunctionCall","src":"5780:15:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"5804:7:1"},{"name":"P3","nodeType":"YulIdentifier","src":"5813:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"5816:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5797:6:1"},"nodeType":"YulFunctionCall","src":"5797:21:1"},{"name":"p","nodeType":"YulIdentifier","src":"5819:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"5773:6:1"},"nodeType":"YulFunctionCall","src":"5773:48:1"},"variableNames":[{"name":"P0","nodeType":"YulIdentifier","src":"5769:2:1"}]},{"nodeType":"YulAssignment","src":"5840:39:1","value":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"5850:2:1"},{"arguments":[{"name":"P3","nodeType":"YulIdentifier","src":"5860:2:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"5868:1:1"},{"name":"P0","nodeType":"YulIdentifier","src":"5870:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5864:3:1"},"nodeType":"YulFunctionCall","src":"5864:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"5874:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"5853:6:1"},"nodeType":"YulFunctionCall","src":"5853:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"5877:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5843:6:1"},"nodeType":"YulFunctionCall","src":"5843:36:1"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"5840:1:1"}]},{"nodeType":"YulAssignment","src":"5895:20:1","value":{"arguments":[{"name":"P1","nodeType":"YulIdentifier","src":"5906:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"5909:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"5913:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5899:6:1"},"nodeType":"YulFunctionCall","src":"5899:16:1"},"variableNames":[{"name":"P3","nodeType":"YulIdentifier","src":"5895:2:1"}]},{"nodeType":"YulAssignment","src":"5935:41:1","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5946:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"5953:1:1"},{"arguments":[{"name":"P1","nodeType":"YulIdentifier","src":"5963:2:1"},{"name":"y","nodeType":"YulIdentifier","src":"5967:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"5969:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"5956:6:1"},"nodeType":"YulFunctionCall","src":"5956:15:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5949:3:1"},"nodeType":"YulFunctionCall","src":"5949:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"5973:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"5939:6:1"},"nodeType":"YulFunctionCall","src":"5939:37:1"},"variableNames":[{"name":"P1","nodeType":"YulIdentifier","src":"5935:2:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":216,"isOffset":false,"isSlot":false,"src":"5488:2:1","valueSize":1},{"declaration":216,"isOffset":false,"isSlot":false,"src":"5536:2:1","valueSize":1},{"declaration":216,"isOffset":false,"isSlot":false,"src":"5539:2:1","valueSize":1},{"declaration":216,"isOffset":false,"isSlot":false,"src":"5609:2:1","valueSize":1},{"declaration":216,"isOffset":false,"isSlot":false,"src":"5769:2:1","valueSize":1},{"declaration":216,"isOffset":false,"isSlot":false,"src":"5870:2:1","valueSize":1},{"declaration":218,"isOffset":false,"isSlot":false,"src":"5598:2:1","valueSize":1},{"declaration":218,"isOffset":false,"isSlot":false,"src":"5906:2:1","valueSize":1},{"declaration":218,"isOffset":false,"isSlot":false,"src":"5935:2:1","valueSize":1},{"declaration":218,"isOffset":false,"isSlot":false,"src":"5963:2:1","valueSize":1},{"declaration":220,"isOffset":false,"isSlot":false,"src":"5525:2:1","valueSize":1},{"declaration":220,"isOffset":false,"isSlot":false,"src":"5575:2:1","valueSize":1},{"declaration":220,"isOffset":false,"isSlot":false,"src":"5613:2:1","valueSize":1},{"declaration":220,"isOffset":false,"isSlot":false,"src":"5633:2:1","valueSize":1},{"declaration":220,"isOffset":false,"isSlot":false,"src":"5644:2:1","valueSize":1},{"declaration":222,"isOffset":false,"isSlot":false,"src":"5561:2:1","valueSize":1},{"declaration":222,"isOffset":false,"isSlot":false,"src":"5813:2:1","valueSize":1},{"declaration":222,"isOffset":false,"isSlot":false,"src":"5860:2:1","valueSize":1},{"declaration":222,"isOffset":false,"isSlot":false,"src":"5895:2:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"5804:7:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5505:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5542:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5578:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5616:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5652:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5707:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5713:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5729:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5732:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5736:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5793:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5816:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5819:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5868:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5874:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5877:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5913:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5953:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5969:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"5973:1:1","valueSize":1},{"declaration":207,"isOffset":false,"isSlot":false,"src":"5572:1:1","valueSize":1},{"declaration":207,"isOffset":false,"isSlot":false,"src":"5701:1:1","valueSize":1},{"declaration":207,"isOffset":false,"isSlot":false,"src":"5724:1:1","valueSize":1},{"declaration":207,"isOffset":false,"isSlot":false,"src":"5840:1:1","valueSize":1},{"declaration":207,"isOffset":false,"isSlot":false,"src":"5946:1:1","valueSize":1},{"declaration":209,"isOffset":false,"isSlot":false,"src":"5502:1:1","valueSize":1},{"declaration":209,"isOffset":false,"isSlot":false,"src":"5967:1:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5648:2:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5673:2:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5709:2:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5726:2:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5787:2:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5790:2:1","valueSize":1},{"declaration":211,"isOffset":false,"isSlot":false,"src":"5850:2:1","valueSize":1},{"declaration":213,"isOffset":false,"isSlot":false,"src":"5909:3:1","valueSize":1}],"id":224,"nodeType":"InlineAssembly","src":"5472:530:1"}]},{"expression":{"components":[{"id":226,"name":"P0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"6023:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":227,"name":"P1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"6027:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":228,"name":"P2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"6031:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":229,"name":"P3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"6035:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":230,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6022:16:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"functionReturnParameters":223,"id":231,"nodeType":"Return","src":"6015:23:1"}]},"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"5202:41:1","text":"/* @dev Sutherland2008 doubling"},"id":233,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_Dbl","nameLocation":"5309:8:1","nodeType":"FunctionDefinition","parameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":207,"mutability":"mutable","name":"x","nameLocation":"5329:1:1","nodeType":"VariableDeclaration","scope":233,"src":"5324:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":206,"name":"uint","nodeType":"ElementaryTypeName","src":"5324:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":209,"mutability":"mutable","name":"y","nameLocation":"5345:1:1","nodeType":"VariableDeclaration","scope":233,"src":"5340:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint","nodeType":"ElementaryTypeName","src":"5340:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":211,"mutability":"mutable","name":"zz","nameLocation":"5361:2:1","nodeType":"VariableDeclaration","scope":233,"src":"5356:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":210,"name":"uint","nodeType":"ElementaryTypeName","src":"5356:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":213,"mutability":"mutable","name":"zzz","nameLocation":"5378:3:1","nodeType":"VariableDeclaration","scope":233,"src":"5373:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint","nodeType":"ElementaryTypeName","src":"5373:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5317:70:1"},"returnParameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"P0","nameLocation":"5416:2:1","nodeType":"VariableDeclaration","scope":233,"src":"5411:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint","nodeType":"ElementaryTypeName","src":"5411:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"P1","nameLocation":"5425:2:1","nodeType":"VariableDeclaration","scope":233,"src":"5420:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint","nodeType":"ElementaryTypeName","src":"5420:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":220,"mutability":"mutable","name":"P2","nameLocation":"5433:2:1","nodeType":"VariableDeclaration","scope":233,"src":"5428:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":219,"name":"uint","nodeType":"ElementaryTypeName","src":"5428:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"P3","nameLocation":"5441:2:1","nodeType":"VariableDeclaration","scope":233,"src":"5436:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":221,"name":"uint","nodeType":"ElementaryTypeName","src":"5436:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5410:34:1"},"scope":1202,"src":"5300:745:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":276,"nodeType":"Block","src":"6523:688:1","statements":[{"id":269,"nodeType":"UncheckedBlock","src":"6532:626:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":257,"name":"y1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"6552:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6556:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6552:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":267,"nodeType":"IfStatement","src":"6549:45:1","trueBody":{"id":266,"nodeType":"Block","src":"6558:36:1","statements":[{"expression":{"components":[{"id":260,"name":"x2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"6575:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":261,"name":"y2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":246,"src":"6578:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6581:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6583:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"id":264,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6574:11:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_rational_1_by_1_$_t_rational_1_by_1_$","typeString":"tuple(uint256,uint256,int_const 1,int_const 1)"}},"functionReturnParameters":256,"id":265,"nodeType":"Return","src":"6567:18:1"}]}},{"AST":{"nodeType":"YulBlock","src":"6613:518:1","statements":[{"nodeType":"YulAssignment","src":"6621:14:1","value":{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"6629:1:1"},{"name":"y1","nodeType":"YulIdentifier","src":"6632:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6625:3:1"},"nodeType":"YulFunctionCall","src":"6625:10:1"},"variableNames":[{"name":"y1","nodeType":"YulIdentifier","src":"6621:2:1"}]},{"nodeType":"YulAssignment","src":"6642:35:1","value":{"arguments":[{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"6660:2:1"},{"name":"zzz1","nodeType":"YulIdentifier","src":"6664:4:1"},{"name":"p","nodeType":"YulIdentifier","src":"6669:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6653:6:1"},"nodeType":"YulFunctionCall","src":"6653:18:1"},{"name":"y1","nodeType":"YulIdentifier","src":"6672:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6675:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"6646:6:1"},"nodeType":"YulFunctionCall","src":"6646:31:1"},"variableNames":[{"name":"y2","nodeType":"YulIdentifier","src":"6642:2:1"}]},{"nodeType":"YulAssignment","src":"6686:41:1","value":{"arguments":[{"arguments":[{"name":"x2","nodeType":"YulIdentifier","src":"6704:2:1"},{"name":"zz1","nodeType":"YulIdentifier","src":"6708:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"6712:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6697:6:1"},"nodeType":"YulFunctionCall","src":"6697:17:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"6719:1:1"},{"name":"x1","nodeType":"YulIdentifier","src":"6721:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6715:3:1"},"nodeType":"YulFunctionCall","src":"6715:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"6725:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"6690:6:1"},"nodeType":"YulFunctionCall","src":"6690:37:1"},"variableNames":[{"name":"x2","nodeType":"YulIdentifier","src":"6686:2:1"}]},{"nodeType":"YulAssignment","src":"6736:21:1","value":{"arguments":[{"name":"x2","nodeType":"YulIdentifier","src":"6747:2:1"},{"name":"x2","nodeType":"YulIdentifier","src":"6751:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6755:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6740:6:1"},"nodeType":"YulFunctionCall","src":"6740:17:1"},"variableNames":[{"name":"P0","nodeType":"YulIdentifier","src":"6736:2:1"}]},{"nodeType":"YulAssignment","src":"6774:19:1","value":{"arguments":[{"name":"P0","nodeType":"YulIdentifier","src":"6785:2:1"},{"name":"x2","nodeType":"YulIdentifier","src":"6788:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6791:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6778:6:1"},"nodeType":"YulFunctionCall","src":"6778:15:1"},"variableNames":[{"name":"P1","nodeType":"YulIdentifier","src":"6774:2:1"}]},{"nodeType":"YulAssignment","src":"6812:20:1","value":{"arguments":[{"name":"zz1","nodeType":"YulIdentifier","src":"6823:3:1"},{"name":"P0","nodeType":"YulIdentifier","src":"6827:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6830:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6816:6:1"},"nodeType":"YulFunctionCall","src":"6816:16:1"},"variableNames":[{"name":"P2","nodeType":"YulIdentifier","src":"6812:2:1"}]},{"nodeType":"YulAssignment","src":"6856:22:1","value":{"arguments":[{"name":"zzz1","nodeType":"YulIdentifier","src":"6868:4:1"},{"name":"P1","nodeType":"YulIdentifier","src":"6873:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6876:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6861:6:1"},"nodeType":"YulFunctionCall","src":"6861:17:1"},"variableNames":[{"name":"P3","nodeType":"YulIdentifier","src":"6856:2:1"}]},{"nodeType":"YulAssignment","src":"6905:22:1","value":{"arguments":[{"name":"x1","nodeType":"YulIdentifier","src":"6917:2:1"},{"name":"P0","nodeType":"YulIdentifier","src":"6921:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6925:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6910:6:1"},"nodeType":"YulFunctionCall","src":"6910:17:1"},"variableNames":[{"name":"zz1","nodeType":"YulIdentifier","src":"6905:3:1"}]},{"nodeType":"YulAssignment","src":"6945:78:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"6970:2:1"},{"name":"y2","nodeType":"YulIdentifier","src":"6973:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"6977:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6963:6:1"},"nodeType":"YulFunctionCall","src":"6963:16:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"6985:1:1"},{"name":"P1","nodeType":"YulIdentifier","src":"6987:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6981:3:1"},"nodeType":"YulFunctionCall","src":"6981:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"6991:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"6956:6:1"},"nodeType":"YulFunctionCall","src":"6956:38:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"7003:7:1"},{"name":"zz1","nodeType":"YulIdentifier","src":"7012:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"7016:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"6996:6:1"},"nodeType":"YulFunctionCall","src":"6996:22:1"},{"name":"p","nodeType":"YulIdentifier","src":"7020:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"6949:6:1"},"nodeType":"YulFunctionCall","src":"6949:74:1"},"variableNames":[{"name":"P0","nodeType":"YulIdentifier","src":"6945:2:1"}]},{"nodeType":"YulAssignment","src":"7043:71:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"zz1","nodeType":"YulIdentifier","src":"7068:3:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"7077:1:1"},{"name":"P0","nodeType":"YulIdentifier","src":"7079:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7073:3:1"},"nodeType":"YulFunctionCall","src":"7073:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"7083:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"7061:6:1"},"nodeType":"YulFunctionCall","src":"7061:24:1"},{"name":"y2","nodeType":"YulIdentifier","src":"7087:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"7091:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7054:6:1"},"nodeType":"YulFunctionCall","src":"7054:39:1"},{"arguments":[{"name":"y1","nodeType":"YulIdentifier","src":"7102:2:1"},{"name":"P1","nodeType":"YulIdentifier","src":"7106:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"7109:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"7095:6:1"},"nodeType":"YulFunctionCall","src":"7095:16:1"},{"name":"p","nodeType":"YulIdentifier","src":"7112:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"7047:6:1"},"nodeType":"YulFunctionCall","src":"7047:67:1"},"variableNames":[{"name":"P1","nodeType":"YulIdentifier","src":"7043:2:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":249,"isOffset":false,"isSlot":false,"src":"6736:2:1","valueSize":1},{"declaration":249,"isOffset":false,"isSlot":false,"src":"6785:2:1","valueSize":1},{"declaration":249,"isOffset":false,"isSlot":false,"src":"6827:2:1","valueSize":1},{"declaration":249,"isOffset":false,"isSlot":false,"src":"6921:2:1","valueSize":1},{"declaration":249,"isOffset":false,"isSlot":false,"src":"6945:2:1","valueSize":1},{"declaration":249,"isOffset":false,"isSlot":false,"src":"7079:2:1","valueSize":1},{"declaration":251,"isOffset":false,"isSlot":false,"src":"6774:2:1","valueSize":1},{"declaration":251,"isOffset":false,"isSlot":false,"src":"6873:2:1","valueSize":1},{"declaration":251,"isOffset":false,"isSlot":false,"src":"6987:2:1","valueSize":1},{"declaration":251,"isOffset":false,"isSlot":false,"src":"7043:2:1","valueSize":1},{"declaration":251,"isOffset":false,"isSlot":false,"src":"7106:2:1","valueSize":1},{"declaration":253,"isOffset":false,"isSlot":false,"src":"6812:2:1","valueSize":1},{"declaration":255,"isOffset":false,"isSlot":false,"src":"6856:2:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"7003:7:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6629:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6669:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6675:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6712:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6719:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6725:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6755:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6791:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6830:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6876:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6925:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6977:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6985:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"6991:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7016:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7020:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7077:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7083:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7091:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7109:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"7112:1:1","valueSize":1},{"declaration":236,"isOffset":false,"isSlot":false,"src":"6721:2:1","valueSize":1},{"declaration":236,"isOffset":false,"isSlot":false,"src":"6917:2:1","valueSize":1},{"declaration":244,"isOffset":false,"isSlot":false,"src":"6686:2:1","valueSize":1},{"declaration":244,"isOffset":false,"isSlot":false,"src":"6704:2:1","valueSize":1},{"declaration":244,"isOffset":false,"isSlot":false,"src":"6747:2:1","valueSize":1},{"declaration":244,"isOffset":false,"isSlot":false,"src":"6751:2:1","valueSize":1},{"declaration":244,"isOffset":false,"isSlot":false,"src":"6788:2:1","valueSize":1},{"declaration":238,"isOffset":false,"isSlot":false,"src":"6621:2:1","valueSize":1},{"declaration":238,"isOffset":false,"isSlot":false,"src":"6632:2:1","valueSize":1},{"declaration":238,"isOffset":false,"isSlot":false,"src":"6672:2:1","valueSize":1},{"declaration":238,"isOffset":false,"isSlot":false,"src":"7102:2:1","valueSize":1},{"declaration":246,"isOffset":false,"isSlot":false,"src":"6642:2:1","valueSize":1},{"declaration":246,"isOffset":false,"isSlot":false,"src":"6660:2:1","valueSize":1},{"declaration":246,"isOffset":false,"isSlot":false,"src":"6970:2:1","valueSize":1},{"declaration":246,"isOffset":false,"isSlot":false,"src":"6973:2:1","valueSize":1},{"declaration":246,"isOffset":false,"isSlot":false,"src":"7087:2:1","valueSize":1},{"declaration":240,"isOffset":false,"isSlot":false,"src":"6708:3:1","valueSize":1},{"declaration":240,"isOffset":false,"isSlot":false,"src":"6823:3:1","valueSize":1},{"declaration":240,"isOffset":false,"isSlot":false,"src":"6905:3:1","valueSize":1},{"declaration":240,"isOffset":false,"isSlot":false,"src":"7012:3:1","valueSize":1},{"declaration":240,"isOffset":false,"isSlot":false,"src":"7068:3:1","valueSize":1},{"declaration":242,"isOffset":false,"isSlot":false,"src":"6664:4:1","valueSize":1},{"declaration":242,"isOffset":false,"isSlot":false,"src":"6868:4:1","valueSize":1}],"id":268,"nodeType":"InlineAssembly","src":"6605:526:1"}]},{"expression":{"components":[{"id":270,"name":"P0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"7188:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":271,"name":"P1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"7192:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":272,"name":"P2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"7196:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":273,"name":"P3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":255,"src":"7200:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":274,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7187:16:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"functionReturnParameters":256,"id":275,"nodeType":"Return","src":"7180:23:1"}]},"documentation":{"id":234,"nodeType":"StructuredDocumentation","src":"6056:205:1","text":" @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\n warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)"},"id":277,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_AddN","nameLocation":"6348:9:1","nodeType":"FunctionDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"x1","nameLocation":"6369:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6364:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":235,"name":"uint","nodeType":"ElementaryTypeName","src":"6364:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"y1","nameLocation":"6386:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6381:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":237,"name":"uint","nodeType":"ElementaryTypeName","src":"6381:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"zz1","nameLocation":"6403:3:1","nodeType":"VariableDeclaration","scope":277,"src":"6398:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":239,"name":"uint","nodeType":"ElementaryTypeName","src":"6398:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":242,"mutability":"mutable","name":"zzz1","nameLocation":"6421:4:1","nodeType":"VariableDeclaration","scope":277,"src":"6416:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":241,"name":"uint","nodeType":"ElementaryTypeName","src":"6416:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":244,"mutability":"mutable","name":"x2","nameLocation":"6440:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6435:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":243,"name":"uint","nodeType":"ElementaryTypeName","src":"6435:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":246,"mutability":"mutable","name":"y2","nameLocation":"6457:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6452:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":245,"name":"uint","nodeType":"ElementaryTypeName","src":"6452:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6357:103:1"},"returnParameters":{"id":256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":249,"mutability":"mutable","name":"P0","nameLocation":"6489:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6484:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":248,"name":"uint","nodeType":"ElementaryTypeName","src":"6484:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":251,"mutability":"mutable","name":"P1","nameLocation":"6498:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6493:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint","nodeType":"ElementaryTypeName","src":"6493:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"P2","nameLocation":"6506:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6501:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":252,"name":"uint","nodeType":"ElementaryTypeName","src":"6501:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":255,"mutability":"mutable","name":"P3","nameLocation":"6514:2:1","nodeType":"VariableDeclaration","scope":277,"src":"6509:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":254,"name":"uint","nodeType":"ElementaryTypeName","src":"6509:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6483:34:1"},"scope":1202,"src":"6339:872:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":295,"nodeType":"Block","src":"7378:36:1","statements":[{"expression":{"components":[{"hexValue":"30","id":289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7396:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7399:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7402:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7405:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":293,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7395:12:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(int_const 0,int_const 0,int_const 0,int_const 0)"}},"functionReturnParameters":288,"id":294,"nodeType":"Return","src":"7388:19:1"}]},"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"7225:66:1","text":" @dev Return the zero curve in XYZZ coordinates."},"id":296,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_SetZero","nameLocation":"7305:12:1","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"7317:2:1"},"returnParameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"x","nameLocation":"7348:1:1","nodeType":"VariableDeclaration","scope":296,"src":"7343:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint","nodeType":"ElementaryTypeName","src":"7343:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":283,"mutability":"mutable","name":"y","nameLocation":"7356:1:1","nodeType":"VariableDeclaration","scope":296,"src":"7351:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":282,"name":"uint","nodeType":"ElementaryTypeName","src":"7351:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"zz","nameLocation":"7364:2:1","nodeType":"VariableDeclaration","scope":296,"src":"7359:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":284,"name":"uint","nodeType":"ElementaryTypeName","src":"7359:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"zzz","nameLocation":"7373:3:1","nodeType":"VariableDeclaration","scope":296,"src":"7368:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint","nodeType":"ElementaryTypeName","src":"7368:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7342:35:1"},"scope":1202,"src":"7296:118:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":320,"nodeType":"Block","src":"7585:89:1","statements":[{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":310,"name":"y0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"7598:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7604:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7598:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":313,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7597:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":317,"nodeType":"IfStatement","src":"7592:54:1","trueBody":{"id":316,"nodeType":"Block","src":"7610:36:1","statements":[{"expression":{"hexValue":"74727565","id":314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7631:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":309,"id":315,"nodeType":"Return","src":"7624:11:1"}]}},{"expression":{"hexValue":"66616c7365","id":318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7662:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":309,"id":319,"nodeType":"Return","src":"7655:12:1"}]},"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"7420:66:1","text":" @dev Check if point is the neutral of the curve"},"id":321,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_IsZero","nameLocation":"7500:11:1","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"x0","nameLocation":"7518:2:1","nodeType":"VariableDeclaration","scope":321,"src":"7513:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint","nodeType":"ElementaryTypeName","src":"7513:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":301,"mutability":"mutable","name":"y0","nameLocation":"7527:2:1","nodeType":"VariableDeclaration","scope":321,"src":"7522:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":300,"name":"uint","nodeType":"ElementaryTypeName","src":"7522:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":303,"mutability":"mutable","name":"zz0","nameLocation":"7536:3:1","nodeType":"VariableDeclaration","scope":321,"src":"7531:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":302,"name":"uint","nodeType":"ElementaryTypeName","src":"7531:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":305,"mutability":"mutable","name":"zzz0","nameLocation":"7546:4:1","nodeType":"VariableDeclaration","scope":321,"src":"7541:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint","nodeType":"ElementaryTypeName","src":"7541:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7512:39:1"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":321,"src":"7575:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":307,"name":"bool","nodeType":"ElementaryTypeName","src":"7575:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7574:6:1"},"scope":1202,"src":"7491:183:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":333,"nodeType":"Block","src":"7870:30:1","statements":[{"expression":{"components":[{"hexValue":"30","id":329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7888:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7891:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":331,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7887:6:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(int_const 0,int_const 0)"}},"functionReturnParameters":328,"id":332,"nodeType":"Return","src":"7880:13:1"}]},"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"7679:122:1","text":" @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)"},"id":334,"implemented":true,"kind":"function","modifiers":[],"name":"ecAff_SetZero","nameLocation":"7815:13:1","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"7828:2:1"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"x","nameLocation":"7859:1:1","nodeType":"VariableDeclaration","scope":334,"src":"7854:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":324,"name":"uint","nodeType":"ElementaryTypeName","src":"7854:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":327,"mutability":"mutable","name":"y","nameLocation":"7867:1:1","nodeType":"VariableDeclaration","scope":334,"src":"7862:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":326,"name":"uint","nodeType":"ElementaryTypeName","src":"7862:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7853:16:1"},"scope":1202,"src":"7806:94:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":349,"nodeType":"Block","src":"8057:30:1","statements":[{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":344,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"8075:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8078:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8075:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":347,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8074:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":343,"id":348,"nodeType":"Return","src":"8067:13:1"}]},"documentation":{"id":335,"nodeType":"StructuredDocumentation","src":"7906:75:1","text":" @dev Check if the curve is the zero curve in affine rep."},"id":350,"implemented":true,"kind":"function","modifiers":[],"name":"ecAff_IsZero","nameLocation":"7994:12:1","nodeType":"FunctionDefinition","parameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":337,"mutability":"mutable","name":"x","nameLocation":"8012:1:1","nodeType":"VariableDeclaration","scope":350,"src":"8007:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":336,"name":"uint","nodeType":"ElementaryTypeName","src":"8007:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"y","nameLocation":"8020:1:1","nodeType":"VariableDeclaration","scope":350,"src":"8015:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":338,"name":"uint","nodeType":"ElementaryTypeName","src":"8015:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8006:16:1"},"returnParameters":{"id":343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":342,"mutability":"mutable","name":"flag","nameLocation":"8051:4:1","nodeType":"VariableDeclaration","scope":350,"src":"8046:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":341,"name":"bool","nodeType":"ElementaryTypeName","src":"8046:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8045:11:1"},"scope":1202,"src":"7985:102:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":420,"nodeType":"Block","src":"8292:366:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8306:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":361,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"8311:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8306:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":363,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"8316:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":364,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8321:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8316:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8306:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"30","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8326:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":368,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"8331:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8326:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8306:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":371,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"8336:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":372,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8341:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8336:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8306:36:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":378,"nodeType":"IfStatement","src":"8302:79:1","trueBody":{"id":377,"nodeType":"Block","src":"8344:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8365:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":359,"id":376,"nodeType":"Return","src":"8358:12:1"}]}},{"id":419,"nodeType":"UncheckedBlock","src":"8390:262:1","statements":[{"assignments":[380],"declarations":[{"constant":false,"id":380,"mutability":"mutable","name":"LHS","nameLocation":"8419:3:1","nodeType":"VariableDeclaration","scope":419,"src":"8414:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":379,"name":"uint","nodeType":"ElementaryTypeName","src":"8414:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":386,"initialValue":{"arguments":[{"id":382,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"8432:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":383,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"8435:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":384,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8438:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":381,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8425:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8425:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8414:26:1"},{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"RHS","nameLocation":"8466:3:1","nodeType":"VariableDeclaration","scope":419,"src":"8461:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":387,"name":"uint","nodeType":"ElementaryTypeName","src":"8461:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":406,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":392,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"8493:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":393,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"8496:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":394,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8499:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":391,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8486:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8486:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":396,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"8503:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":397,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8506:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":390,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8479:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8479:29:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":400,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"8517:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":401,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":56,"src":"8520:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":402,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8523:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":399,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"8510:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8510:15:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":404,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8527:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":389,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"8472:6:1","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8472:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8461:68:1"},{"expression":{"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":407,"name":"RHS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"8558:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":409,"name":"RHS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"8571:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":410,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":59,"src":"8576:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":411,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"8579:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":408,"name":"addmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-2,"src":"8564:6:1","typeDescriptions":{"typeIdentifier":"t_function_addmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8564:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8558:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":414,"nodeType":"ExpressionStatement","src":"8558:23:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":415,"name":"LHS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"8631:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":416,"name":"RHS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"8638:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8631:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":359,"id":418,"nodeType":"Return","src":"8624:17:1"}]}]},"documentation":{"id":351,"nodeType":"StructuredDocumentation","src":"8093:124:1","text":" @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve)."},"id":421,"implemented":true,"kind":"function","modifiers":[],"name":"ecAff_isOnCurve","nameLocation":"8231:15:1","nodeType":"FunctionDefinition","parameters":{"id":356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"x","nameLocation":"8252:1:1","nodeType":"VariableDeclaration","scope":421,"src":"8247:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint","nodeType":"ElementaryTypeName","src":"8247:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":355,"mutability":"mutable","name":"y","nameLocation":"8260:1:1","nodeType":"VariableDeclaration","scope":421,"src":"8255:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":354,"name":"uint","nodeType":"ElementaryTypeName","src":"8255:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8246:16:1"},"returnParameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":421,"src":"8286:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":357,"name":"bool","nodeType":"ElementaryTypeName","src":"8286:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8285:6:1"},"scope":1202,"src":"8222:436:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":483,"nodeType":"Block","src":"8886:247:1","statements":[{"assignments":[438],"declarations":[{"constant":false,"id":438,"mutability":"mutable","name":"zz0","nameLocation":"8901:3:1","nodeType":"VariableDeclaration","scope":483,"src":"8896:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":437,"name":"uint","nodeType":"ElementaryTypeName","src":"8896:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":439,"nodeType":"VariableDeclarationStatement","src":"8896:8:1"},{"assignments":[441],"declarations":[{"constant":false,"id":441,"mutability":"mutable","name":"zzz0","nameLocation":"8919:4:1","nodeType":"VariableDeclaration","scope":483,"src":"8914:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":440,"name":"uint","nodeType":"ElementaryTypeName","src":"8914:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":442,"nodeType":"VariableDeclarationStatement","src":"8914:9:1"},{"condition":{"arguments":[{"id":444,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"8951:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":445,"name":"y0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"8954:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":443,"name":"ecAff_IsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"8938:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256) pure returns (bool)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8938:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":451,"nodeType":"IfStatement","src":"8935:38:1","trueBody":{"expression":{"components":[{"id":447,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"8967:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":448,"name":"y1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"8970:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":449,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8966:7:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":436,"id":450,"nodeType":"Return","src":"8959:14:1"}},{"condition":{"arguments":[{"id":453,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"8992:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":454,"name":"y1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"8995:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":452,"name":"ecAff_IsZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"8979:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256) pure returns (bool)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8979:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":460,"nodeType":"IfStatement","src":"8976:38:1","trueBody":{"expression":{"components":[{"id":456,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"9008:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":457,"name":"y1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"9011:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9007:7:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":436,"id":459,"nodeType":"Return","src":"9000:14:1"}},{"expression":{"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":461,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"9027:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":462,"name":"y0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"9031:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":463,"name":"zz0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"9035:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":464,"name":"zzz0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"9040:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":465,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"9026:19:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":467,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"9058:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":468,"name":"y0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"9062:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9066:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"31","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"id":471,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"9071:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":472,"name":"y1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":430,"src":"9075:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":466,"name":"ecZZ_AddN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"9048:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256,uint256,uint256,uint256)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9048:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"src":"9026:52:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":475,"nodeType":"ExpressionStatement","src":"9026:52:1"},{"expression":{"arguments":[{"id":477,"name":"x0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"9108:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":478,"name":"y0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"9112:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":479,"name":"zz0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":438,"src":"9116:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":480,"name":"zzz0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"9121:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":476,"name":"ecZZ_SetAff","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"9096:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) view returns (uint256,uint256)"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9096:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":436,"id":482,"nodeType":"Return","src":"9089:37:1"}]},"documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"8671:76:1","text":" @dev Add two elliptic curve points in affine coordinates."},"id":484,"implemented":true,"kind":"function","modifiers":[],"name":"ecAff_add","nameLocation":"8767:9:1","nodeType":"FunctionDefinition","parameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"x0","nameLocation":"8791:2:1","nodeType":"VariableDeclaration","scope":484,"src":"8786:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":423,"name":"uint","nodeType":"ElementaryTypeName","src":"8786:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"y0","nameLocation":"8808:2:1","nodeType":"VariableDeclaration","scope":484,"src":"8803:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":425,"name":"uint","nodeType":"ElementaryTypeName","src":"8803:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"x1","nameLocation":"8825:2:1","nodeType":"VariableDeclaration","scope":484,"src":"8820:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":427,"name":"uint","nodeType":"ElementaryTypeName","src":"8820:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":430,"mutability":"mutable","name":"y1","nameLocation":"8842:2:1","nodeType":"VariableDeclaration","scope":484,"src":"8837:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint","nodeType":"ElementaryTypeName","src":"8837:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8776:74:1"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"8874:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint","nodeType":"ElementaryTypeName","src":"8874:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":484,"src":"8880:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":434,"name":"uint","nodeType":"ElementaryTypeName","src":"8880:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8873:12:1"},"scope":1202,"src":"8758:375:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":549,"nodeType":"Block","src":"9445:4685:1","statements":[{"assignments":[499],"declarations":[{"constant":false,"id":499,"mutability":"mutable","name":"zz","nameLocation":"9457:2:1","nodeType":"VariableDeclaration","scope":549,"src":"9452:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":498,"name":"uint","nodeType":"ElementaryTypeName","src":"9452:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":500,"nodeType":"VariableDeclarationStatement","src":"9452:7:1"},{"assignments":[502],"declarations":[{"constant":false,"id":502,"mutability":"mutable","name":"zzz","nameLocation":"9471:3:1","nodeType":"VariableDeclaration","scope":549,"src":"9466:8:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":501,"name":"uint","nodeType":"ElementaryTypeName","src":"9466:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":503,"nodeType":"VariableDeclarationStatement","src":"9466:8:1"},{"assignments":[505],"declarations":[{"constant":false,"id":505,"mutability":"mutable","name":"Y","nameLocation":"9486:1:1","nodeType":"VariableDeclaration","scope":549,"src":"9481:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint","nodeType":"ElementaryTypeName","src":"9481:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":506,"nodeType":"VariableDeclarationStatement","src":"9481:6:1"},{"assignments":[508],"declarations":[{"constant":false,"id":508,"mutability":"mutable","name":"index","nameLocation":"9499:5:1","nodeType":"VariableDeclaration","scope":549,"src":"9494:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":507,"name":"uint","nodeType":"ElementaryTypeName","src":"9494:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":510,"initialValue":{"hexValue":"323535","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9505:3:1","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"nodeType":"VariableDeclarationStatement","src":"9494:14:1"},{"assignments":[516],"declarations":[{"constant":false,"id":516,"mutability":"mutable","name":"T","nameLocation":"9530:1:1","nodeType":"VariableDeclaration","scope":549,"src":"9515:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":514,"name":"uint","nodeType":"ElementaryTypeName","src":"9515:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":515,"length":{"hexValue":"36","id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9520:1:1","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"9515:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"visibility":"internal"}],"id":517,"nodeType":"VariableDeclarationStatement","src":"9515:16:1"},{"assignments":[519],"declarations":[{"constant":false,"id":519,"mutability":"mutable","name":"H0","nameLocation":"9543:2:1","nodeType":"VariableDeclaration","scope":549,"src":"9538:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":518,"name":"uint","nodeType":"ElementaryTypeName","src":"9538:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":520,"nodeType":"VariableDeclarationStatement","src":"9538:7:1"},{"assignments":[522],"declarations":[{"constant":false,"id":522,"mutability":"mutable","name":"H1","nameLocation":"9557:2:1","nodeType":"VariableDeclaration","scope":549,"src":"9552:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":521,"name":"uint","nodeType":"ElementaryTypeName","src":"9552:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":523,"nodeType":"VariableDeclarationStatement","src":"9552:7:1"},{"id":546,"nodeType":"UncheckedBlock","src":"9575:4512:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":524,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"9601:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9611:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9601:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":527,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"9616:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9626:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9616:11:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9601:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":533,"nodeType":"IfStatement","src":"9598:39:1","trueBody":{"expression":{"hexValue":"30","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9636:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":497,"id":532,"nodeType":"Return","src":"9629:8:1"}},{"expression":{"id":543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":534,"name":"H0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9651:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":535,"name":"H1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"9654:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":536,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"9650:8:1","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":538,"name":"gx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":62,"src":"9669:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":539,"name":"gy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"9672:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":540,"name":"Q0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"9675:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":541,"name":"Q1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"9679:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":537,"name":"ecAff_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"9659:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) view returns (uint256,uint256)"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9659:23:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"9650:32:1","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":544,"nodeType":"ExpressionStatement","src":"9650:32:1"},{"AST":{"nodeType":"YulBlock","src":"9876:4189:1","statements":[{"body":{"nodeType":"YulBlock","src":"10131:2:1","statements":[]},"condition":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"9994:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"9997:1:1","type":"","value":"0"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9991:2:1"},"nodeType":"YulFunctionCall","src":"9991:8:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10000:124:1","statements":[{"nodeType":"YulAssignment","src":"10010:22:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10023:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"10030:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10019:3:1"},"nodeType":"YulFunctionCall","src":"10019:13:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"10010:5:1"}]},{"nodeType":"YulAssignment","src":"10041:75:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10054:1:1","type":"","value":"1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10065:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"10072:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10061:3:1"},"nodeType":"YulFunctionCall","src":"10061:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"10082:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10057:3:1"},"nodeType":"YulFunctionCall","src":"10057:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10050:3:1"},"nodeType":"YulFunctionCall","src":"10050:35:1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10095:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"10102:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10091:3:1"},"nodeType":"YulFunctionCall","src":"10091:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"10112:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10087:3:1"},"nodeType":"YulFunctionCall","src":"10087:27:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10045:3:1"},"nodeType":"YulFunctionCall","src":"10045:71:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"10041:2:1"}]}]},"pre":{"nodeType":"YulBlock","src":"9900:90:1","statements":[{"nodeType":"YulVariableDeclaration","src":"9903:79:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9920:1:1","type":"","value":"1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"9931:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"9938:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9927:3:1"},"nodeType":"YulFunctionCall","src":"9927:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"9948:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9923:3:1"},"nodeType":"YulFunctionCall","src":"9923:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9916:3:1"},"nodeType":"YulFunctionCall","src":"9916:35:1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"9961:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"9968:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"9957:3:1"},"nodeType":"YulFunctionCall","src":"9957:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"9978:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9953:3:1"},"nodeType":"YulFunctionCall","src":"9953:27:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9911:3:1"},"nodeType":"YulFunctionCall","src":"9911:71:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"9907:2:1","type":""}]}]},"src":"9897:236:1"},{"nodeType":"YulAssignment","src":"10141:75:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10154:1:1","type":"","value":"1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10165:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"10172:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10161:3:1"},"nodeType":"YulFunctionCall","src":"10161:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"10182:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10157:3:1"},"nodeType":"YulFunctionCall","src":"10157:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10150:3:1"},"nodeType":"YulFunctionCall","src":"10150:35:1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10195:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"10202:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"10191:3:1"},"nodeType":"YulFunctionCall","src":"10191:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"10212:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10187:3:1"},"nodeType":"YulFunctionCall","src":"10187:27:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10145:3:1"},"nodeType":"YulFunctionCall","src":"10145:71:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"10141:2:1"}]},{"body":{"nodeType":"YulBlock","src":"10247:36:1","statements":[{"nodeType":"YulAssignment","src":"10256:5:1","value":{"name":"gx","nodeType":"YulIdentifier","src":"10259:2:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"10256:1:1"}]},{"nodeType":"YulAssignment","src":"10269:5:1","value":{"name":"gy","nodeType":"YulIdentifier","src":"10272:2:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"10269:1:1"}]}]},"condition":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"10241:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"10244:1:1","type":"","value":"1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10238:2:1"},"nodeType":"YulFunctionCall","src":"10238:8:1"},"nodeType":"YulIf","src":"10235:48:1"},{"body":{"nodeType":"YulBlock","src":"10302:35:1","statements":[{"nodeType":"YulAssignment","src":"10311:5:1","value":{"name":"Q0","nodeType":"YulIdentifier","src":"10314:2:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"10311:1:1"}]},{"nodeType":"YulAssignment","src":"10324:5:1","value":{"name":"Q1","nodeType":"YulIdentifier","src":"10327:2:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"10324:1:1"}]}]},"condition":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"10296:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"10299:1:1","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10293:2:1"},"nodeType":"YulFunctionCall","src":"10293:8:1"},"nodeType":"YulIf","src":"10290:47:1"},{"body":{"nodeType":"YulBlock","src":"10356:38:1","statements":[{"nodeType":"YulAssignment","src":"10366:5:1","value":{"name":"H0","nodeType":"YulIdentifier","src":"10369:2:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"10366:1:1"}]},{"nodeType":"YulAssignment","src":"10380:6:1","value":{"name":"H1","nodeType":"YulIdentifier","src":"10384:2:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"10380:1:1"}]}]},"condition":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"10350:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"10353:1:1","type":"","value":"3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10347:2:1"},"nodeType":"YulFunctionCall","src":"10347:8:1"},"nodeType":"YulIf","src":"10344:50:1"},{"nodeType":"YulAssignment","src":"10407:19:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10418:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"10424:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10414:3:1"},"nodeType":"YulFunctionCall","src":"10414:12:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"10407:5:1"}]},{"nodeType":"YulAssignment","src":"10433:5:1","value":{"kind":"number","nodeType":"YulLiteral","src":"10437:1:1","type":"","value":"1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"10433:2:1"}]},{"nodeType":"YulAssignment","src":"10445:6:1","value":{"kind":"number","nodeType":"YulLiteral","src":"10450:1:1","type":"","value":"1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"10445:3:1"}]},{"body":{"nodeType":"YulBlock","src":"10529:2717:1","statements":[{"nodeType":"YulVariableDeclaration","src":"10563:23:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10578:1:1","type":"","value":"2"},{"name":"Y","nodeType":"YulIdentifier","src":"10581:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"10584:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10571:6:1"},"nodeType":"YulFunctionCall","src":"10571:15:1"},"variables":[{"name":"T1","nodeType":"YulTypedName","src":"10567:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10612:23:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"10627:2:1"},{"name":"T1","nodeType":"YulIdentifier","src":"10630:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10633:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10620:6:1"},"nodeType":"YulFunctionCall","src":"10620:15:1"},"variables":[{"name":"T2","nodeType":"YulTypedName","src":"10616:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10652:23:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"10667:1:1"},{"name":"T2","nodeType":"YulIdentifier","src":"10670:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10673:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10660:6:1"},"nodeType":"YulFunctionCall","src":"10660:15:1"},"variables":[{"name":"T3","nodeType":"YulTypedName","src":"10656:2:1","type":""}]},{"nodeType":"YulAssignment","src":"10693:20:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"10704:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"10708:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10711:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10697:6:1"},"nodeType":"YulFunctionCall","src":"10697:16:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"10693:2:1"}]},{"nodeType":"YulVariableDeclaration","src":"10728:69:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10743:1:1","type":"","value":"3"},{"arguments":[{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"10760:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"10766:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"10768:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10762:3:1"},"nodeType":"YulFunctionCall","src":"10762:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"10772:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"10753:6:1"},"nodeType":"YulFunctionCall","src":"10753:21:1"},{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"10783:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"10785:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10788:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"10776:6:1"},"nodeType":"YulFunctionCall","src":"10776:14:1"},{"name":"p","nodeType":"YulIdentifier","src":"10791:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10746:6:1"},"nodeType":"YulFunctionCall","src":"10746:47:1"},{"name":"p","nodeType":"YulIdentifier","src":"10795:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10736:6:1"},"nodeType":"YulFunctionCall","src":"10736:61:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"10732:2:1","type":""}]},{"nodeType":"YulAssignment","src":"10828:21:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"10840:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"10843:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"10847:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10833:6:1"},"nodeType":"YulFunctionCall","src":"10833:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"10828:3:1"}]},{"nodeType":"YulAssignment","src":"10869:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"10880:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"10884:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10888:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10873:6:1"},"nodeType":"YulFunctionCall","src":"10873:17:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"10869:2:1"}]},{"nodeType":"YulAssignment","src":"10923:51:1","value":{"arguments":[{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"10940:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"10943:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10946:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10933:6:1"},"nodeType":"YulFunctionCall","src":"10933:15:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"10957:7:1"},{"name":"T3","nodeType":"YulIdentifier","src":"10966:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"10969:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"10950:6:1"},"nodeType":"YulFunctionCall","src":"10950:21:1"},{"name":"p","nodeType":"YulIdentifier","src":"10972:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"10926:6:1"},"nodeType":"YulFunctionCall","src":"10926:48:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"10923:1:1"}]},{"nodeType":"YulAssignment","src":"11051:40:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"11062:2:1"},{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"11072:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"11079:1:1"},{"name":"T3","nodeType":"YulIdentifier","src":"11082:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11075:3:1"},"nodeType":"YulFunctionCall","src":"11075:10:1"},{"name":"p","nodeType":"YulIdentifier","src":"11086:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"11065:6:1"},"nodeType":"YulFunctionCall","src":"11065:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"11089:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"11055:6:1"},"nodeType":"YulFunctionCall","src":"11055:36:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"11051:2:1"}]},{"nodeType":"YulAssignment","src":"11194:36:1","value":{"arguments":[{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"11212:2:1"},{"name":"Y","nodeType":"YulIdentifier","src":"11216:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"11219:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"11205:6:1"},"nodeType":"YulFunctionCall","src":"11205:16:1"},{"name":"T2","nodeType":"YulIdentifier","src":"11223:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"11226:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"11198:6:1"},"nodeType":"YulFunctionCall","src":"11198:32:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"11194:1:1"}]},{"nodeType":"YulBlock","src":"11306:1916:1","statements":[{"nodeType":"YulAssignment","src":"11339:75:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11352:1:1","type":"","value":"1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"11363:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"11370:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11359:3:1"},"nodeType":"YulFunctionCall","src":"11359:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"11380:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11355:3:1"},"nodeType":"YulFunctionCall","src":"11355:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11348:3:1"},"nodeType":"YulFunctionCall","src":"11348:35:1"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"11393:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"11400:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"11389:3:1"},"nodeType":"YulFunctionCall","src":"11389:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"11410:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11385:3:1"},"nodeType":"YulFunctionCall","src":"11385:27:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11343:3:1"},"nodeType":"YulFunctionCall","src":"11343:71:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"11339:2:1"}]},{"body":{"nodeType":"YulBlock","src":"11441:71:1","statements":[{"nodeType":"YulAssignment","src":"11450:11:1","value":{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"11457:1:1"},{"name":"Y","nodeType":"YulIdentifier","src":"11459:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11453:3:1"},"nodeType":"YulFunctionCall","src":"11453:8:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"11450:1:1"}]},{"nodeType":"YulContinue","src":"11496:8:1"}]},"condition":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"11438:2:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11431:6:1"},"nodeType":"YulFunctionCall","src":"11431:10:1"},"nodeType":"YulIf","src":"11428:84:1"},{"body":{"nodeType":"YulBlock","src":"11551:46:1","statements":[{"nodeType":"YulAssignment","src":"11560:6:1","value":{"name":"gx","nodeType":"YulIdentifier","src":"11564:2:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"11560:2:1"}]},{"nodeType":"YulAssignment","src":"11574:6:1","value":{"name":"gy","nodeType":"YulIdentifier","src":"11578:2:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"11574:2:1"}]}]},"condition":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"11545:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"11548:1:1","type":"","value":"1"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11542:2:1"},"nodeType":"YulFunctionCall","src":"11542:8:1"},"nodeType":"YulIf","src":"11539:58:1"},{"body":{"nodeType":"YulBlock","src":"11616:38:1","statements":[{"nodeType":"YulAssignment","src":"11626:6:1","value":{"name":"Q0","nodeType":"YulIdentifier","src":"11630:2:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"11626:2:1"}]},{"nodeType":"YulAssignment","src":"11640:6:1","value":{"name":"Q1","nodeType":"YulIdentifier","src":"11644:2:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"11640:2:1"}]}]},"condition":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"11610:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"11613:1:1","type":"","value":"2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11607:2:1"},"nodeType":"YulFunctionCall","src":"11607:8:1"},"nodeType":"YulIf","src":"11604:50:1"},{"body":{"nodeType":"YulBlock","src":"11673:42:1","statements":[{"nodeType":"YulAssignment","src":"11683:6:1","value":{"name":"H0","nodeType":"YulIdentifier","src":"11687:2:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"11683:2:1"}]},{"nodeType":"YulAssignment","src":"11698:7:1","value":{"name":"H1","nodeType":"YulIdentifier","src":"11703:2:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"11698:2:1"}]}]},"condition":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"11667:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"11670:1:1","type":"","value":"3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11664:2:1"},"nodeType":"YulFunctionCall","src":"11664:8:1"},"nodeType":"YulIf","src":"11661:54:1"},{"nodeType":"YulVariableDeclaration","src":"11797:37:1","value":{"arguments":[{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"11819:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"11823:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"11827:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"11812:6:1"},"nodeType":"YulFunctionCall","src":"11812:17:1"},{"name":"Y","nodeType":"YulIdentifier","src":"11830:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"11832:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"11805:6:1"},"nodeType":"YulFunctionCall","src":"11805:29:1"},"variables":[{"name":"y2","nodeType":"YulTypedName","src":"11801:2:1","type":""}]},{"nodeType":"YulAssignment","src":"11846:39:1","value":{"arguments":[{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"11864:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"11868:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"11871:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"11857:6:1"},"nodeType":"YulFunctionCall","src":"11857:16:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"11878:1:1"},{"name":"X","nodeType":"YulIdentifier","src":"11880:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11874:3:1"},"nodeType":"YulFunctionCall","src":"11874:8:1"},{"name":"p","nodeType":"YulIdentifier","src":"11883:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"11850:6:1"},"nodeType":"YulFunctionCall","src":"11850:35:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"11846:2:1"}]},{"body":{"nodeType":"YulBlock","src":"12064:730:1","statements":[{"body":{"nodeType":"YulBlock","src":"12084:702:1","statements":[{"nodeType":"YulAssignment","src":"12101:19:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12112:1:1","type":"","value":"2"},{"name":"Y","nodeType":"YulIdentifier","src":"12115:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"12118:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12105:6:1"},"nodeType":"YulFunctionCall","src":"12105:15:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"12101:2:1"}]},{"nodeType":"YulAssignment","src":"12147:19:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"12158:2:1"},{"name":"T1","nodeType":"YulIdentifier","src":"12161:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12164:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12151:6:1"},"nodeType":"YulFunctionCall","src":"12151:15:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"12147:2:1"}]},{"nodeType":"YulAssignment","src":"12184:19:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"12195:1:1"},{"name":"T2","nodeType":"YulIdentifier","src":"12198:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12201:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12188:6:1"},"nodeType":"YulFunctionCall","src":"12188:15:1"},"variableNames":[{"name":"T3","nodeType":"YulIdentifier","src":"12184:2:1"}]},{"nodeType":"YulVariableDeclaration","src":"12228:25:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"12244:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"12248:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12251:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12237:6:1"},"nodeType":"YulFunctionCall","src":"12237:16:1"},"variables":[{"name":"TT1","nodeType":"YulTypedName","src":"12232:3:1","type":""}]},{"nodeType":"YulAssignment","src":"12268:19:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"12280:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"12282:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12285:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12273:6:1"},"nodeType":"YulFunctionCall","src":"12273:14:1"},"variableNames":[{"name":"y2","nodeType":"YulIdentifier","src":"12268:2:1"}]},{"nodeType":"YulAssignment","src":"12294:26:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"12306:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"12312:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"12314:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12308:3:1"},"nodeType":"YulFunctionCall","src":"12308:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"12318:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12299:6:1"},"nodeType":"YulFunctionCall","src":"12299:21:1"},"variableNames":[{"name":"TT1","nodeType":"YulIdentifier","src":"12294:3:1"}]},{"nodeType":"YulAssignment","src":"12327:20:1","value":{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"12338:2:1"},{"name":"TT1","nodeType":"YulIdentifier","src":"12341:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"12345:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12331:6:1"},"nodeType":"YulFunctionCall","src":"12331:16:1"},"variableNames":[{"name":"y2","nodeType":"YulIdentifier","src":"12327:2:1"}]},{"nodeType":"YulAssignment","src":"12354:18:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"12365:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"12367:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12370:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12358:6:1"},"nodeType":"YulFunctionCall","src":"12358:14:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"12354:2:1"}]},{"nodeType":"YulAssignment","src":"12379:25:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"12390:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"12396:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"12398:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12392:3:1"},"nodeType":"YulFunctionCall","src":"12392:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"12402:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12383:6:1"},"nodeType":"YulFunctionCall","src":"12383:21:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"12379:2:1"}]},{"nodeType":"YulAssignment","src":"12411:19:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"12422:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"12425:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12428:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12415:6:1"},"nodeType":"YulFunctionCall","src":"12415:15:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"12411:2:1"}]},{"nodeType":"YulAssignment","src":"12437:18:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12448:1:1","type":"","value":"3"},{"name":"T2","nodeType":"YulIdentifier","src":"12450:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12453:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12441:6:1"},"nodeType":"YulFunctionCall","src":"12441:14:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"12437:2:1"}]},{"nodeType":"YulAssignment","src":"12462:21:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"12474:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"12477:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"12481:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12467:6:1"},"nodeType":"YulFunctionCall","src":"12467:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"12462:3:1"}]},{"nodeType":"YulAssignment","src":"12504:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"12515:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"12519:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12523:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12508:6:1"},"nodeType":"YulFunctionCall","src":"12508:17:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"12504:2:1"}]},{"nodeType":"YulAssignment","src":"12558:51:1","value":{"arguments":[{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"12575:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"12578:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12581:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12568:6:1"},"nodeType":"YulFunctionCall","src":"12568:15:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"12592:7:1"},{"name":"T3","nodeType":"YulIdentifier","src":"12601:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12604:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12585:6:1"},"nodeType":"YulFunctionCall","src":"12585:21:1"},{"name":"p","nodeType":"YulIdentifier","src":"12607:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12561:6:1"},"nodeType":"YulFunctionCall","src":"12561:48:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"12558:1:1"}]},{"nodeType":"YulAssignment","src":"12628:40:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"12639:2:1"},{"arguments":[{"name":"T3","nodeType":"YulIdentifier","src":"12649:2:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"12657:1:1"},{"name":"X","nodeType":"YulIdentifier","src":"12660:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12653:3:1"},"nodeType":"YulFunctionCall","src":"12653:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"12663:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12642:6:1"},"nodeType":"YulFunctionCall","src":"12642:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"12666:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12632:6:1"},"nodeType":"YulFunctionCall","src":"12632:36:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"12628:2:1"}]},{"nodeType":"YulAssignment","src":"12691:44:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"12702:2:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"12710:1:1"},{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"12720:2:1"},{"name":"Y","nodeType":"YulIdentifier","src":"12724:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"12727:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12713:6:1"},"nodeType":"YulFunctionCall","src":"12713:16:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12706:3:1"},"nodeType":"YulFunctionCall","src":"12706:24:1"},{"name":"p","nodeType":"YulIdentifier","src":"12731:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"12695:6:1"},"nodeType":"YulFunctionCall","src":"12695:40:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"12691:1:1"}]},{"nodeType":"YulContinue","src":"12767:8:1"}]},"condition":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"12079:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"12082:1:1","type":"","value":"0"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12076:2:1"},"nodeType":"YulFunctionCall","src":"12076:8:1"},"nodeType":"YulIf","src":"12073:713:1"}]},"condition":{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"12059:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"12062:1:1","type":"","value":"0"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12056:2:1"},"nodeType":"YulFunctionCall","src":"12056:8:1"},"nodeType":"YulIf","src":"12053:741:1"},{"nodeType":"YulAssignment","src":"12808:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"12819:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"12823:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12827:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12812:6:1"},"nodeType":"YulFunctionCall","src":"12812:17:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"12808:2:1"}]},{"nodeType":"YulVariableDeclaration","src":"12840:24:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"12856:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"12859:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12862:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12849:6:1"},"nodeType":"YulFunctionCall","src":"12849:15:1"},"variables":[{"name":"TT1","nodeType":"YulTypedName","src":"12844:3:1","type":""}]},{"nodeType":"YulAssignment","src":"12938:19:1","value":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"12949:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"12952:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"12955:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12942:6:1"},"nodeType":"YulFunctionCall","src":"12942:15:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"12938:2:1"}]},{"nodeType":"YulAssignment","src":"12965:23:1","value":{"arguments":[{"name":"zzz","nodeType":"YulIdentifier","src":"12978:3:1"},{"name":"TT1","nodeType":"YulIdentifier","src":"12982:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"12986:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"12971:6:1"},"nodeType":"YulFunctionCall","src":"12971:17:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"12965:3:1"}]},{"nodeType":"YulVariableDeclaration","src":"13007:25:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"13023:1:1"},{"name":"T4","nodeType":"YulIdentifier","src":"13026:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"13030:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"13016:6:1"},"nodeType":"YulFunctionCall","src":"13016:16:1"},"variables":[{"name":"TT2","nodeType":"YulTypedName","src":"13011:3:1","type":""}]},{"nodeType":"YulAssignment","src":"13039:79:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"13064:2:1"},{"name":"y2","nodeType":"YulIdentifier","src":"13067:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"13071:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"13057:6:1"},"nodeType":"YulFunctionCall","src":"13057:16:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"13079:1:1"},{"name":"TT1","nodeType":"YulIdentifier","src":"13081:3:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13075:3:1"},"nodeType":"YulFunctionCall","src":"13075:10:1"},{"name":"p","nodeType":"YulIdentifier","src":"13086:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"13050:6:1"},"nodeType":"YulFunctionCall","src":"13050:39:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"13098:7:1"},{"name":"TT2","nodeType":"YulIdentifier","src":"13107:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"13111:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"13091:6:1"},"nodeType":"YulFunctionCall","src":"13091:22:1"},{"name":"p","nodeType":"YulIdentifier","src":"13115:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"13043:6:1"},"nodeType":"YulFunctionCall","src":"13043:75:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"13039:2:1"}]},{"nodeType":"YulAssignment","src":"13125:70:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"TT2","nodeType":"YulIdentifier","src":"13149:3:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"13158:1:1"},{"name":"T4","nodeType":"YulIdentifier","src":"13160:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13154:3:1"},"nodeType":"YulFunctionCall","src":"13154:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"13164:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"13142:6:1"},"nodeType":"YulFunctionCall","src":"13142:24:1"},{"name":"y2","nodeType":"YulIdentifier","src":"13168:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"13172:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"13135:6:1"},"nodeType":"YulFunctionCall","src":"13135:39:1"},{"arguments":[{"name":"Y","nodeType":"YulIdentifier","src":"13183:1:1"},{"name":"TT1","nodeType":"YulIdentifier","src":"13186:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"13190:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"13176:6:1"},"nodeType":"YulFunctionCall","src":"13176:16:1"},{"name":"p","nodeType":"YulIdentifier","src":"13193:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"13128:6:1"},"nodeType":"YulFunctionCall","src":"13128:67:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"13125:1:1"}]},{"nodeType":"YulAssignment","src":"13208:5:1","value":{"name":"T4","nodeType":"YulIdentifier","src":"13211:2:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"13208:1:1"}]}]}]},"condition":{"arguments":[{"name":"minus_1","nodeType":"YulIdentifier","src":"10479:7:1"},{"name":"index","nodeType":"YulIdentifier","src":"10488:5:1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10475:2:1"},"nodeType":"YulFunctionCall","src":"10475:19:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10495:26:1","statements":[{"nodeType":"YulAssignment","src":"10497:22:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"10510:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"10517:1:1","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10506:3:1"},"nodeType":"YulFunctionCall","src":"10506:13:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"10497:5:1"}]}]},"pre":{"nodeType":"YulBlock","src":"10469:5:1","statements":[]},"src":"10465:2781:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"13276:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13279:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13272:3:1"},"nodeType":"YulFunctionCall","src":"13272:12:1"},{"name":"zz","nodeType":"YulIdentifier","src":"13285:2:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13265:6:1"},"nodeType":"YulFunctionCall","src":"13265:23:1"},"nodeType":"YulExpressionStatement","src":"13265:23:1"},{"expression":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"13506:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13509:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13499:6:1"},"nodeType":"YulFunctionCall","src":"13499:15:1"},"nodeType":"YulExpressionStatement","src":"13499:15:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"13532:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13535:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13528:3:1"},"nodeType":"YulFunctionCall","src":"13528:12:1"},{"kind":"number","nodeType":"YulLiteral","src":"13542:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13521:6:1"},"nodeType":"YulFunctionCall","src":"13521:26:1"},"nodeType":"YulExpressionStatement","src":"13521:26:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"13565:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13568:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13561:3:1"},"nodeType":"YulFunctionCall","src":"13561:12:1"},{"kind":"number","nodeType":"YulLiteral","src":"13575:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13554:6:1"},"nodeType":"YulFunctionCall","src":"13554:26:1"},"nodeType":"YulExpressionStatement","src":"13554:26:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"13689:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13692:4:1","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13685:3:1"},"nodeType":"YulFunctionCall","src":"13685:12:1"},{"name":"minus_2","nodeType":"YulIdentifier","src":"13699:7:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13678:6:1"},"nodeType":"YulFunctionCall","src":"13678:29:1"},"nodeType":"YulExpressionStatement","src":"13678:29:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"13725:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13728:4:1","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13721:3:1"},"nodeType":"YulFunctionCall","src":"13721:12:1"},{"name":"p","nodeType":"YulIdentifier","src":"13735:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13714:6:1"},"nodeType":"YulFunctionCall","src":"13714:23:1"},"nodeType":"YulExpressionStatement","src":"13714:23:1"},{"body":{"nodeType":"YulBlock","src":"13867:34:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13888:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13891:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13881:6:1"},"nodeType":"YulFunctionCall","src":"13881:12:1"},"nodeType":"YulExpressionStatement","src":"13881:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13838:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13834:3:1"},"nodeType":"YulFunctionCall","src":"13834:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"13842:4:1","type":"","value":"0x05"},{"name":"T","nodeType":"YulIdentifier","src":"13848:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13851:4:1","type":"","value":"0xc0"},{"name":"T","nodeType":"YulIdentifier","src":"13857:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"13860:4:1","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"13823:10:1"},"nodeType":"YulFunctionCall","src":"13823:42:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13816:6:1"},"nodeType":"YulFunctionCall","src":"13816:50:1"},"nodeType":"YulIf","src":"13813:88:1"},{"nodeType":"YulAssignment","src":"14028:23:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"14038:1:1"},{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"14046:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14040:5:1"},"nodeType":"YulFunctionCall","src":"14040:8:1"},{"name":"p","nodeType":"YulIdentifier","src":"14049:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"14031:6:1"},"nodeType":"YulFunctionCall","src":"14031:20:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"14028:1:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":519,"isOffset":false,"isSlot":false,"src":"10369:2:1","valueSize":1},{"declaration":519,"isOffset":false,"isSlot":false,"src":"11687:2:1","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"10384:2:1","valueSize":1},{"declaration":522,"isOffset":false,"isSlot":false,"src":"11703:2:1","valueSize":1},{"declaration":487,"isOffset":false,"isSlot":false,"src":"10314:2:1","valueSize":1},{"declaration":487,"isOffset":false,"isSlot":false,"src":"11630:2:1","valueSize":1},{"declaration":489,"isOffset":false,"isSlot":false,"src":"10327:2:1","valueSize":1},{"declaration":489,"isOffset":false,"isSlot":false,"src":"11644:2:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13276:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13506:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13532:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13565:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13689:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13725:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13848:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"13857:1:1","valueSize":1},{"declaration":516,"isOffset":false,"isSlot":false,"src":"14046:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10256:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10311:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10366:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10667:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10760:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10783:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"10923:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"11072:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"11880:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12195:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12280:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12306:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12365:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12390:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12558:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"12660:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"13023:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"13208:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"14028:1:1","valueSize":1},{"declaration":496,"isOffset":false,"isSlot":false,"src":"14038:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"10269:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"10324:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"10380:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"10581:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"11194:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"11216:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"11450:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"11459:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"11830:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"12115:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"12691:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"12724:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"13125:1:1","valueSize":1},{"declaration":505,"isOffset":false,"isSlot":false,"src":"13183:1:1","valueSize":1},{"declaration":62,"isOffset":false,"isSlot":false,"src":"10259:2:1","valueSize":1},{"declaration":62,"isOffset":false,"isSlot":false,"src":"11564:2:1","valueSize":1},{"declaration":65,"isOffset":false,"isSlot":false,"src":"10272:2:1","valueSize":1},{"declaration":65,"isOffset":false,"isSlot":false,"src":"11578:2:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10010:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10023:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10065:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10095:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10165:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10195:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10407:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10418:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10488:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10497:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"10510:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"11363:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"11393:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"9931:5:1","valueSize":1},{"declaration":508,"isOffset":false,"isSlot":false,"src":"9961:5:1","valueSize":1},{"declaration":77,"isOffset":false,"isSlot":false,"src":"10479:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"10957:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"12592:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"13098:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"13699:7:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10584:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10633:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10673:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10711:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10766:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10772:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10788:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10791:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10795:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10847:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10888:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10946:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10969:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"10972:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11079:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11086:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11089:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11219:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11226:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11457:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11827:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11832:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11871:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11878:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"11883:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12118:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12164:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12201:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12251:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12285:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12312:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12318:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12345:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12370:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12396:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12402:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12428:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12453:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12481:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12523:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12581:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12604:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12607:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12657:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12663:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12666:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12710:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12727:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12731:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12827:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12862:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12955:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"12986:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13030:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13071:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13079:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13086:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13111:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13115:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13158:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13164:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13172:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13190:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13193:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"13735:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"14049:1:1","valueSize":1},{"declaration":491,"isOffset":false,"isSlot":false,"src":"10102:8:1","valueSize":1},{"declaration":491,"isOffset":false,"isSlot":false,"src":"10202:8:1","valueSize":1},{"declaration":491,"isOffset":false,"isSlot":false,"src":"11400:8:1","valueSize":1},{"declaration":491,"isOffset":false,"isSlot":false,"src":"9968:8:1","valueSize":1},{"declaration":493,"isOffset":false,"isSlot":false,"src":"10072:8:1","valueSize":1},{"declaration":493,"isOffset":false,"isSlot":false,"src":"10172:8:1","valueSize":1},{"declaration":493,"isOffset":false,"isSlot":false,"src":"11370:8:1","valueSize":1},{"declaration":493,"isOffset":false,"isSlot":false,"src":"9938:8:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10141:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10241:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10296:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10350:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10433:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10768:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10785:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10869:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"10884:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"11868:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12282:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12314:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12367:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12398:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12504:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12519:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12938:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"12949:2:1","valueSize":1},{"declaration":499,"isOffset":false,"isSlot":false,"src":"13285:2:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"10445:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"10828:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"10843:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"11823:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"12462:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"12477:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"12965:3:1","valueSize":1},{"declaration":502,"isOffset":false,"isSlot":false,"src":"12978:3:1","valueSize":1}],"id":545,"nodeType":"InlineAssembly","src":"9868:4197:1"}]},{"expression":{"id":547,"name":"X","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"14122:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":497,"id":548,"nodeType":"Return","src":"14115:8:1"}]},"documentation":{"id":485,"nodeType":"StructuredDocumentation","src":"9140:100:1","text":" @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key"},"id":550,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_mulmuladd_S_asm","nameLocation":"9255:20:1","nodeType":"FunctionDefinition","parameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":487,"mutability":"mutable","name":"Q0","nameLocation":"9290:2:1","nodeType":"VariableDeclaration","scope":550,"src":"9285:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint","nodeType":"ElementaryTypeName","src":"9285:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":489,"mutability":"mutable","name":"Q1","nameLocation":"9299:2:1","nodeType":"VariableDeclaration","scope":550,"src":"9294:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":488,"name":"uint","nodeType":"ElementaryTypeName","src":"9294:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"scalar_u","nameLocation":"9376:8:1","nodeType":"VariableDeclaration","scope":550,"src":"9371:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":490,"name":"uint","nodeType":"ElementaryTypeName","src":"9371:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":493,"mutability":"mutable","name":"scalar_v","nameLocation":"9399:8:1","nodeType":"VariableDeclaration","scope":550,"src":"9394:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":492,"name":"uint","nodeType":"ElementaryTypeName","src":"9394:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9275:138:1"},"returnParameters":{"id":497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":496,"mutability":"mutable","name":"X","nameLocation":"9442:1:1","nodeType":"VariableDeclaration","scope":550,"src":"9437:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":495,"name":"uint","nodeType":"ElementaryTypeName","src":"9437:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9436:8:1"},"scope":1202,"src":"9246:4884:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"14620:4622:1","statements":[{"id":692,"nodeType":"UncheckedBlock","src":"14633:4588:1","statements":[{"assignments":[562],"declarations":[{"constant":false,"id":562,"mutability":"mutable","name":"zz","nameLocation":"14656:2:1","nodeType":"VariableDeclaration","scope":692,"src":"14651:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":561,"name":"uint","nodeType":"ElementaryTypeName","src":"14651:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":563,"nodeType":"VariableDeclarationStatement","src":"14651:7:1"},{"assignments":[569],"declarations":[{"constant":false,"id":569,"mutability":"mutable","name":"T","nameLocation":"14726:1:1","nodeType":"VariableDeclaration","scope":692,"src":"14711:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":567,"name":"uint","nodeType":"ElementaryTypeName","src":"14711:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":568,"length":{"hexValue":"36","id":566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14716:1:1","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"14711:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"visibility":"internal"}],"id":570,"nodeType":"VariableDeclarationStatement","src":"14711:16:1"},{"expression":{"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":571,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14735:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"323536","id":572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14738:3:1","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"14735:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":574,"nodeType":"ExpressionStatement","src":"14735:6:1"},{"body":{"id":689,"nodeType":"Block","src":"14797:314:1","statements":[{"expression":{"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":580,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14805:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":581,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14808:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14811:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14808:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14805:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":585,"nodeType":"ExpressionStatement","src":"14805:7:1"},{"expression":{"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":586,"name":"T","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"14860:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":588,"indexExpression":{"hexValue":"30","id":587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14862:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14860:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3634","id":589,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14865:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313238","id":590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14869:3:1","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":591,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"14875:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":592,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14885:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14875:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":594,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14874:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14889:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14874:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14873:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3634","id":599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14892:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":600,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"14897:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":601,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14908:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3634","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14911:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"14908:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":604,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14907:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14897:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":606,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14896:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14916:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14896:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14895:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14892:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:49:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14931:2:1","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":613,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"14936:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":614,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14947:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14950:3:1","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"14947:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":617,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14946:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14936:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14935:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14956:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14935:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":622,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14934:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14931:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:89:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3136","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14959:2:1","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":626,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"14964:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":627,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"14975:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313932","id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14978:3:1","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"14975:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14974:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14964:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":632,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14963:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14984:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14963:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":635,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14962:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14959:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:117:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15003:1:1","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":639,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"15007:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":640,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15017:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15007:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":642,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15006:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15021:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15006:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":645,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15005:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15003:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:154:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15024:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":649,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"15028:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":650,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15039:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3634","id":651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15042:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"15039:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":653,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15038:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15028:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":655,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15027:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15047:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15027:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":658,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15026:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15024:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:180:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15050:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":662,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"15054:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":663,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15065:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15068:3:1","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"15065:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":666,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15064:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15054:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":668,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15053:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15074:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15053:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":671,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15052:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15050:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:207:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":674,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"15079:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":675,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"15090:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313932","id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15093:3:1","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"15090:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":678,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15089:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15079:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":680,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15078:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15099:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15078:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":683,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15077:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14869:232:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":685,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14868:234:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14865:237:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14860:242:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":688,"nodeType":"ExpressionStatement","src":"14860:242:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":575,"name":"T","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"14782:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":577,"indexExpression":{"hexValue":"30","id":576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14784:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14782:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14788:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14782:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":690,"nodeType":"WhileStatement","src":"14776:335:1"},{"AST":{"nodeType":"YulBlock","src":"15125:4081:1","statements":[{"expression":{"arguments":[{"name":"dataPointer","nodeType":"YulIdentifier","src":"15149:11:1"},{"name":"T","nodeType":"YulIdentifier","src":"15162:1:1"},{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"15171:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15165:5:1"},"nodeType":"YulFunctionCall","src":"15165:8:1"},{"kind":"number","nodeType":"YulLiteral","src":"15175:2:1","type":"","value":"64"}],"functionName":{"name":"extcodecopy","nodeType":"YulIdentifier","src":"15137:11:1"},"nodeType":"YulFunctionCall","src":"15137:41:1"},"nodeType":"YulExpressionStatement","src":"15137:41:1"},{"nodeType":"YulAssignment","src":"15192:12:1","value":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"15202:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15196:5:1"},"nodeType":"YulFunctionCall","src":"15196:8:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"15192:1:1"}]},{"nodeType":"YulVariableDeclaration","src":"15211:24:1","value":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"15229:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"15231:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15225:3:1"},"nodeType":"YulFunctionCall","src":"15225:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15219:5:1"},"nodeType":"YulFunctionCall","src":"15219:16:1"},"variables":[{"name":"Y","nodeType":"YulTypedName","src":"15215:1:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15242:10:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15251:1:1","type":"","value":"1"},"variables":[{"name":"zzz","nodeType":"YulTypedName","src":"15246:3:1","type":""}]},{"nodeType":"YulAssignment","src":"15259:5:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15263:1:1","type":"","value":"1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"15259:2:1"}]},{"body":{"nodeType":"YulBlock","src":"15422:3060:1","statements":[{"nodeType":"YulBlock","src":"15429:825:1","statements":[{"nodeType":"YulVariableDeclaration","src":"15437:24:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15453:1:1","type":"","value":"2"},{"name":"Y","nodeType":"YulIdentifier","src":"15456:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"15459:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15446:6:1"},"nodeType":"YulFunctionCall","src":"15446:15:1"},"variables":[{"name":"TT1","nodeType":"YulTypedName","src":"15441:3:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15487:25:1","value":{"arguments":[{"name":"TT1","nodeType":"YulIdentifier","src":"15502:3:1"},{"name":"TT1","nodeType":"YulIdentifier","src":"15506:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"15510:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15495:6:1"},"nodeType":"YulFunctionCall","src":"15495:17:1"},"variables":[{"name":"T2","nodeType":"YulTypedName","src":"15491:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15529:23:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"15544:1:1"},{"name":"T2","nodeType":"YulIdentifier","src":"15547:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"15550:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15537:6:1"},"nodeType":"YulFunctionCall","src":"15537:15:1"},"variables":[{"name":"T3","nodeType":"YulTypedName","src":"15533:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15570:25:1","value":{"arguments":[{"name":"TT1","nodeType":"YulIdentifier","src":"15585:3:1"},{"name":"T2","nodeType":"YulIdentifier","src":"15590:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"15593:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15578:6:1"},"nodeType":"YulFunctionCall","src":"15578:17:1"},"variables":[{"name":"T1","nodeType":"YulTypedName","src":"15574:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"15610:69:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15625:1:1","type":"","value":"3"},{"arguments":[{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"15642:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"15648:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"15650:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15644:3:1"},"nodeType":"YulFunctionCall","src":"15644:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"15654:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"15635:6:1"},"nodeType":"YulFunctionCall","src":"15635:21:1"},{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"15665:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"15667:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"15670:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"15658:6:1"},"nodeType":"YulFunctionCall","src":"15658:14:1"},{"name":"p","nodeType":"YulIdentifier","src":"15673:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15628:6:1"},"nodeType":"YulFunctionCall","src":"15628:47:1"},{"name":"p","nodeType":"YulIdentifier","src":"15677:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15618:6:1"},"nodeType":"YulFunctionCall","src":"15618:61:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"15614:2:1","type":""}]},{"nodeType":"YulAssignment","src":"15710:21:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"15722:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"15725:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"15729:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15715:6:1"},"nodeType":"YulFunctionCall","src":"15715:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"15710:3:1"}]},{"nodeType":"YulAssignment","src":"15751:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"15762:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"15766:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"15770:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15755:6:1"},"nodeType":"YulFunctionCall","src":"15755:17:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"15751:2:1"}]},{"nodeType":"YulAssignment","src":"15805:51:1","value":{"arguments":[{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"15822:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"15825:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"15828:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15815:6:1"},"nodeType":"YulFunctionCall","src":"15815:15:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"15839:7:1"},{"name":"T3","nodeType":"YulIdentifier","src":"15848:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"15851:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15832:6:1"},"nodeType":"YulFunctionCall","src":"15832:21:1"},{"name":"p","nodeType":"YulIdentifier","src":"15854:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"15808:6:1"},"nodeType":"YulFunctionCall","src":"15808:48:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"15805:1:1"}]},{"nodeType":"YulVariableDeclaration","src":"15933:44:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"15948:2:1"},{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"15958:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"15965:1:1"},{"name":"T3","nodeType":"YulIdentifier","src":"15968:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15961:3:1"},"nodeType":"YulFunctionCall","src":"15961:10:1"},{"name":"p","nodeType":"YulIdentifier","src":"15972:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"15951:6:1"},"nodeType":"YulFunctionCall","src":"15951:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"15975:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"15941:6:1"},"nodeType":"YulFunctionCall","src":"15941:36:1"},"variables":[{"name":"T5","nodeType":"YulTypedName","src":"15937:2:1","type":""}]},{"nodeType":"YulAssignment","src":"16080:36:1","value":{"arguments":[{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"16098:2:1"},{"name":"Y","nodeType":"YulIdentifier","src":"16102:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"16105:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"16091:6:1"},"nodeType":"YulFunctionCall","src":"16091:16:1"},{"name":"T5","nodeType":"YulIdentifier","src":"16109:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"16112:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"16084:6:1"},"nodeType":"YulFunctionCall","src":"16084:32:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"16080:1:1"}]}]},{"nodeType":"YulBlock","src":"16261:798:1","statements":[{"nodeType":"YulVariableDeclaration","src":"16269:89:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16287:2:1","type":"","value":"13"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"16299:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"16306:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16295:3:1"},"nodeType":"YulFunctionCall","src":"16295:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"16316:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16291:3:1"},"nodeType":"YulFunctionCall","src":"16291:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16283:3:1"},"nodeType":"YulFunctionCall","src":"16283:36:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16325:1:1","type":"","value":"9"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"16336:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"16343:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16332:3:1"},"nodeType":"YulFunctionCall","src":"16332:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"16353:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16328:3:1"},"nodeType":"YulFunctionCall","src":"16328:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16321:3:1"},"nodeType":"YulFunctionCall","src":"16321:35:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16278:3:1"},"nodeType":"YulFunctionCall","src":"16278:80:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"16273:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16365:26:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"16381:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"16388:2:1","type":"","value":"64"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16377:3:1"},"nodeType":"YulFunctionCall","src":"16377:14:1"},"variables":[{"name":"index2","nodeType":"YulTypedName","src":"16369:6:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16398:99:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"16410:2:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16423:2:1","type":"","value":"12"},{"arguments":[{"arguments":[{"name":"index2","nodeType":"YulIdentifier","src":"16435:6:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"16443:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16431:3:1"},"nodeType":"YulFunctionCall","src":"16431:21:1"},{"kind":"number","nodeType":"YulLiteral","src":"16453:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16427:3:1"},"nodeType":"YulFunctionCall","src":"16427:28:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16419:3:1"},"nodeType":"YulFunctionCall","src":"16419:37:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16462:1:1","type":"","value":"8"},{"arguments":[{"arguments":[{"name":"index2","nodeType":"YulIdentifier","src":"16473:6:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"16481:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16469:3:1"},"nodeType":"YulFunctionCall","src":"16469:21:1"},{"kind":"number","nodeType":"YulLiteral","src":"16491:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16465:3:1"},"nodeType":"YulFunctionCall","src":"16465:28:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16458:3:1"},"nodeType":"YulFunctionCall","src":"16458:36:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16414:3:1"},"nodeType":"YulFunctionCall","src":"16414:82:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16406:3:1"},"nodeType":"YulFunctionCall","src":"16406:91:1"},"variables":[{"name":"T3","nodeType":"YulTypedName","src":"16402:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16504:27:1","value":{"arguments":[{"name":"index2","nodeType":"YulIdentifier","src":"16520:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"16528:2:1","type":"","value":"64"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16516:3:1"},"nodeType":"YulFunctionCall","src":"16516:15:1"},"variables":[{"name":"index3","nodeType":"YulTypedName","src":"16508:6:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"16538:98:1","value":{"arguments":[{"name":"T3","nodeType":"YulIdentifier","src":"16550:2:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16562:2:1","type":"","value":"11"},{"arguments":[{"arguments":[{"name":"index3","nodeType":"YulIdentifier","src":"16574:6:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"16582:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16570:3:1"},"nodeType":"YulFunctionCall","src":"16570:21:1"},{"kind":"number","nodeType":"YulLiteral","src":"16592:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16566:3:1"},"nodeType":"YulFunctionCall","src":"16566:28:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16558:3:1"},"nodeType":"YulFunctionCall","src":"16558:37:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16601:1:1","type":"","value":"7"},{"arguments":[{"arguments":[{"name":"index3","nodeType":"YulIdentifier","src":"16612:6:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"16620:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16608:3:1"},"nodeType":"YulFunctionCall","src":"16608:21:1"},{"kind":"number","nodeType":"YulLiteral","src":"16630:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16604:3:1"},"nodeType":"YulFunctionCall","src":"16604:28:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16597:3:1"},"nodeType":"YulFunctionCall","src":"16597:36:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16553:3:1"},"nodeType":"YulFunctionCall","src":"16553:82:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16546:3:1"},"nodeType":"YulFunctionCall","src":"16546:90:1"},"variables":[{"name":"T2","nodeType":"YulTypedName","src":"16542:2:1","type":""}]},{"nodeType":"YulAssignment","src":"16643:22:1","value":{"arguments":[{"name":"index3","nodeType":"YulIdentifier","src":"16654:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"16662:2:1","type":"","value":"64"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16650:3:1"},"nodeType":"YulFunctionCall","src":"16650:15:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"16643:5:1"}]},{"nodeType":"YulVariableDeclaration","src":"16672:96:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"16684:2:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16696:2:1","type":"","value":"10"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"16708:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"16715:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16704:3:1"},"nodeType":"YulFunctionCall","src":"16704:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"16725:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16700:3:1"},"nodeType":"YulFunctionCall","src":"16700:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16692:3:1"},"nodeType":"YulFunctionCall","src":"16692:36:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16734:1:1","type":"","value":"6"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"16745:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"16752:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"16741:3:1"},"nodeType":"YulFunctionCall","src":"16741:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"16762:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16737:3:1"},"nodeType":"YulFunctionCall","src":"16737:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16730:3:1"},"nodeType":"YulFunctionCall","src":"16730:35:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16687:3:1"},"nodeType":"YulFunctionCall","src":"16687:80:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16680:3:1"},"nodeType":"YulFunctionCall","src":"16680:88:1"},"variables":[{"name":"T1","nodeType":"YulTypedName","src":"16676:2:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"16951:59:1","statements":[{"nodeType":"YulAssignment","src":"16964:12:1","value":{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"16971:1:1"},{"name":"Y","nodeType":"YulIdentifier","src":"16974:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16967:3:1"},"nodeType":"YulFunctionCall","src":"16967:9:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"16964:1:1"}]},{"nodeType":"YulContinue","src":"16991:8:1"}]},"condition":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"16948:2:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16941:6:1"},"nodeType":"YulFunctionCall","src":"16941:10:1"},"nodeType":"YulIf","src":"16938:72:1"},{"expression":{"arguments":[{"name":"dataPointer","nodeType":"YulIdentifier","src":"17030:11:1"},{"name":"T","nodeType":"YulIdentifier","src":"17043:1:1"},{"name":"T1","nodeType":"YulIdentifier","src":"17045:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"17049:2:1","type":"","value":"64"}],"functionName":{"name":"extcodecopy","nodeType":"YulIdentifier","src":"17018:11:1"},"nodeType":"YulFunctionCall","src":"17018:34:1"},"nodeType":"YulExpressionStatement","src":"17018:34:1"}]},{"nodeType":"YulBlock","src":"17071:1397:1","statements":[{"nodeType":"YulVariableDeclaration","src":"17203:51:1","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"17235:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"17237:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17231:3:1"},"nodeType":"YulFunctionCall","src":"17231:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17225:5:1"},"nodeType":"YulFunctionCall","src":"17225:16:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"17243:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"17247:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17218:6:1"},"nodeType":"YulFunctionCall","src":"17218:31:1"},{"name":"Y","nodeType":"YulIdentifier","src":"17250:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"17252:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17211:6:1"},"nodeType":"YulFunctionCall","src":"17211:43:1"},"variables":[{"name":"y2","nodeType":"YulTypedName","src":"17207:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17263:49:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"17291:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17285:5:1"},"nodeType":"YulFunctionCall","src":"17285:8:1"},{"name":"zz","nodeType":"YulIdentifier","src":"17295:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17298:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17278:6:1"},"nodeType":"YulFunctionCall","src":"17278:22:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"17305:1:1"},{"name":"X","nodeType":"YulIdentifier","src":"17307:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17301:3:1"},"nodeType":"YulFunctionCall","src":"17301:8:1"},{"name":"p","nodeType":"YulIdentifier","src":"17310:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17271:6:1"},"nodeType":"YulFunctionCall","src":"17271:41:1"},"variables":[{"name":"T2","nodeType":"YulTypedName","src":"17267:2:1","type":""}]},{"body":{"nodeType":"YulBlock","src":"17377:731:1","statements":[{"body":{"nodeType":"YulBlock","src":"17397:703:1","statements":[{"nodeType":"YulVariableDeclaration","src":"17406:26:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17424:1:1","type":"","value":"2"},{"name":"Y","nodeType":"YulIdentifier","src":"17427:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"17430:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17417:6:1"},"nodeType":"YulFunctionCall","src":"17417:15:1"},"variables":[{"name":"T1","nodeType":"YulTypedName","src":"17413:2:1","type":""}]},{"nodeType":"YulAssignment","src":"17459:19:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"17470:2:1"},{"name":"T1","nodeType":"YulIdentifier","src":"17473:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17476:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17463:6:1"},"nodeType":"YulFunctionCall","src":"17463:15:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"17459:2:1"}]},{"nodeType":"YulVariableDeclaration","src":"17496:23:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"17511:1:1"},{"name":"T2","nodeType":"YulIdentifier","src":"17514:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17517:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17504:6:1"},"nodeType":"YulFunctionCall","src":"17504:15:1"},"variables":[{"name":"T3","nodeType":"YulTypedName","src":"17500:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"17544:25:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"17560:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"17564:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17567:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17553:6:1"},"nodeType":"YulFunctionCall","src":"17553:16:1"},"variables":[{"name":"TT1","nodeType":"YulTypedName","src":"17548:3:1","type":""}]},{"nodeType":"YulAssignment","src":"17584:19:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"17596:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"17598:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17601:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17589:6:1"},"nodeType":"YulFunctionCall","src":"17589:14:1"},"variableNames":[{"name":"y2","nodeType":"YulIdentifier","src":"17584:2:1"}]},{"nodeType":"YulAssignment","src":"17610:26:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"17622:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"17628:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"17630:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17624:3:1"},"nodeType":"YulFunctionCall","src":"17624:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"17634:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17615:6:1"},"nodeType":"YulFunctionCall","src":"17615:21:1"},"variableNames":[{"name":"TT1","nodeType":"YulIdentifier","src":"17610:3:1"}]},{"nodeType":"YulAssignment","src":"17643:20:1","value":{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"17654:2:1"},{"name":"TT1","nodeType":"YulIdentifier","src":"17657:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"17661:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17647:6:1"},"nodeType":"YulFunctionCall","src":"17647:16:1"},"variableNames":[{"name":"y2","nodeType":"YulIdentifier","src":"17643:2:1"}]},{"nodeType":"YulAssignment","src":"17670:18:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"17681:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"17683:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17686:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17674:6:1"},"nodeType":"YulFunctionCall","src":"17674:14:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"17670:2:1"}]},{"nodeType":"YulAssignment","src":"17695:25:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"17706:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"17712:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"17714:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17708:3:1"},"nodeType":"YulFunctionCall","src":"17708:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"17718:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17699:6:1"},"nodeType":"YulFunctionCall","src":"17699:21:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"17695:2:1"}]},{"nodeType":"YulAssignment","src":"17727:19:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"17738:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"17741:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17744:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17731:6:1"},"nodeType":"YulFunctionCall","src":"17731:15:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"17727:2:1"}]},{"nodeType":"YulVariableDeclaration","src":"17753:22:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17768:1:1","type":"","value":"3"},{"name":"T2","nodeType":"YulIdentifier","src":"17770:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17773:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17761:6:1"},"nodeType":"YulFunctionCall","src":"17761:14:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"17757:2:1","type":""}]},{"nodeType":"YulAssignment","src":"17782:21:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"17794:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"17797:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"17801:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17787:6:1"},"nodeType":"YulFunctionCall","src":"17787:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"17782:3:1"}]},{"nodeType":"YulAssignment","src":"17824:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"17835:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"17839:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17843:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17828:6:1"},"nodeType":"YulFunctionCall","src":"17828:17:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"17824:2:1"}]},{"nodeType":"YulAssignment","src":"17878:51:1","value":{"arguments":[{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"17895:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"17898:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17901:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17888:6:1"},"nodeType":"YulFunctionCall","src":"17888:15:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"17912:7:1"},{"name":"T3","nodeType":"YulIdentifier","src":"17921:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"17924:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17905:6:1"},"nodeType":"YulFunctionCall","src":"17905:21:1"},{"name":"p","nodeType":"YulIdentifier","src":"17927:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17881:6:1"},"nodeType":"YulFunctionCall","src":"17881:48:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"17878:1:1"}]},{"nodeType":"YulAssignment","src":"17948:40:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"17959:2:1"},{"arguments":[{"name":"T3","nodeType":"YulIdentifier","src":"17969:2:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"17977:1:1"},{"name":"X","nodeType":"YulIdentifier","src":"17980:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17973:3:1"},"nodeType":"YulFunctionCall","src":"17973:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"17983:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"17962:6:1"},"nodeType":"YulFunctionCall","src":"17962:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"17986:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"17952:6:1"},"nodeType":"YulFunctionCall","src":"17952:36:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"17948:2:1"}]},{"nodeType":"YulAssignment","src":"18011:44:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"18022:2:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"18030:1:1"},{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"18040:2:1"},{"name":"Y","nodeType":"YulIdentifier","src":"18044:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"18047:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18033:6:1"},"nodeType":"YulFunctionCall","src":"18033:16:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18026:3:1"},"nodeType":"YulFunctionCall","src":"18026:24:1"},{"name":"p","nodeType":"YulIdentifier","src":"18051:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"18015:6:1"},"nodeType":"YulFunctionCall","src":"18015:40:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"18011:1:1"}]},{"nodeType":"YulContinue","src":"18083:8:1"}]},"condition":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"17392:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"17395:1:1","type":"","value":"0"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17389:2:1"},"nodeType":"YulFunctionCall","src":"17389:8:1"},"nodeType":"YulIf","src":"17386:714:1"}]},"condition":{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"17372:2:1"},{"kind":"number","nodeType":"YulLiteral","src":"17375:1:1","type":"","value":"0"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"17369:2:1"},"nodeType":"YulFunctionCall","src":"17369:8:1"},"nodeType":"YulIf","src":"17366:742:1"},{"nodeType":"YulVariableDeclaration","src":"18122:25:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"18137:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"18141:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18145:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18130:6:1"},"nodeType":"YulFunctionCall","src":"18130:17:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"18126:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18154:23:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"18169:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"18172:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18175:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18162:6:1"},"nodeType":"YulFunctionCall","src":"18162:15:1"},"variables":[{"name":"T1","nodeType":"YulTypedName","src":"18158:2:1","type":""}]},{"nodeType":"YulAssignment","src":"18187:19:1","value":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"18198:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"18201:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18204:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18191:6:1"},"nodeType":"YulFunctionCall","src":"18191:15:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"18187:2:1"}]},{"nodeType":"YulAssignment","src":"18226:22:1","value":{"arguments":[{"name":"zzz","nodeType":"YulIdentifier","src":"18239:3:1"},{"name":"T1","nodeType":"YulIdentifier","src":"18243:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18246:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18232:6:1"},"nodeType":"YulFunctionCall","src":"18232:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"18226:3:1"}]},{"nodeType":"YulVariableDeclaration","src":"18264:25:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"18280:1:1"},{"name":"T4","nodeType":"YulIdentifier","src":"18283:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18287:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18273:6:1"},"nodeType":"YulFunctionCall","src":"18273:16:1"},"variables":[{"name":"zz1","nodeType":"YulTypedName","src":"18268:3:1","type":""}]},{"nodeType":"YulAssignment","src":"18296:77:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"18320:2:1"},{"name":"y2","nodeType":"YulIdentifier","src":"18323:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18327:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18313:6:1"},"nodeType":"YulFunctionCall","src":"18313:16:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"18335:1:1"},{"name":"T1","nodeType":"YulIdentifier","src":"18337:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18331:3:1"},"nodeType":"YulFunctionCall","src":"18331:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"18341:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"18306:6:1"},"nodeType":"YulFunctionCall","src":"18306:38:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"18353:7:1"},{"name":"zz1","nodeType":"YulIdentifier","src":"18362:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"18366:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18346:6:1"},"nodeType":"YulFunctionCall","src":"18346:22:1"},{"name":"p","nodeType":"YulIdentifier","src":"18370:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"18299:6:1"},"nodeType":"YulFunctionCall","src":"18299:74:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"18296:1:1"}]},{"nodeType":"YulAssignment","src":"18380:68:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"zz1","nodeType":"YulIdentifier","src":"18404:3:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"18413:1:1"},{"name":"X","nodeType":"YulIdentifier","src":"18415:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18409:3:1"},"nodeType":"YulFunctionCall","src":"18409:8:1"},{"name":"p","nodeType":"YulIdentifier","src":"18418:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"18397:6:1"},"nodeType":"YulFunctionCall","src":"18397:23:1"},{"name":"y2","nodeType":"YulIdentifier","src":"18422:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18426:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18390:6:1"},"nodeType":"YulFunctionCall","src":"18390:38:1"},{"arguments":[{"name":"Y","nodeType":"YulIdentifier","src":"18437:1:1"},{"name":"T1","nodeType":"YulIdentifier","src":"18440:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"18443:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"18430:6:1"},"nodeType":"YulFunctionCall","src":"18430:15:1"},{"name":"p","nodeType":"YulIdentifier","src":"18446:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"18383:6:1"},"nodeType":"YulFunctionCall","src":"18383:65:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"18380:1:1"}]}]}]},"condition":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"15374:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"15381:3:1","type":"","value":"191"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15371:2:1"},"nodeType":"YulFunctionCall","src":"15371:14:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"15386:28:1","statements":[{"nodeType":"YulAssignment","src":"15388:24:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"15401:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"15408:3:1","type":"","value":"191"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15397:3:1"},"nodeType":"YulFunctionCall","src":"15397:15:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"15388:5:1"}]}]},"pre":{"nodeType":"YulBlock","src":"15350:20:1","statements":[{"nodeType":"YulVariableDeclaration","src":"15352:16:1","value":{"kind":"number","nodeType":"YulLiteral","src":"15365:3:1","type":"","value":"254"},"variables":[{"name":"index","nodeType":"YulTypedName","src":"15356:5:1","type":""}]}]},"src":"15346:3136:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"18510:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"18513:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18506:3:1"},"nodeType":"YulFunctionCall","src":"18506:12:1"},{"name":"zz","nodeType":"YulIdentifier","src":"18519:2:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18499:6:1"},"nodeType":"YulFunctionCall","src":"18499:23:1"},"nodeType":"YulExpressionStatement","src":"18499:23:1"},{"expression":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"18749:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"18752:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18742:6:1"},"nodeType":"YulFunctionCall","src":"18742:15:1"},"nodeType":"YulExpressionStatement","src":"18742:15:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"18775:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"18778:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18771:3:1"},"nodeType":"YulFunctionCall","src":"18771:12:1"},{"kind":"number","nodeType":"YulLiteral","src":"18785:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18764:6:1"},"nodeType":"YulFunctionCall","src":"18764:26:1"},"nodeType":"YulExpressionStatement","src":"18764:26:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"18808:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"18811:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18804:3:1"},"nodeType":"YulFunctionCall","src":"18804:12:1"},{"kind":"number","nodeType":"YulLiteral","src":"18818:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18797:6:1"},"nodeType":"YulFunctionCall","src":"18797:26:1"},"nodeType":"YulExpressionStatement","src":"18797:26:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"18932:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"18935:4:1","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18928:3:1"},"nodeType":"YulFunctionCall","src":"18928:12:1"},{"name":"minus_2","nodeType":"YulIdentifier","src":"18942:7:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18921:6:1"},"nodeType":"YulFunctionCall","src":"18921:29:1"},"nodeType":"YulExpressionStatement","src":"18921:29:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"18968:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"18971:4:1","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18964:3:1"},"nodeType":"YulFunctionCall","src":"18964:12:1"},{"name":"p","nodeType":"YulIdentifier","src":"18978:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18957:6:1"},"nodeType":"YulFunctionCall","src":"18957:23:1"},"nodeType":"YulExpressionStatement","src":"18957:23:1"},{"body":{"nodeType":"YulBlock","src":"19107:34:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19128:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19131:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19121:6:1"},"nodeType":"YulFunctionCall","src":"19121:12:1"},"nodeType":"YulExpressionStatement","src":"19121:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19075:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"19071:3:1"},"nodeType":"YulFunctionCall","src":"19071:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"19079:4:1","type":"","value":"0x05"},{"kind":"number","nodeType":"YulLiteral","src":"19085:1:1","type":"","value":"0"},{"name":"T","nodeType":"YulIdentifier","src":"19088:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"19091:4:1","type":"","value":"0xc0"},{"name":"T","nodeType":"YulIdentifier","src":"19097:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"19100:4:1","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"19066:4:1"},"nodeType":"YulFunctionCall","src":"19066:39:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"19059:6:1"},"nodeType":"YulFunctionCall","src":"19059:47:1"},"nodeType":"YulIf","src":"19056:85:1"},{"nodeType":"YulAssignment","src":"19155:12:1","value":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"19165:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19159:5:1"},"nodeType":"YulFunctionCall","src":"19159:8:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"19155:2:1"}]},{"nodeType":"YulAssignment","src":"19174:17:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"19184:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"19186:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"19189:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"19177:6:1"},"nodeType":"YulFunctionCall","src":"19177:14:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"19174:1:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":569,"isOffset":false,"isSlot":false,"src":"15162:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"15171:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"15202:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"15229:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"17043:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"17235:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"17291:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"18510:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"18749:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"18775:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"18808:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"18932:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"18968:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"19088:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"19097:1:1","valueSize":1},{"declaration":569,"isOffset":false,"isSlot":false,"src":"19165:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"15192:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"15544:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"15642:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"15665:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"15805:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"15958:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17307:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17511:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17596:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17622:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17681:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17706:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17878:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"17980:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"18280:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"18296:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"18415:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"19174:1:1","valueSize":1},{"declaration":559,"isOffset":false,"isSlot":false,"src":"19184:1:1","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"15149:11:1","valueSize":1},{"declaration":556,"isOffset":false,"isSlot":false,"src":"17030:11:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"15839:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"17912:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"18353:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"18942:7:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15459:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15510:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15550:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15593:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15648:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15654:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15670:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15673:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15677:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15729:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15770:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15828:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15851:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15854:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15965:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15972:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"15975:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"16105:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"16112:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"16971:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17247:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17252:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17298:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17305:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17310:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17430:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17476:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17517:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17567:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17601:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17628:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17634:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17661:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17686:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17712:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17718:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17744:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17773:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17801:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17843:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17901:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17924:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17927:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17977:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17983:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"17986:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18030:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18047:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18051:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18145:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18175:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18204:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18246:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18287:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18327:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18335:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18341:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18366:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18370:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18413:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18418:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18426:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18443:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18446:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"18978:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"19189:1:1","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"16343:8:1","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"16481:8:1","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"16620:8:1","valueSize":1},{"declaration":552,"isOffset":false,"isSlot":false,"src":"16752:8:1","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"16306:8:1","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"16443:8:1","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"16582:8:1","valueSize":1},{"declaration":554,"isOffset":false,"isSlot":false,"src":"16715:8:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"15259:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"15650:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"15667:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"15751:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"15766:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17295:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17598:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17630:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17683:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17714:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17824:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"17839:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"18187:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"18198:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"18519:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"19155:2:1","valueSize":1},{"declaration":562,"isOffset":false,"isSlot":false,"src":"19186:2:1","valueSize":1}],"id":691,"nodeType":"InlineAssembly","src":"15117:4089:1"}]}]},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_mulmuladd_S8_extcode","nameLocation":"14496:25:1","nodeType":"FunctionDefinition","parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":552,"mutability":"mutable","name":"scalar_u","nameLocation":"14527:8:1","nodeType":"VariableDeclaration","scope":694,"src":"14522:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":551,"name":"uint","nodeType":"ElementaryTypeName","src":"14522:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":554,"mutability":"mutable","name":"scalar_v","nameLocation":"14542:8:1","nodeType":"VariableDeclaration","scope":694,"src":"14537:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":553,"name":"uint","nodeType":"ElementaryTypeName","src":"14537:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"dataPointer","nameLocation":"14560:11:1","nodeType":"VariableDeclaration","scope":694,"src":"14552:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"14552:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14521:51:1"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"X","nameLocation":"14601:1:1","nodeType":"VariableDeclaration","scope":694,"src":"14596:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint","nodeType":"ElementaryTypeName","src":"14596:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14595:20:1"},"scope":1202,"src":"14487:4755:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":837,"nodeType":"Block","src":"19463:3730:1","statements":[{"assignments":[706],"declarations":[{"constant":false,"id":706,"mutability":"mutable","name":"zz","nameLocation":"19476:2:1","nodeType":"VariableDeclaration","scope":837,"src":"19471:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":705,"name":"uint","nodeType":"ElementaryTypeName","src":"19471:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":707,"nodeType":"VariableDeclarationStatement","src":"19471:7:1"},{"assignments":[713],"declarations":[{"constant":false,"id":713,"mutability":"mutable","name":"T","nameLocation":"19546:1:1","nodeType":"VariableDeclaration","scope":837,"src":"19531:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6]"},"typeName":{"baseType":{"id":711,"name":"uint","nodeType":"ElementaryTypeName","src":"19531:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":712,"length":{"hexValue":"36","id":710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19536:1:1","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"nodeType":"ArrayTypeName","src":"19531:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_storage_ptr","typeString":"uint256[6]"}},"visibility":"internal"}],"id":714,"nodeType":"VariableDeclarationStatement","src":"19531:16:1"},{"expression":{"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":715,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19555:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"323536","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19558:3:1","typeDescriptions":{"typeIdentifier":"t_rational_256_by_1","typeString":"int_const 256"},"value":"256"},"src":"19555:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":718,"nodeType":"ExpressionStatement","src":"19555:6:1"},{"id":836,"nodeType":"UncheckedBlock","src":"19589:3583:1","statements":[{"body":{"id":833,"nodeType":"Block","src":"19635:314:1","statements":[{"expression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":724,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19643:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":725,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19646:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19649:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19646:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19643:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":729,"nodeType":"ExpressionStatement","src":"19643:7:1"},{"expression":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":730,"name":"T","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"19698:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":732,"indexExpression":{"hexValue":"30","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19700:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19698:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3634","id":733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19703:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"313238","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19707:3:1","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":735,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"19713:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":736,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19723:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19713:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":738,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19712:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19727:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19712:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19711:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3634","id":743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19730:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":744,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"19735:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":745,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19746:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3634","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19749:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19746:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":748,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19745:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19735:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":750,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19734:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19754:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19734:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":753,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19733:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19730:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:49:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19769:2:1","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":757,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"19774:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":758,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19785:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19788:3:1","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"19785:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":761,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19784:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19774:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":763,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19773:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19794:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19773:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":766,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19772:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19769:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:89:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3136","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19797:2:1","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":770,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"19802:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":771,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19813:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313932","id":772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19816:3:1","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"19813:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":774,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19812:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19802:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":776,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19801:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19822:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19801:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":779,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19800:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19797:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:117:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"38","id":782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19841:1:1","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":783,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"19845:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"id":784,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19855:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19845:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":786,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19844:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19844:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":789,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19843:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19841:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:154:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"34","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19862:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":793,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"19866:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":794,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19877:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3634","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19880:2:1","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"19877:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19876:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19866:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":799,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19865:19:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19885:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19865:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19864:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19862:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:180:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19888:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":806,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"19892:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":807,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19903:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313238","id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19906:3:1","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"19903:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":810,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19902:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19892:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":812,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19891:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19912:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19891:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":815,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19890:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19888:26:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:207:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"19917:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":819,"name":"zz","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"19928:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"313932","id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19931:3:1","typeDescriptions":{"typeIdentifier":"t_rational_192_by_1","typeString":"int_const 192"},"value":"192"},"src":"19928:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":822,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19927:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19917:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":824,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19916:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"31","id":825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19937:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19916:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":827,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19915:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19707:232:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":829,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19706:234:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19703:237:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19698:242:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":832,"nodeType":"ExpressionStatement","src":"19698:242:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":719,"name":"T","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"19620:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$6_memory_ptr","typeString":"uint256[6] memory"}},"id":721,"indexExpression":{"hexValue":"30","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19622:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19620:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19626:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19620:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":834,"nodeType":"WhileStatement","src":"19614:335:1"},{"AST":{"nodeType":"YulBlock","src":"19963:3194:1","statements":[{"expression":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"19985:1:1"},{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"19998:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19992:5:1"},"nodeType":"YulFunctionCall","src":"19992:8:1"},{"name":"dataPointer","nodeType":"YulIdentifier","src":"20002:11:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19988:3:1"},"nodeType":"YulFunctionCall","src":"19988:26:1"},{"kind":"number","nodeType":"YulLiteral","src":"20016:2:1","type":"","value":"64"}],"functionName":{"name":"codecopy","nodeType":"YulIdentifier","src":"19975:8:1"},"nodeType":"YulFunctionCall","src":"19975:44:1"},"nodeType":"YulExpressionStatement","src":"19975:44:1"},{"nodeType":"YulAssignment","src":"20026:12:1","value":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"20036:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20030:5:1"},"nodeType":"YulFunctionCall","src":"20030:8:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"20026:1:1"}]},{"nodeType":"YulVariableDeclaration","src":"20045:24:1","value":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"20063:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"20065:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20059:3:1"},"nodeType":"YulFunctionCall","src":"20059:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"20053:5:1"},"nodeType":"YulFunctionCall","src":"20053:16:1"},"variables":[{"name":"Y","nodeType":"YulTypedName","src":"20049:1:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20076:10:1","value":{"kind":"number","nodeType":"YulLiteral","src":"20085:1:1","type":"","value":"1"},"variables":[{"name":"zzz","nodeType":"YulTypedName","src":"20080:3:1","type":""}]},{"nodeType":"YulAssignment","src":"20093:5:1","value":{"kind":"number","nodeType":"YulLiteral","src":"20097:1:1","type":"","value":"1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"20093:2:1"}]},{"body":{"nodeType":"YulBlock","src":"20256:2177:1","statements":[{"nodeType":"YulVariableDeclaration","src":"20269:23:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20284:1:1","type":"","value":"2"},{"name":"Y","nodeType":"YulIdentifier","src":"20287:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"20290:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20277:6:1"},"nodeType":"YulFunctionCall","src":"20277:15:1"},"variables":[{"name":"T1","nodeType":"YulTypedName","src":"20273:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20318:23:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"20333:2:1"},{"name":"T1","nodeType":"YulIdentifier","src":"20336:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20339:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20326:6:1"},"nodeType":"YulFunctionCall","src":"20326:15:1"},"variables":[{"name":"T2","nodeType":"YulTypedName","src":"20322:2:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"20358:23:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"20373:1:1"},{"name":"T2","nodeType":"YulIdentifier","src":"20376:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20379:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20366:6:1"},"nodeType":"YulFunctionCall","src":"20366:15:1"},"variables":[{"name":"T3","nodeType":"YulTypedName","src":"20362:2:1","type":""}]},{"nodeType":"YulAssignment","src":"20399:20:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"20410:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"20414:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20417:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20403:6:1"},"nodeType":"YulFunctionCall","src":"20403:16:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"20399:2:1"}]},{"nodeType":"YulVariableDeclaration","src":"20434:69:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"20449:1:1","type":"","value":"3"},{"arguments":[{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"20466:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"20472:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"20474:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20468:3:1"},"nodeType":"YulFunctionCall","src":"20468:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"20478:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"20459:6:1"},"nodeType":"YulFunctionCall","src":"20459:21:1"},{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"20489:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"20491:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20494:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"20482:6:1"},"nodeType":"YulFunctionCall","src":"20482:14:1"},{"name":"p","nodeType":"YulIdentifier","src":"20497:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20452:6:1"},"nodeType":"YulFunctionCall","src":"20452:47:1"},{"name":"p","nodeType":"YulIdentifier","src":"20501:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20442:6:1"},"nodeType":"YulFunctionCall","src":"20442:61:1"},"variables":[{"name":"T4","nodeType":"YulTypedName","src":"20438:2:1","type":""}]},{"nodeType":"YulAssignment","src":"20534:21:1","value":{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"20546:2:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"20549:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"20553:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20539:6:1"},"nodeType":"YulFunctionCall","src":"20539:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"20534:3:1"}]},{"nodeType":"YulAssignment","src":"20575:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"20586:2:1"},{"name":"zz","nodeType":"YulIdentifier","src":"20590:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20594:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20579:6:1"},"nodeType":"YulFunctionCall","src":"20579:17:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"20575:2:1"}]},{"nodeType":"YulAssignment","src":"20629:51:1","value":{"arguments":[{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"20646:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"20649:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20652:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20639:6:1"},"nodeType":"YulFunctionCall","src":"20639:15:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"20663:7:1"},{"name":"T3","nodeType":"YulIdentifier","src":"20672:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20675:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20656:6:1"},"nodeType":"YulFunctionCall","src":"20656:21:1"},{"name":"p","nodeType":"YulIdentifier","src":"20678:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"20632:6:1"},"nodeType":"YulFunctionCall","src":"20632:48:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"20629:1:1"}]},{"nodeType":"YulAssignment","src":"20757:40:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"20768:2:1"},{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"20778:1:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"20785:1:1"},{"name":"T3","nodeType":"YulIdentifier","src":"20788:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20781:3:1"},"nodeType":"YulFunctionCall","src":"20781:10:1"},{"name":"p","nodeType":"YulIdentifier","src":"20792:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"20771:6:1"},"nodeType":"YulFunctionCall","src":"20771:23:1"},{"name":"p","nodeType":"YulIdentifier","src":"20795:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20761:6:1"},"nodeType":"YulFunctionCall","src":"20761:36:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"20757:2:1"}]},{"nodeType":"YulAssignment","src":"20899:36:1","value":{"arguments":[{"arguments":[{"name":"T1","nodeType":"YulIdentifier","src":"20917:2:1"},{"name":"Y","nodeType":"YulIdentifier","src":"20921:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"20924:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"20910:6:1"},"nodeType":"YulFunctionCall","src":"20910:16:1"},{"name":"T2","nodeType":"YulIdentifier","src":"20928:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"20931:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"20903:6:1"},"nodeType":"YulFunctionCall","src":"20903:32:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"20899:1:1"}]},{"nodeType":"YulAssignment","src":"21079:85:1","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21093:2:1","type":"","value":"13"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21105:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"21112:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21101:3:1"},"nodeType":"YulFunctionCall","src":"21101:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21122:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21097:3:1"},"nodeType":"YulFunctionCall","src":"21097:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21089:3:1"},"nodeType":"YulFunctionCall","src":"21089:36:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21131:1:1","type":"","value":"9"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21142:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"21149:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21138:3:1"},"nodeType":"YulFunctionCall","src":"21138:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21159:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21134:3:1"},"nodeType":"YulFunctionCall","src":"21134:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21127:3:1"},"nodeType":"YulFunctionCall","src":"21127:35:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21084:3:1"},"nodeType":"YulFunctionCall","src":"21084:80:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"21079:2:1"}]},{"nodeType":"YulAssignment","src":"21171:21:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21182:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"21189:2:1","type":"","value":"64"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21178:3:1"},"nodeType":"YulFunctionCall","src":"21178:14:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"21171:5:1"}]},{"nodeType":"YulAssignment","src":"21199:93:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"21207:2:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21220:2:1","type":"","value":"12"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21232:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"21239:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21228:3:1"},"nodeType":"YulFunctionCall","src":"21228:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21249:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21224:3:1"},"nodeType":"YulFunctionCall","src":"21224:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21216:3:1"},"nodeType":"YulFunctionCall","src":"21216:36:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21258:1:1","type":"","value":"8"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21269:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"21276:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21265:3:1"},"nodeType":"YulFunctionCall","src":"21265:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21286:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21261:3:1"},"nodeType":"YulFunctionCall","src":"21261:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21254:3:1"},"nodeType":"YulFunctionCall","src":"21254:35:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21211:3:1"},"nodeType":"YulFunctionCall","src":"21211:80:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21203:3:1"},"nodeType":"YulFunctionCall","src":"21203:89:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"21199:2:1"}]},{"nodeType":"YulAssignment","src":"21299:21:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21310:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"21317:2:1","type":"","value":"64"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21306:3:1"},"nodeType":"YulFunctionCall","src":"21306:14:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"21299:5:1"}]},{"nodeType":"YulAssignment","src":"21327:92:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"21335:2:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21347:2:1","type":"","value":"11"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21359:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"21366:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21355:3:1"},"nodeType":"YulFunctionCall","src":"21355:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21376:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21351:3:1"},"nodeType":"YulFunctionCall","src":"21351:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21343:3:1"},"nodeType":"YulFunctionCall","src":"21343:36:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21385:1:1","type":"","value":"7"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21396:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"21403:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21392:3:1"},"nodeType":"YulFunctionCall","src":"21392:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21413:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21388:3:1"},"nodeType":"YulFunctionCall","src":"21388:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21381:3:1"},"nodeType":"YulFunctionCall","src":"21381:35:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21338:3:1"},"nodeType":"YulFunctionCall","src":"21338:80:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21331:3:1"},"nodeType":"YulFunctionCall","src":"21331:88:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"21327:2:1"}]},{"nodeType":"YulAssignment","src":"21426:21:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21437:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"21444:2:1","type":"","value":"64"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21433:3:1"},"nodeType":"YulFunctionCall","src":"21433:14:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"21426:5:1"}]},{"nodeType":"YulAssignment","src":"21454:92:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"21462:2:1"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21474:2:1","type":"","value":"10"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21486:5:1"},{"name":"scalar_v","nodeType":"YulIdentifier","src":"21493:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21482:3:1"},"nodeType":"YulFunctionCall","src":"21482:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21503:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21478:3:1"},"nodeType":"YulFunctionCall","src":"21478:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21470:3:1"},"nodeType":"YulFunctionCall","src":"21470:36:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21512:1:1","type":"","value":"6"},{"arguments":[{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"21523:5:1"},{"name":"scalar_u","nodeType":"YulIdentifier","src":"21530:8:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"21519:3:1"},"nodeType":"YulFunctionCall","src":"21519:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21540:1:1","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"21515:3:1"},"nodeType":"YulFunctionCall","src":"21515:27:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"21508:3:1"},"nodeType":"YulFunctionCall","src":"21508:35:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21465:3:1"},"nodeType":"YulFunctionCall","src":"21465:80:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21458:3:1"},"nodeType":"YulFunctionCall","src":"21458:88:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"21454:2:1"}]},{"body":{"nodeType":"YulBlock","src":"21722:59:1","statements":[{"nodeType":"YulAssignment","src":"21735:12:1","value":{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"21742:1:1"},{"name":"Y","nodeType":"YulIdentifier","src":"21745:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21738:3:1"},"nodeType":"YulFunctionCall","src":"21738:9:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"21735:1:1"}]},{"nodeType":"YulContinue","src":"21762:8:1"}]},"condition":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"21719:2:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"21712:6:1"},"nodeType":"YulFunctionCall","src":"21712:10:1"},"nodeType":"YulIf","src":"21709:72:1"},{"nodeType":"YulBlock","src":"21787:632:1","statements":[{"expression":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"21871:1:1"},{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"21878:2:1"},{"name":"dataPointer","nodeType":"YulIdentifier","src":"21882:11:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21874:3:1"},"nodeType":"YulFunctionCall","src":"21874:20:1"},{"kind":"number","nodeType":"YulLiteral","src":"21896:2:1","type":"","value":"64"}],"functionName":{"name":"codecopy","nodeType":"YulIdentifier","src":"21861:8:1"},"nodeType":"YulFunctionCall","src":"21861:38:1"},"nodeType":"YulExpressionStatement","src":"21861:38:1"},{"nodeType":"YulVariableDeclaration","src":"21957:51:1","value":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"21989:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"21991:2:1","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21985:3:1"},"nodeType":"YulFunctionCall","src":"21985:9:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21979:5:1"},"nodeType":"YulFunctionCall","src":"21979:16:1"},{"name":"zzz","nodeType":"YulIdentifier","src":"21997:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"22001:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"21972:6:1"},"nodeType":"YulFunctionCall","src":"21972:31:1"},{"name":"Y","nodeType":"YulIdentifier","src":"22004:1:1"},{"name":"p","nodeType":"YulIdentifier","src":"22006:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"21965:6:1"},"nodeType":"YulFunctionCall","src":"21965:43:1"},"variables":[{"name":"y2","nodeType":"YulTypedName","src":"21961:2:1","type":""}]},{"nodeType":"YulAssignment","src":"22017:45:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22041:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22035:5:1"},"nodeType":"YulFunctionCall","src":"22035:8:1"},{"name":"zz","nodeType":"YulIdentifier","src":"22045:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22048:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22028:6:1"},"nodeType":"YulFunctionCall","src":"22028:22:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"22055:1:1"},{"name":"X","nodeType":"YulIdentifier","src":"22057:1:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22051:3:1"},"nodeType":"YulFunctionCall","src":"22051:8:1"},{"name":"p","nodeType":"YulIdentifier","src":"22060:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"22021:6:1"},"nodeType":"YulFunctionCall","src":"22021:41:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"22017:2:1"}]},{"nodeType":"YulAssignment","src":"22071:21:1","value":{"arguments":[{"name":"T2","nodeType":"YulIdentifier","src":"22082:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"22086:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22090:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22075:6:1"},"nodeType":"YulFunctionCall","src":"22075:17:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"22071:2:1"}]},{"nodeType":"YulAssignment","src":"22099:19:1","value":{"arguments":[{"name":"T4","nodeType":"YulIdentifier","src":"22110:2:1"},{"name":"T2","nodeType":"YulIdentifier","src":"22113:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22116:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22103:6:1"},"nodeType":"YulFunctionCall","src":"22103:15:1"},"variableNames":[{"name":"T1","nodeType":"YulIdentifier","src":"22099:2:1"}]},{"nodeType":"YulAssignment","src":"22125:19:1","value":{"arguments":[{"name":"zz","nodeType":"YulIdentifier","src":"22136:2:1"},{"name":"T4","nodeType":"YulIdentifier","src":"22139:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22142:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22129:6:1"},"nodeType":"YulFunctionCall","src":"22129:15:1"},"variableNames":[{"name":"T2","nodeType":"YulIdentifier","src":"22125:2:1"}]},{"nodeType":"YulAssignment","src":"22159:22:1","value":{"arguments":[{"name":"zzz","nodeType":"YulIdentifier","src":"22172:3:1"},{"name":"T1","nodeType":"YulIdentifier","src":"22176:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22179:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22165:6:1"},"nodeType":"YulFunctionCall","src":"22165:16:1"},"variableNames":[{"name":"zzz","nodeType":"YulIdentifier","src":"22159:3:1"}]},{"nodeType":"YulVariableDeclaration","src":"22200:25:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"22216:1:1"},{"name":"T4","nodeType":"YulIdentifier","src":"22219:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22223:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22209:6:1"},"nodeType":"YulFunctionCall","src":"22209:16:1"},"variables":[{"name":"zz1","nodeType":"YulTypedName","src":"22204:3:1","type":""}]},{"nodeType":"YulAssignment","src":"22232:78:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"y2","nodeType":"YulIdentifier","src":"22257:2:1"},{"name":"y2","nodeType":"YulIdentifier","src":"22260:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22264:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22250:6:1"},"nodeType":"YulFunctionCall","src":"22250:16:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"22272:1:1"},{"name":"T1","nodeType":"YulIdentifier","src":"22274:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22268:3:1"},"nodeType":"YulFunctionCall","src":"22268:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"22278:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"22243:6:1"},"nodeType":"YulFunctionCall","src":"22243:38:1"},{"arguments":[{"name":"minus_2","nodeType":"YulIdentifier","src":"22290:7:1"},{"name":"zz1","nodeType":"YulIdentifier","src":"22299:3:1"},{"name":"p","nodeType":"YulIdentifier","src":"22303:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22283:6:1"},"nodeType":"YulFunctionCall","src":"22283:22:1"},{"name":"p","nodeType":"YulIdentifier","src":"22307:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"22236:6:1"},"nodeType":"YulFunctionCall","src":"22236:74:1"},"variableNames":[{"name":"T4","nodeType":"YulIdentifier","src":"22232:2:1"}]},{"nodeType":"YulAssignment","src":"22317:69:1","value":{"arguments":[{"arguments":[{"arguments":[{"name":"zz1","nodeType":"YulIdentifier","src":"22341:3:1"},{"arguments":[{"name":"p","nodeType":"YulIdentifier","src":"22350:1:1"},{"name":"T4","nodeType":"YulIdentifier","src":"22352:2:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22346:3:1"},"nodeType":"YulFunctionCall","src":"22346:9:1"},{"name":"p","nodeType":"YulIdentifier","src":"22356:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"22334:6:1"},"nodeType":"YulFunctionCall","src":"22334:24:1"},{"name":"y2","nodeType":"YulIdentifier","src":"22360:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22364:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22327:6:1"},"nodeType":"YulFunctionCall","src":"22327:39:1"},{"arguments":[{"name":"Y","nodeType":"YulIdentifier","src":"22375:1:1"},{"name":"T1","nodeType":"YulIdentifier","src":"22378:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"22381:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"22368:6:1"},"nodeType":"YulFunctionCall","src":"22368:15:1"},{"name":"p","nodeType":"YulIdentifier","src":"22384:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"22320:6:1"},"nodeType":"YulFunctionCall","src":"22320:66:1"},"variableNames":[{"name":"Y","nodeType":"YulIdentifier","src":"22317:1:1"}]},{"nodeType":"YulAssignment","src":"22393:6:1","value":{"name":"T2","nodeType":"YulIdentifier","src":"22397:2:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"22393:2:1"}]},{"nodeType":"YulAssignment","src":"22406:5:1","value":{"name":"T4","nodeType":"YulIdentifier","src":"22409:2:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"22406:1:1"}]}]}]},"condition":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"20208:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"20215:3:1","type":"","value":"191"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"20205:2:1"},"nodeType":"YulFunctionCall","src":"20205:14:1"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"20220:28:1","statements":[{"nodeType":"YulAssignment","src":"20222:24:1","value":{"arguments":[{"name":"index","nodeType":"YulIdentifier","src":"20235:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"20242:3:1","type":"","value":"191"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20231:3:1"},"nodeType":"YulFunctionCall","src":"20231:15:1"},"variableNames":[{"name":"index","nodeType":"YulIdentifier","src":"20222:5:1"}]}]},"pre":{"nodeType":"YulBlock","src":"20184:20:1","statements":[{"nodeType":"YulVariableDeclaration","src":"20186:16:1","value":{"kind":"number","nodeType":"YulLiteral","src":"20199:3:1","type":"","value":"254"},"variables":[{"name":"index","nodeType":"YulTypedName","src":"20190:5:1","type":""}]}]},"src":"20180:2253:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22461:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"22464:4:1","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22457:3:1"},"nodeType":"YulFunctionCall","src":"22457:12:1"},{"name":"zz","nodeType":"YulIdentifier","src":"22470:2:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22450:6:1"},"nodeType":"YulFunctionCall","src":"22450:23:1"},"nodeType":"YulExpressionStatement","src":"22450:23:1"},{"expression":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22700:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"22703:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22693:6:1"},"nodeType":"YulFunctionCall","src":"22693:15:1"},"nodeType":"YulExpressionStatement","src":"22693:15:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22726:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"22729:4:1","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22722:3:1"},"nodeType":"YulFunctionCall","src":"22722:12:1"},{"kind":"number","nodeType":"YulLiteral","src":"22736:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22715:6:1"},"nodeType":"YulFunctionCall","src":"22715:26:1"},"nodeType":"YulExpressionStatement","src":"22715:26:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22759:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"22762:4:1","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22755:3:1"},"nodeType":"YulFunctionCall","src":"22755:12:1"},{"kind":"number","nodeType":"YulLiteral","src":"22769:4:1","type":"","value":"0x20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22748:6:1"},"nodeType":"YulFunctionCall","src":"22748:26:1"},"nodeType":"YulExpressionStatement","src":"22748:26:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22883:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"22886:4:1","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22879:3:1"},"nodeType":"YulFunctionCall","src":"22879:12:1"},{"name":"minus_2","nodeType":"YulIdentifier","src":"22893:7:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22872:6:1"},"nodeType":"YulFunctionCall","src":"22872:29:1"},"nodeType":"YulExpressionStatement","src":"22872:29:1"},{"expression":{"arguments":[{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"22919:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"22922:4:1","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22915:3:1"},"nodeType":"YulFunctionCall","src":"22915:12:1"},{"name":"p","nodeType":"YulIdentifier","src":"22929:1:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22908:6:1"},"nodeType":"YulFunctionCall","src":"22908:23:1"},"nodeType":"YulExpressionStatement","src":"22908:23:1"},{"body":{"nodeType":"YulBlock","src":"23058:34:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23079:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"23082:1:1","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"23072:6:1"},"nodeType":"YulFunctionCall","src":"23072:12:1"},"nodeType":"YulExpressionStatement","src":"23072:12:1"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"23026:1:1","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"23022:3:1"},"nodeType":"YulFunctionCall","src":"23022:6:1"},{"kind":"number","nodeType":"YulLiteral","src":"23030:4:1","type":"","value":"0x05"},{"kind":"number","nodeType":"YulLiteral","src":"23036:1:1","type":"","value":"0"},{"name":"T","nodeType":"YulIdentifier","src":"23039:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"23042:4:1","type":"","value":"0xc0"},{"name":"T","nodeType":"YulIdentifier","src":"23048:1:1"},{"kind":"number","nodeType":"YulLiteral","src":"23051:4:1","type":"","value":"0x20"}],"functionName":{"name":"call","nodeType":"YulIdentifier","src":"23017:4:1"},"nodeType":"YulFunctionCall","src":"23017:39:1"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"23010:6:1"},"nodeType":"YulFunctionCall","src":"23010:47:1"},"nodeType":"YulIf","src":"23007:85:1"},{"nodeType":"YulAssignment","src":"23106:12:1","value":{"arguments":[{"name":"T","nodeType":"YulIdentifier","src":"23116:1:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23110:5:1"},"nodeType":"YulFunctionCall","src":"23110:8:1"},"variableNames":[{"name":"zz","nodeType":"YulIdentifier","src":"23106:2:1"}]},{"nodeType":"YulAssignment","src":"23125:17:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"23135:1:1"},{"name":"zz","nodeType":"YulIdentifier","src":"23137:2:1"},{"name":"p","nodeType":"YulIdentifier","src":"23140:1:1"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"23128:6:1"},"nodeType":"YulFunctionCall","src":"23128:14:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"23125:1:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":713,"isOffset":false,"isSlot":false,"src":"19985:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"19998:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"20036:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"20063:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"21871:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"21989:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22041:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22461:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22700:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22726:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22759:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22883:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"22919:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"23039:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"23048:1:1","valueSize":1},{"declaration":713,"isOffset":false,"isSlot":false,"src":"23116:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20026:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20373:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20466:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20489:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20629:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"20778:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"22057:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"22216:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"22406:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"23125:1:1","valueSize":1},{"declaration":703,"isOffset":false,"isSlot":false,"src":"23135:1:1","valueSize":1},{"declaration":700,"isOffset":false,"isSlot":false,"src":"20002:11:1","valueSize":1},{"declaration":700,"isOffset":false,"isSlot":false,"src":"21882:11:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"20663:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"22290:7:1","valueSize":1},{"declaration":71,"isOffset":false,"isSlot":false,"src":"22893:7:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20290:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20339:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20379:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20417:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20472:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20478:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20494:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20497:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20501:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20553:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20594:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20652:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20675:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20678:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20785:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20792:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20795:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20924:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"20931:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"21742:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22001:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22006:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22048:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22055:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22060:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22090:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22116:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22142:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22179:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22223:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22264:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22272:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22278:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22303:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22307:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22350:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22356:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22364:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22381:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22384:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"22929:1:1","valueSize":1},{"declaration":53,"isOffset":false,"isSlot":false,"src":"23140:1:1","valueSize":1},{"declaration":696,"isOffset":false,"isSlot":false,"src":"21149:8:1","valueSize":1},{"declaration":696,"isOffset":false,"isSlot":false,"src":"21276:8:1","valueSize":1},{"declaration":696,"isOffset":false,"isSlot":false,"src":"21403:8:1","valueSize":1},{"declaration":696,"isOffset":false,"isSlot":false,"src":"21530:8:1","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"21112:8:1","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"21239:8:1","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"21366:8:1","valueSize":1},{"declaration":698,"isOffset":false,"isSlot":false,"src":"21493:8:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"20093:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"20474:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"20491:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"20575:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"20590:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"22045:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"22136:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"22393:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"22470:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"23106:2:1","valueSize":1},{"declaration":706,"isOffset":false,"isSlot":false,"src":"23137:2:1","valueSize":1}],"id":835,"nodeType":"InlineAssembly","src":"19955:3202:1"}]}]},"id":838,"implemented":true,"kind":"function","modifiers":[],"name":"ecZZ_mulmuladd_S8_hackmem","nameLocation":"19342:25:1","nodeType":"FunctionDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"mutability":"mutable","name":"scalar_u","nameLocation":"19373:8:1","nodeType":"VariableDeclaration","scope":838,"src":"19368:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":695,"name":"uint","nodeType":"ElementaryTypeName","src":"19368:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":698,"mutability":"mutable","name":"scalar_v","nameLocation":"19388:8:1","nodeType":"VariableDeclaration","scope":838,"src":"19383:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":697,"name":"uint","nodeType":"ElementaryTypeName","src":"19383:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":700,"mutability":"mutable","name":"dataPointer","nameLocation":"19403:11:1","nodeType":"VariableDeclaration","scope":838,"src":"19398:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint","nodeType":"ElementaryTypeName","src":"19398:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19367:48:1"},"returnParameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"X","nameLocation":"19444:1:1","nodeType":"VariableDeclaration","scope":838,"src":"19439:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":702,"name":"uint","nodeType":"ElementaryTypeName","src":"19439:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19438:20:1"},"scope":1202,"src":"19333:3860:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":945,"nodeType":"Block","src":"23338:564:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":853,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"23352:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":855,"indexExpression":{"hexValue":"30","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23355:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23352:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23361:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23352:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":858,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"23366:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":860,"indexExpression":{"hexValue":"30","id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23369:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23366:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":861,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"23375:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23366:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"23352:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":864,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"23380:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":866,"indexExpression":{"hexValue":"31","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23383:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23380:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23389:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23380:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"23352:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":870,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"23392:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":872,"indexExpression":{"hexValue":"31","id":871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23395:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23392:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":873,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"23399:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23392:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"23352:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":879,"nodeType":"IfStatement","src":"23348:91:1","trueBody":{"id":878,"nodeType":"Block","src":"23402:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"23423:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":852,"id":877,"nodeType":"Return","src":"23416:12:1"}]}},{"condition":{"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"23470:28:1","subExpression":{"arguments":[{"baseExpression":{"id":881,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"23487:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":883,"indexExpression":{"hexValue":"30","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23489:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23487:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":884,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"23493:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":886,"indexExpression":{"hexValue":"31","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23495:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23493:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":880,"name":"ecAff_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"23471:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256) pure returns (bool)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23471:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":892,"nodeType":"IfStatement","src":"23466:71:1","trueBody":{"id":891,"nodeType":"Block","src":"23500:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"23521:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":852,"id":890,"nodeType":"Return","src":"23514:12:1"}]}},{"assignments":[894],"declarations":[{"constant":false,"id":894,"mutability":"mutable","name":"sInv","nameLocation":"23555:4:1","nodeType":"VariableDeclaration","scope":945,"src":"23550:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":893,"name":"uint","nodeType":"ElementaryTypeName","src":"23550:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":902,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":896,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"23574:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":897,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"23576:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":899,"indexExpression":{"hexValue":"31","id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23579:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23576:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23574:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":895,"name":"FCL_nModInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"23562:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23562:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23550:32:1"},{"assignments":[904],"declarations":[{"constant":false,"id":904,"mutability":"mutable","name":"scalar_u","nameLocation":"23606:8:1","nodeType":"VariableDeclaration","scope":945,"src":"23601:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":903,"name":"uint","nodeType":"ElementaryTypeName","src":"23601:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":913,"initialValue":{"arguments":[{"arguments":[{"id":908,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":840,"src":"23627:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23622:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":906,"name":"uint","nodeType":"ElementaryTypeName","src":"23622:4:1","typeDescriptions":{}}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23622:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":910,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"23637:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":911,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"23643:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":905,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"23615:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23615:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23601:44:1"},{"assignments":[915],"declarations":[{"constant":false,"id":915,"mutability":"mutable","name":"scalar_v","nameLocation":"23660:8:1","nodeType":"VariableDeclaration","scope":945,"src":"23655:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":914,"name":"uint","nodeType":"ElementaryTypeName","src":"23655:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":923,"initialValue":{"arguments":[{"baseExpression":{"id":917,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":844,"src":"23677:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":919,"indexExpression":{"hexValue":"30","id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23680:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23677:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":920,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"23684:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":921,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"23690:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":916,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"23670:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23670:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23655:37:1"},{"assignments":[925],"declarations":[{"constant":false,"id":925,"mutability":"mutable","name":"x1","nameLocation":"23707:2:1","nodeType":"VariableDeclaration","scope":945,"src":"23702:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint","nodeType":"ElementaryTypeName","src":"23702:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":926,"nodeType":"VariableDeclarationStatement","src":"23702:7:1"},{"expression":{"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":927,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"23720:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":929,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"23744:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":931,"indexExpression":{"hexValue":"30","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23746:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23744:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":932,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"23750:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},"id":934,"indexExpression":{"hexValue":"31","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23752:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23750:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":935,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"23755:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":936,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"23765:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":928,"name":"ecZZ_mulmuladd_S_asm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"23723:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) view returns (uint256)"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23723:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23720:54:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":939,"nodeType":"ExpressionStatement","src":"23720:54:1"},{"AST":{"nodeType":"YulBlock","src":"23801:41:1","statements":[{"nodeType":"YulAssignment","src":"23805:34:1","value":{"arguments":[{"name":"x1","nodeType":"YulIdentifier","src":"23816:2:1"},{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"23823:1:1"},{"arguments":[{"name":"rs","nodeType":"YulIdentifier","src":"23831:2:1"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23825:5:1"},"nodeType":"YulFunctionCall","src":"23825:9:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23819:3:1"},"nodeType":"YulFunctionCall","src":"23819:16:1"},{"name":"n","nodeType":"YulIdentifier","src":"23837:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"23809:6:1"},"nodeType":"YulFunctionCall","src":"23809:30:1"},"variableNames":[{"name":"x1","nodeType":"YulIdentifier","src":"23805:2:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":68,"isOffset":false,"isSlot":false,"src":"23823:1:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"23837:1:1","valueSize":1},{"declaration":844,"isOffset":false,"isSlot":false,"src":"23831:2:1","valueSize":1},{"declaration":925,"isOffset":false,"isSlot":false,"src":"23805:2:1","valueSize":1},{"declaration":925,"isOffset":false,"isSlot":false,"src":"23816:2:1","valueSize":1}],"id":940,"nodeType":"InlineAssembly","src":"23793:49:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":941,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"23876:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23882:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23876:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":852,"id":944,"nodeType":"Return","src":"23869:14:1"}]},"id":946,"implemented":true,"kind":"function","modifiers":[],"name":"ecdsa_verify_mem","nameLocation":"23208:16:1","nodeType":"FunctionDefinition","parameters":{"id":849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":840,"mutability":"mutable","name":"message","nameLocation":"23242:7:1","nodeType":"VariableDeclaration","scope":946,"src":"23234:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":839,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23234:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":844,"mutability":"mutable","name":"rs","nameLocation":"23274:2:1","nodeType":"VariableDeclaration","scope":946,"src":"23259:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":841,"name":"uint","nodeType":"ElementaryTypeName","src":"23259:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":843,"length":{"hexValue":"32","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23264:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23259:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":848,"mutability":"mutable","name":"Q","nameLocation":"23301:1:1","nodeType":"VariableDeclaration","scope":946,"src":"23286:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":845,"name":"uint","nodeType":"ElementaryTypeName","src":"23286:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":847,"length":{"hexValue":"32","id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23291:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"23286:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"23224:84:1"},"returnParameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":946,"src":"23332:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":850,"name":"bool","nodeType":"ElementaryTypeName","src":"23332:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"23331:6:1"},"scope":1202,"src":"23199:703:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1054,"nodeType":"Block","src":"24142:580:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":962,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"24156:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":964,"indexExpression":{"hexValue":"30","id":963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24159:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24156:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24165:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24156:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":967,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"24170:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":969,"indexExpression":{"hexValue":"30","id":968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24173:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24170:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":970,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"24179:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24170:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24156:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":973,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"24184:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":975,"indexExpression":{"hexValue":"31","id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24187:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24184:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24193:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24184:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24156:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":979,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"24196:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":981,"indexExpression":{"hexValue":"31","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24199:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24196:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":982,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"24203:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24196:8:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24156:48:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":988,"nodeType":"IfStatement","src":"24152:91:1","trueBody":{"id":987,"nodeType":"Block","src":"24206:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"24227:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":961,"id":986,"nodeType":"Return","src":"24220:12:1"}]}},{"condition":{"id":997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24274:28:1","subExpression":{"arguments":[{"baseExpression":{"id":990,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"24291:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":992,"indexExpression":{"hexValue":"30","id":991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24293:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24291:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":993,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"24297:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":995,"indexExpression":{"hexValue":"31","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24299:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24297:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":989,"name":"ecAff_isOnCurve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"24275:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256,uint256) pure returns (bool)"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24275:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1001,"nodeType":"IfStatement","src":"24270:71:1","trueBody":{"id":1000,"nodeType":"Block","src":"24304:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"24325:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":961,"id":999,"nodeType":"Return","src":"24318:12:1"}]}},{"assignments":[1003],"declarations":[{"constant":false,"id":1003,"mutability":"mutable","name":"sInv","nameLocation":"24359:4:1","nodeType":"VariableDeclaration","scope":1054,"src":"24354:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1002,"name":"uint","nodeType":"ElementaryTypeName","src":"24354:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1011,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1005,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"24378:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":1006,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"24380:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1008,"indexExpression":{"hexValue":"31","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24383:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24380:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24378:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1004,"name":"FCL_nModInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"24366:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24366:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24354:32:1"},{"assignments":[1013],"declarations":[{"constant":false,"id":1013,"mutability":"mutable","name":"scalar_u","nameLocation":"24410:8:1","nodeType":"VariableDeclaration","scope":1054,"src":"24405:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1012,"name":"uint","nodeType":"ElementaryTypeName","src":"24405:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1022,"initialValue":{"arguments":[{"arguments":[{"id":1017,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":949,"src":"24431:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24426:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1015,"name":"uint","nodeType":"ElementaryTypeName","src":"24426:4:1","typeDescriptions":{}}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24426:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1019,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"24441:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1020,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"24447:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1014,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"24419:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24419:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24405:44:1"},{"assignments":[1024],"declarations":[{"constant":false,"id":1024,"mutability":"mutable","name":"scalar_v","nameLocation":"24464:8:1","nodeType":"VariableDeclaration","scope":1054,"src":"24459:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1023,"name":"uint","nodeType":"ElementaryTypeName","src":"24459:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1032,"initialValue":{"arguments":[{"baseExpression":{"id":1026,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":953,"src":"24481:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1028,"indexExpression":{"hexValue":"30","id":1027,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24484:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24481:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1029,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"24488:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1030,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"24494:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1025,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"24474:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24474:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24459:37:1"},{"assignments":[1034],"declarations":[{"constant":false,"id":1034,"mutability":"mutable","name":"x1","nameLocation":"24511:2:1","nodeType":"VariableDeclaration","scope":1054,"src":"24506:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1033,"name":"uint","nodeType":"ElementaryTypeName","src":"24506:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1035,"nodeType":"VariableDeclarationStatement","src":"24506:7:1"},{"expression":{"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1036,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"24524:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":1038,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"24548:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1040,"indexExpression":{"hexValue":"30","id":1039,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24550:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24548:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1041,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"24554:1:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1043,"indexExpression":{"hexValue":"31","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24556:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24554:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1044,"name":"scalar_u","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"24559:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1045,"name":"scalar_v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"24569:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1037,"name":"ecZZ_mulmuladd_S_asm","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"24527:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) view returns (uint256)"}},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24527:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24524:54:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1048,"nodeType":"ExpressionStatement","src":"24524:54:1"},{"AST":{"nodeType":"YulBlock","src":"24614:48:1","statements":[{"nodeType":"YulAssignment","src":"24618:41:1","value":{"arguments":[{"name":"x1","nodeType":"YulIdentifier","src":"24629:2:1"},{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"24636:1:1"},{"arguments":[{"name":"rs","nodeType":"YulIdentifier","src":"24651:2:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"24638:12:1"},"nodeType":"YulFunctionCall","src":"24638:16:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24632:3:1"},"nodeType":"YulFunctionCall","src":"24632:23:1"},{"name":"n","nodeType":"YulIdentifier","src":"24657:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"24622:6:1"},"nodeType":"YulFunctionCall","src":"24622:37:1"},"variableNames":[{"name":"x1","nodeType":"YulIdentifier","src":"24618:2:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":68,"isOffset":false,"isSlot":false,"src":"24636:1:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"24657:1:1","valueSize":1},{"declaration":953,"isOffset":false,"isSlot":false,"src":"24651:2:1","valueSize":1},{"declaration":1034,"isOffset":false,"isSlot":false,"src":"24618:2:1","valueSize":1},{"declaration":1034,"isOffset":false,"isSlot":false,"src":"24629:2:1","valueSize":1}],"id":1049,"nodeType":"InlineAssembly","src":"24606:56:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1050,"name":"x1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"24696:2:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24702:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24696:7:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":961,"id":1053,"nodeType":"Return","src":"24689:14:1"}]},"documentation":{"id":947,"nodeType":"StructuredDocumentation","src":"23924:78:1","text":" @dev ECDSA verification, given , signature, and public key."},"id":1055,"implemented":true,"kind":"function","modifiers":[],"name":"ecdsa_verify","nameLocation":"24016:12:1","nodeType":"FunctionDefinition","parameters":{"id":958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":949,"mutability":"mutable","name":"message","nameLocation":"24046:7:1","nodeType":"VariableDeclaration","scope":1055,"src":"24038:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"24038:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":953,"mutability":"mutable","name":"rs","nameLocation":"24080:2:1","nodeType":"VariableDeclaration","scope":1055,"src":"24063:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":950,"name":"uint","nodeType":"ElementaryTypeName","src":"24063:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":952,"length":{"hexValue":"32","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24068:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24063:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":957,"mutability":"mutable","name":"Q","nameLocation":"24109:1:1","nodeType":"VariableDeclaration","scope":1055,"src":"24092:18:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":954,"name":"uint","nodeType":"ElementaryTypeName","src":"24092:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":956,"length":{"hexValue":"32","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24097:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"24092:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"24028:88:1"},"returnParameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1055,"src":"24136:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":959,"name":"bool","nodeType":"ElementaryTypeName","src":"24136:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"24135:6:1"},"scope":1202,"src":"24007:715:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1127,"nodeType":"Block","src":"25171:568:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1069,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"25182:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1071,"indexExpression":{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25185:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25182:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25191:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25182:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1074,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"25196:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1076,"indexExpression":{"hexValue":"30","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25199:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25196:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1077,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"25205:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25196:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25182:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1080,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"25210:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1082,"indexExpression":{"hexValue":"31","id":1081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25213:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25210:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25219:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25210:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25182:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1089,"nodeType":"IfStatement","src":"25178:81:1","trueBody":{"id":1088,"nodeType":"Block","src":"25222:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":1086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"25243:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1068,"id":1087,"nodeType":"Return","src":"25236:12:1"}]}},{"assignments":[1091],"declarations":[{"constant":false,"id":1091,"mutability":"mutable","name":"sInv","nameLocation":"25415:4:1","nodeType":"VariableDeclaration","scope":1127,"src":"25410:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint","nodeType":"ElementaryTypeName","src":"25410:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1097,"initialValue":{"arguments":[{"baseExpression":{"id":1093,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"25433:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1095,"indexExpression":{"hexValue":"31","id":1094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25436:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25433:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1092,"name":"FCL_nModInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"25421:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25421:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25410:29:1"},{"assignments":[1099],"declarations":[{"constant":false,"id":1099,"mutability":"mutable","name":"X","nameLocation":"25483:1:1","nodeType":"VariableDeclaration","scope":1127,"src":"25478:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1098,"name":"uint","nodeType":"ElementaryTypeName","src":"25478:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1100,"nodeType":"VariableDeclarationStatement","src":"25478:6:1"},{"expression":{"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1101,"name":"X","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"25534:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":1106,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"25574:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1105,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25569:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1104,"name":"uint","nodeType":"ElementaryTypeName","src":"25569:4:1","typeDescriptions":{}}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25569:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1108,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"25584:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1109,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"25590:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1103,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"25562:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25562:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"baseExpression":{"id":1112,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1062,"src":"25601:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1114,"indexExpression":{"hexValue":"30","id":1113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25604:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25601:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1115,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1091,"src":"25608:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1116,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"25614:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1111,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"25594:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25594:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1118,"name":"Shamir8","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"25618:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1102,"name":"ecZZ_mulmuladd_S8_extcode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":694,"src":"25536:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (uint256,uint256,address) returns (uint256)"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25536:90:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25534:92:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1121,"nodeType":"ExpressionStatement","src":"25534:92:1"},{"AST":{"nodeType":"YulBlock","src":"25644:48:1","statements":[{"nodeType":"YulAssignment","src":"25650:39:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"25660:1:1"},{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"25666:1:1"},{"arguments":[{"name":"rs","nodeType":"YulIdentifier","src":"25681:2:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"25668:12:1"},"nodeType":"YulFunctionCall","src":"25668:16:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25662:3:1"},"nodeType":"YulFunctionCall","src":"25662:23:1"},{"name":"n","nodeType":"YulIdentifier","src":"25687:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"25653:6:1"},"nodeType":"YulFunctionCall","src":"25653:36:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"25650:1:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1099,"isOffset":false,"isSlot":false,"src":"25650:1:1","valueSize":1},{"declaration":1099,"isOffset":false,"isSlot":false,"src":"25660:1:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"25666:1:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"25687:1:1","valueSize":1},{"declaration":1062,"isOffset":false,"isSlot":false,"src":"25681:2:1","valueSize":1}],"id":1122,"nodeType":"InlineAssembly","src":"25636:56:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1123,"name":"X","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"25713:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25718:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25713:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1068,"id":1126,"nodeType":"Return","src":"25706:13:1"}]},"documentation":{"id":1056,"nodeType":"StructuredDocumentation","src":"24735:276:1","text":" @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\ngeneration of contract bytecode for precomputations is done using sagemath code \n(see sage directory, WebAuthn_precompute.sage)"},"id":1128,"implemented":true,"kind":"function","modifiers":[],"name":"ecdsa_precomputed_verify","nameLocation":"25036:24:1","nodeType":"FunctionDefinition","parameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1058,"mutability":"mutable","name":"message","nameLocation":"25078:7:1","nodeType":"VariableDeclaration","scope":1128,"src":"25070:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"25070:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1062,"mutability":"mutable","name":"rs","nameLocation":"25112:2:1","nodeType":"VariableDeclaration","scope":1128,"src":"25095:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1059,"name":"uint","nodeType":"ElementaryTypeName","src":"25095:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1061,"length":{"hexValue":"32","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25100:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"25095:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1064,"mutability":"mutable","name":"Shamir8","nameLocation":"25132:7:1","nodeType":"VariableDeclaration","scope":1128,"src":"25124:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1063,"name":"address","nodeType":"ElementaryTypeName","src":"25124:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"25060:85:1"},"returnParameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1128,"src":"25165:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1066,"name":"bool","nodeType":"ElementaryTypeName","src":"25165:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"25164:6:1"},"scope":1202,"src":"25027:712:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1200,"nodeType":"Block","src":"26251:535:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1142,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"26262:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1144,"indexExpression":{"hexValue":"30","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26265:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26262:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26271:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26262:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1147,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"26276:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1149,"indexExpression":{"hexValue":"30","id":1148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26279:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26276:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1150,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"26285:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26276:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26262:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1153,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"26290:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1155,"indexExpression":{"hexValue":"31","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26293:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26290:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26299:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26290:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26262:38:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1162,"nodeType":"IfStatement","src":"26258:81:1","trueBody":{"id":1161,"nodeType":"Block","src":"26302:37:1","statements":[{"expression":{"hexValue":"66616c7365","id":1159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"26323:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1141,"id":1160,"nodeType":"Return","src":"26316:12:1"}]}},{"assignments":[1164],"declarations":[{"constant":false,"id":1164,"mutability":"mutable","name":"sInv","nameLocation":"26496:4:1","nodeType":"VariableDeclaration","scope":1200,"src":"26491:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1163,"name":"uint","nodeType":"ElementaryTypeName","src":"26491:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1170,"initialValue":{"arguments":[{"baseExpression":{"id":1166,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"26514:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1168,"indexExpression":{"hexValue":"31","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26517:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26514:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1165,"name":"FCL_nModInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"26502:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26502:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26491:29:1"},{"assignments":[1172],"declarations":[{"constant":false,"id":1172,"mutability":"mutable","name":"X","nameLocation":"26533:1:1","nodeType":"VariableDeclaration","scope":1200,"src":"26528:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1171,"name":"uint","nodeType":"ElementaryTypeName","src":"26528:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1173,"nodeType":"VariableDeclarationStatement","src":"26528:6:1"},{"expression":{"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1174,"name":"X","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"26584:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":1179,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"26624:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26619:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1177,"name":"uint","nodeType":"ElementaryTypeName","src":"26619:4:1","typeDescriptions":{}}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26619:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1181,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"26634:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1182,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"26640:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1176,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"26612:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26612:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"baseExpression":{"id":1185,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"26651:2:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2] calldata"}},"id":1187,"indexExpression":{"hexValue":"30","id":1186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26654:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26651:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1188,"name":"sInv","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"26658:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1189,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"26664:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1184,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"26644:6:1","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26644:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1191,"name":"endcontract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"26668:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1175,"name":"ecZZ_mulmuladd_S8_hackmem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"26586:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) returns (uint256)"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26586:94:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26584:96:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1194,"nodeType":"ExpressionStatement","src":"26584:96:1"},{"AST":{"nodeType":"YulBlock","src":"26698:46:1","statements":[{"nodeType":"YulAssignment","src":"26702:39:1","value":{"arguments":[{"name":"X","nodeType":"YulIdentifier","src":"26712:1:1"},{"arguments":[{"name":"n","nodeType":"YulIdentifier","src":"26718:1:1"},{"arguments":[{"name":"rs","nodeType":"YulIdentifier","src":"26733:2:1"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"26720:12:1"},"nodeType":"YulFunctionCall","src":"26720:16:1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26714:3:1"},"nodeType":"YulFunctionCall","src":"26714:23:1"},{"name":"n","nodeType":"YulIdentifier","src":"26739:1:1"}],"functionName":{"name":"addmod","nodeType":"YulIdentifier","src":"26705:6:1"},"nodeType":"YulFunctionCall","src":"26705:36:1"},"variableNames":[{"name":"X","nodeType":"YulIdentifier","src":"26702:1:1"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1172,"isOffset":false,"isSlot":false,"src":"26702:1:1","valueSize":1},{"declaration":1172,"isOffset":false,"isSlot":false,"src":"26712:1:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"26718:1:1","valueSize":1},{"declaration":68,"isOffset":false,"isSlot":false,"src":"26739:1:1","valueSize":1},{"declaration":1135,"isOffset":false,"isSlot":false,"src":"26733:2:1","valueSize":1}],"id":1195,"nodeType":"InlineAssembly","src":"26690:54:1"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1196,"name":"X","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"26760:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26765:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26760:6:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1141,"id":1199,"nodeType":"Return","src":"26753:13:1"}]},"documentation":{"id":1129,"nodeType":"StructuredDocumentation","src":"25797:289:1","text":" @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\ngeneration of contract bytecode for precomputations is done using sagemath code \n(see sage directory, WebAuthn_precompute.sage)"},"id":1201,"implemented":true,"kind":"function","modifiers":[],"name":"ecdsa_precomputed_hackmem","nameLocation":"26111:25:1","nodeType":"FunctionDefinition","parameters":{"id":1138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"message","nameLocation":"26154:7:1","nodeType":"VariableDeclaration","scope":1201,"src":"26146:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"26146:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1135,"mutability":"mutable","name":"rs","nameLocation":"26188:2:1","nodeType":"VariableDeclaration","scope":1201,"src":"26171:19:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_calldata_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1132,"name":"uint","nodeType":"ElementaryTypeName","src":"26171:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1134,"length":{"hexValue":"32","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26176:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"26171:7:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1137,"mutability":"mutable","name":"endcontract","nameLocation":"26208:11:1","nodeType":"VariableDeclaration","scope":1201,"src":"26200:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"26200:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26136:89:1"},"returnParameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1201,"src":"26245:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1139,"name":"bool","nodeType":"ElementaryTypeName","src":"26245:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"26244:6:1"},"scope":1202,"src":"26102:684:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1203,"src":"1330:25491:1","usedErrors":[]}],"src":"1269:25560:1"},"id":1},"contracts/P256Signer.sol":{"ast":{"absolutePath":"contracts/P256Signer.sol","exportedSymbols":{"P256Signer":[1369],"Webauthn":[1652]},"id":1370,"nodeType":"SourceUnit","nodes":[{"id":1204,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"0:23:2"},{"absolutePath":"contracts/Webauthn.sol","file":"./Webauthn.sol","id":1206,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1370,"sourceUnit":1653,"src":"25:40:2","symbolAliases":[{"foreign":{"id":1205,"name":"Webauthn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"33:8:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"P256Signer","contractDependencies":[],"contractKind":"contract","documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"67:242:2","text":"@title P256Signer\n @notice A contract used to verify ECDSA signatures over secp256r1 through\n         EIP-1271 of Webauthn payloads.\n @dev This contract is the implementation. It is meant to be used through\n      proxy clone."},"fullyImplemented":true,"id":1369,"linearizedBaseContracts":[1369],"name":"P256Signer","nameLocation":"318:10:2","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"335:36:2","text":"@notice The EIP-1271 magic value"},"id":1211,"mutability":"constant","name":"EIP1271_MAGICVALUE","nameLocation":"401:18:2","nodeType":"VariableDeclaration","scope":1369,"src":"376:56:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1209,"name":"bytes4","nodeType":"ElementaryTypeName","src":"376:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783136323662613765","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:10:2","typeDescriptions":{"typeIdentifier":"t_rational_371636862_by_1","typeString":"int_const 371636862"},"value":"0x1626ba7e"},"visibility":"internal"},{"constant":true,"documentation":{"id":1212,"nodeType":"StructuredDocumentation","src":"439:40:2","text":"@notice The old EIP-1271 magic value"},"id":1215,"mutability":"constant","name":"OLD_EIP1271_MAGICVALUE","nameLocation":"509:22:2","nodeType":"VariableDeclaration","scope":1369,"src":"484:60:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1213,"name":"bytes4","nodeType":"ElementaryTypeName","src":"484:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30783230633133623062","id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"534:10:2","typeDescriptions":{"typeIdentifier":"t_rational_549534475_by_1","typeString":"int_const 549534475"},"value":"0x20c13b0b"},"visibility":"internal"},{"constant":false,"documentation":{"id":1216,"nodeType":"StructuredDocumentation","src":"551:53:2","text":"@notice Whether the contract has been initialized"},"functionSelector":"158ef93e","id":1218,"mutability":"mutable","name":"initialized","nameLocation":"621:11:2","nodeType":"VariableDeclaration","scope":1369,"src":"609:23:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1217,"name":"bool","nodeType":"ElementaryTypeName","src":"609:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"public"},{"constant":false,"documentation":{"id":1219,"nodeType":"StructuredDocumentation","src":"639:56:2","text":"@notice The x coordinate of the secp256r1 public key"},"functionSelector":"0c55699c","id":1221,"mutability":"mutable","name":"x","nameLocation":"715:1:2","nodeType":"VariableDeclaration","scope":1369,"src":"700:16:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1220,"name":"uint256","nodeType":"ElementaryTypeName","src":"700:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1222,"nodeType":"StructuredDocumentation","src":"723:56:2","text":"@notice The y coordinate of the secp256r1 public key"},"functionSelector":"a56dfe4a","id":1224,"mutability":"mutable","name":"y","nameLocation":"799:1:2","nodeType":"VariableDeclaration","scope":1369,"src":"784:16:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"documentation":{"id":1225,"nodeType":"StructuredDocumentation","src":"807:55:2","text":"@notice Error message when the signature is invalid"},"errorSelector":"8baa579f","id":1227,"name":"InvalidSignature","nameLocation":"873:16:2","nodeType":"ErrorDefinition","parameters":{"id":1226,"nodeType":"ParameterList","parameters":[],"src":"889:2:2"},"src":"867:25:2"},{"documentation":{"id":1228,"nodeType":"StructuredDocumentation","src":"898:50:2","text":"@notice Error message when the hash is invalid"},"errorSelector":"0af806e0","id":1230,"name":"InvalidHash","nameLocation":"959:11:2","nodeType":"ErrorDefinition","parameters":{"id":1229,"nodeType":"ParameterList","parameters":[],"src":"970:2:2"},"src":"953:20:2"},{"documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"979:66:2","text":"@notice Error message when the contract is already initialized"},"errorSelector":"0dc149f0","id":1233,"name":"AlreadyInitialized","nameLocation":"1056:18:2","nodeType":"ErrorDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[],"src":"1074:2:2"},"src":"1050:27:2"},{"body":{"id":1240,"nodeType":"Block","src":"1097:35:2","statements":[{"expression":{"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1236,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"1107:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1121:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1107:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1239,"nodeType":"ExpressionStatement","src":"1107:18:2"}]},"id":1241,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1234,"nodeType":"ParameterList","parameters":[],"src":"1094:2:2"},"returnParameters":{"id":1235,"nodeType":"ParameterList","parameters":[],"src":"1097:0:2"},"scope":1369,"src":"1083:49:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1261,"nodeType":"Block","src":"1446:92:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":1254,"name":"_hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"1477:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1252,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1466:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1470:6:2","memberName":"encode","nodeType":"MemberAccess","src":"1466:10:2","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1466:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1256,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"1485:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1251,"name":"_validate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"1456:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory,bytes memory) view"}},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1456:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1258,"nodeType":"ExpressionStatement","src":"1456:40:2"},{"expression":{"id":1259,"name":"EIP1271_MAGICVALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"1513:18:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1250,"id":1260,"nodeType":"Return","src":"1506:25:2"}]},"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"1138:208:2","text":"@notice Verifies that the signer is the owner of the secp256r1 public key.\n @param _hash The hash of the data signed\n @param _signature The signature\n @return The EIP-1271 magic value"},"functionSelector":"1626ba7e","id":1262,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"1360:16:2","nodeType":"FunctionDefinition","parameters":{"id":1247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"_hash","nameLocation":"1385:5:2","nodeType":"VariableDeclaration","scope":1262,"src":"1377:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1243,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1377:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1246,"mutability":"mutable","name":"_signature","nameLocation":"1405:10:2","nodeType":"VariableDeclaration","scope":1262,"src":"1392:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1245,"name":"bytes","nodeType":"ElementaryTypeName","src":"1392:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1376:40:2"},"returnParameters":{"id":1250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1262,"src":"1438:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1248,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1438:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1437:8:2"},"scope":1369,"src":"1351:187:2","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1279,"nodeType":"Block","src":"1973:84:2","statements":[{"expression":{"arguments":[{"id":1273,"name":"_hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"1993:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1274,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1267,"src":"2000:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1272,"name":"_validate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1342,"src":"1983:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory,bytes memory) view"}},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1983:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1276,"nodeType":"ExpressionStatement","src":"1983:28:2"},{"expression":{"id":1277,"name":"OLD_EIP1271_MAGICVALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1215,"src":"2028:22:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1271,"id":1278,"nodeType":"Return","src":"2021:29:2"}]},"documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"1544:324:2","text":"@notice Verifies that the signer is the owner of the secp256r1 public key.\n @dev This is the old version of the function of EIP-1271 using bytes\n      memory instead of bytes32\n @param _hash The hash of the data signed\n @param _signature The signature\n @return The EIP-1271 magic value"},"functionSelector":"20c13b0b","id":1280,"implemented":true,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"1882:16:2","nodeType":"FunctionDefinition","parameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"_hash","nameLocation":"1912:5:2","nodeType":"VariableDeclaration","scope":1280,"src":"1899:18:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1264,"name":"bytes","nodeType":"ElementaryTypeName","src":"1899:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"_signature","nameLocation":"1932:10:2","nodeType":"VariableDeclaration","scope":1280,"src":"1919:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1266,"name":"bytes","nodeType":"ElementaryTypeName","src":"1919:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1898:45:2"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1280,"src":"1965:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1269,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1965:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1964:8:2"},"scope":1369,"src":"1873:184:2","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1341,"nodeType":"Block","src":"2255:404:2","statements":[{"assignments":[1289],"declarations":[{"constant":false,"id":1289,"mutability":"mutable","name":"_hash","nameLocation":"2273:5:2","nodeType":"VariableDeclaration","scope":1341,"src":"2265:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2265:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1293,"initialValue":{"arguments":[{"id":1291,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"2291:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1290,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2281:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2265:31:2"},{"assignments":[1295,1297,1299,1303],"declarations":[{"constant":false,"id":1295,"mutability":"mutable","name":"authenticatorData","nameLocation":"2320:17:2","nodeType":"VariableDeclaration","scope":1341,"src":"2307:30:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1294,"name":"bytes","nodeType":"ElementaryTypeName","src":"2307:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"clientData","nameLocation":"2352:10:2","nodeType":"VariableDeclaration","scope":1341,"src":"2339:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"2339:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"challengeOffset","nameLocation":"2372:15:2","nodeType":"VariableDeclaration","scope":1341,"src":"2364:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"2364:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1303,"mutability":"mutable","name":"rs","nameLocation":"2407:2:2","nodeType":"VariableDeclaration","scope":1341,"src":"2389:20:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1300,"name":"uint256","nodeType":"ElementaryTypeName","src":"2389:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1302,"length":{"hexValue":"32","id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2397:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"2389:10:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"id":1319,"initialValue":{"arguments":[{"id":1306,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1285,"src":"2436:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2449:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1307,"name":"bytes","nodeType":"ElementaryTypeName","src":"2449:5:2","typeDescriptions":{}}},{"id":1310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2456:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1309,"name":"bytes","nodeType":"ElementaryTypeName","src":"2456:5:2","typeDescriptions":{}}},{"id":1312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2463:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1311,"name":"uint256","nodeType":"ElementaryTypeName","src":"2463:7:2","typeDescriptions":{}}},{"baseExpression":{"id":1314,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2472:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1313,"name":"uint256","nodeType":"ElementaryTypeName","src":"2472:7:2","typeDescriptions":{}}},"id":1316,"indexExpression":{"hexValue":"32","id":1315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2480:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"2472:10:2","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"type(uint256[2] memory)"}}],"id":1317,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2448:35:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_uint256_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$","typeString":"tuple(type(bytes storage pointer),type(bytes storage pointer),type(uint256),type(uint256[2] memory))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_uint256_$_$_t_type$_t_array$_t_uint256_$2_memory_ptr_$_$","typeString":"tuple(type(bytes storage pointer),type(bytes storage pointer),type(uint256),type(uint256[2] memory))"}],"expression":{"id":1304,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2425:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2429:6:2","memberName":"decode","nodeType":"MemberAccess","src":"2425:10:2","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2425:59:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$","typeString":"tuple(bytes memory,bytes memory,uint256,uint256[2] memory)"}},"nodeType":"VariableDeclarationStatement","src":"2306:178:2"},{"assignments":[1321],"declarations":[{"constant":false,"id":1321,"mutability":"mutable","name":"valid","nameLocation":"2500:5:2","nodeType":"VariableDeclaration","scope":1341,"src":"2495:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1320,"name":"bool","nodeType":"ElementaryTypeName","src":"2495:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1334,"initialValue":{"arguments":[{"id":1324,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"2532:17:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30783031","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2551:4:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"0x01"},{"id":1326,"name":"clientData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"2557:10:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1327,"name":"_hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"2569:5:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1328,"name":"challengeOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"2576:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1329,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"2593:2:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"components":[{"id":1330,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"2598:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1331,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"2601:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1332,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2597:6:2","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1322,"name":"Webauthn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"2508:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Webauthn_$1652_$","typeString":"type(library Webauthn)"}},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2517:14:2","memberName":"checkSignature","nodeType":"MemberAccess","referencedDeclaration":1589,"src":"2508:23:2","typeDescriptions":{"typeIdentifier":"t_function_delegatecall_view$_t_bytes_memory_ptr_$_t_bytes1_$_t_bytes_memory_ptr_$_t_bytes32_$_t_uint256_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes memory,bytes1,bytes memory,bytes32,uint256,uint256[2] memory,uint256[2] memory) view returns (bool)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2508:96:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2495:109:2"},{"condition":{"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2619:6:2","subExpression":{"id":1335,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"2620:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1340,"nodeType":"IfStatement","src":"2615:37:2","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1337,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"2634:16:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2634:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1339,"nodeType":"RevertStatement","src":"2627:25:2"}}]},"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"2063:111:2","text":"@notice Validates the signature\n @param data The data signed\n @param _signature The signature"},"id":1342,"implemented":true,"kind":"function","modifiers":[],"name":"_validate","nameLocation":"2188:9:2","nodeType":"FunctionDefinition","parameters":{"id":1286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1283,"mutability":"mutable","name":"data","nameLocation":"2211:4:2","nodeType":"VariableDeclaration","scope":1342,"src":"2198:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1282,"name":"bytes","nodeType":"ElementaryTypeName","src":"2198:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1285,"mutability":"mutable","name":"_signature","nameLocation":"2230:10:2","nodeType":"VariableDeclaration","scope":1342,"src":"2217:23:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1284,"name":"bytes","nodeType":"ElementaryTypeName","src":"2217:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2197:44:2"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"2255:0:2"},"scope":1369,"src":"2179:480:2","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":1367,"nodeType":"Block","src":"2978:121:2","statements":[{"condition":{"id":1350,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"2992:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1354,"nodeType":"IfStatement","src":"2988:44:2","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1351,"name":"AlreadyInitialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"3012:18:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1353,"nodeType":"RevertStatement","src":"3005:27:2"}},{"expression":{"id":1357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1355,"name":"initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"3042:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3056:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3042:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1358,"nodeType":"ExpressionStatement","src":"3042:18:2"},{"expression":{"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1359,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1221,"src":"3070:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1360,"name":"x_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"3074:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3070:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1362,"nodeType":"ExpressionStatement","src":"3070:6:2"},{"expression":{"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1363,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1224,"src":"3086:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1364,"name":"y_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"3090:2:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3086:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1366,"nodeType":"ExpressionStatement","src":"3086:6:2"}]},"documentation":{"id":1343,"nodeType":"StructuredDocumentation","src":"2665:255:2","text":"@dev This function is only callable once and needs to be called immediately\n      after deployment by the factory in the same transaction.\n @param x_ The x coordinate of the public key\n @param y_ The y coordinate of the public key"},"functionSelector":"e4a30116","id":1368,"implemented":true,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"2934:10:2","nodeType":"FunctionDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1345,"mutability":"mutable","name":"x_","nameLocation":"2953:2:2","nodeType":"VariableDeclaration","scope":1368,"src":"2945:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1344,"name":"uint256","nodeType":"ElementaryTypeName","src":"2945:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1347,"mutability":"mutable","name":"y_","nameLocation":"2965:2:2","nodeType":"VariableDeclaration","scope":1368,"src":"2957:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"2957:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2944:24:2"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[],"src":"2978:0:2"},"scope":1369,"src":"2925:174:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1370,"src":"309:2792:2","usedErrors":[1227,1230,1233]}],"src":"0:3102:2"},"id":2},"contracts/P256SignerFactory.sol":{"ast":{"absolutePath":"contracts/P256SignerFactory.sol","exportedSymbols":{"LibClone":[1870],"P256Signer":[1369],"P256SignerFactory":[1443]},"id":1444,"nodeType":"SourceUnit","nodes":[{"id":1371,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"0:23:3"},{"absolutePath":"contracts/P256Signer.sol","file":"./P256Signer.sol","id":1373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1444,"sourceUnit":1370,"src":"25:44:3","symbolAliases":[{"foreign":{"id":1372,"name":"P256Signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"33:10:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"solady/src/utils/LibClone.sol","file":"solady/src/utils/LibClone.sol","id":1374,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1444,"sourceUnit":1871,"src":"70:39:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"P256SignerFactory","contractDependencies":[],"contractKind":"contract","documentation":{"id":1375,"nodeType":"StructuredDocumentation","src":"111:94:3","text":"@title P256SignerFactory\n @notice Factory contract for creating proxies for P256Signer"},"fullyImplemented":true,"id":1443,"linearizedBaseContracts":[1443],"name":"P256SignerFactory","nameLocation":"214:17:3","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"238:65:3","text":"@notice The implementation address of the P256Signer contract"},"functionSelector":"5c60da1b","id":1378,"mutability":"immutable","name":"implementation","nameLocation":"333:14:3","nodeType":"VariableDeclaration","scope":1443,"src":"308:39:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"308:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":1387,"nodeType":"Block","src":"391:49:3","statements":[{"expression":{"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1383,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"401:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1384,"name":"implementation_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1380,"src":"418:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"401:32:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1386,"nodeType":"ExpressionStatement","src":"401:32:3"}]},"id":1388,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1380,"mutability":"mutable","name":"implementation_","nameLocation":"374:15:3","nodeType":"VariableDeclaration","scope":1388,"src":"366:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1379,"name":"address","nodeType":"ElementaryTypeName","src":"366:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"365:25:3"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[],"src":"391:0:3"},"scope":1443,"src":"354:86:3","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"446:67:3","text":"@notice Emitted when a new P256Signer proxy contract is created"},"eventSelector":"33b61205835e3063eb8935cac4b29d7fc333ad80d6cb11893ba4758adf8cdde1","id":1397,"name":"NewSignerCreated","nameLocation":"524:16:3","nodeType":"EventDefinition","parameters":{"id":1396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"indexed":true,"mutability":"mutable","name":"x","nameLocation":"557:1:3","nodeType":"VariableDeclaration","scope":1397,"src":"541:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1393,"indexed":true,"mutability":"mutable","name":"y","nameLocation":"576:1:3","nodeType":"VariableDeclaration","scope":1397,"src":"560:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1395,"indexed":false,"mutability":"mutable","name":"signer","nameLocation":"587:6:3","nodeType":"VariableDeclaration","scope":1397,"src":"579:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1394,"name":"address","nodeType":"ElementaryTypeName","src":"579:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"540:54:3"},"src":"518:77:3"},{"body":{"id":1441,"nodeType":"Block","src":"826:254:3","statements":[{"assignments":[1408],"declarations":[{"constant":false,"id":1408,"mutability":"mutable","name":"salt","nameLocation":"844:4:3","nodeType":"VariableDeclaration","scope":1441,"src":"836:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1407,"name":"bytes32","nodeType":"ElementaryTypeName","src":"836:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1416,"initialValue":{"arguments":[{"arguments":[{"id":1412,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"878:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1413,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"881:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1410,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"861:3:3","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:12:3","memberName":"encodePacked","nodeType":"MemberAccess","src":"861:16:3","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"861:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1409,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"851:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"851:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"836:48:3"},{"assignments":[1418],"declarations":[{"constant":false,"id":1418,"mutability":"mutable","name":"signer","nameLocation":"902:6:3","nodeType":"VariableDeclaration","scope":1441,"src":"894:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"894:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1424,"initialValue":{"arguments":[{"id":1421,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"939:14:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1422,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"955:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1419,"name":"LibClone","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"911:8:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LibClone_$1870_$","typeString":"type(library LibClone)"}},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"920:18:3","memberName":"cloneDeterministic","nodeType":"MemberAccess","referencedDeclaration":1683,"src":"911:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$_t_address_$","typeString":"function (address,bytes32) returns (address)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"911:49:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"894:66:3"},{"expression":{"arguments":[{"id":1429,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"1000:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1430,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"1003:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":1426,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"981:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1425,"name":"P256Signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"970:10:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_P256Signer_$1369_$","typeString":"type(contract P256Signer)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"970:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_P256Signer_$1369","typeString":"contract P256Signer"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"989:10:3","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":1368,"src":"970:29:3","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) external"}},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"970:35:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1432,"nodeType":"ExpressionStatement","src":"970:35:3"},{"eventCall":{"arguments":[{"id":1434,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"1037:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1435,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"1040:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1436,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"1043:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1433,"name":"NewSignerCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"1020:16:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,uint256,address)"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:30:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1438,"nodeType":"EmitStatement","src":"1015:35:3"},{"expression":{"id":1439,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"1067:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1406,"id":1440,"nodeType":"Return","src":"1060:13:3"}]},"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"601:155:3","text":"@notice Creates a new P256Signer proxy contract\n @param x The x coordinate of the public key\n @param y The y coordinate of the public key"},"functionSelector":"9f7b4579","id":1442,"implemented":true,"kind":"function","modifiers":[],"name":"create","nameLocation":"770:6:3","nodeType":"FunctionDefinition","parameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"x","nameLocation":"785:1:3","nodeType":"VariableDeclaration","scope":1442,"src":"777:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1399,"name":"uint256","nodeType":"ElementaryTypeName","src":"777:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"y","nameLocation":"796:1:3","nodeType":"VariableDeclaration","scope":1442,"src":"788:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"788:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"776:22:3"},"returnParameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1442,"src":"817:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1404,"name":"address","nodeType":"ElementaryTypeName","src":"817:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"816:9:3"},"scope":1443,"src":"761:319:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1444,"src":"205:877:3","usedErrors":[]}],"src":"0:1083:3"},"id":3},"contracts/Webauthn.sol":{"ast":{"absolutePath":"contracts/Webauthn.sol","exportedSymbols":{"Base64URL":[48],"FCL_Elliptic_ZZ":[1202],"InvalidAuthenticatorData":[1451],"InvalidClientData":[1453],"InvalidSignature":[1455],"Webauthn":[1652]},"id":1653,"license":"Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":1445,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"39:23:4"},{"absolutePath":"contracts/Base64URL.sol","file":"./Base64URL.sol","id":1447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1653,"sourceUnit":49,"src":"64:42:4","symbolAliases":[{"foreign":{"id":1446,"name":"Base64URL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"72:9:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/FCL/FCL_elliptic.sol","file":"./FCL/FCL_elliptic.sol","id":1449,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1653,"sourceUnit":1203,"src":"107:55:4","symbolAliases":[{"foreign":{"id":1448,"name":"FCL_Elliptic_ZZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"115:15:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"errorSelector":"fc934792","id":1451,"name":"InvalidAuthenticatorData","nameLocation":"170:24:4","nodeType":"ErrorDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[],"src":"194:2:4"},"src":"164:33:4"},{"errorSelector":"ebab5d29","id":1453,"name":"InvalidClientData","nameLocation":"204:17:4","nodeType":"ErrorDefinition","parameters":{"id":1452,"nodeType":"ParameterList","parameters":[],"src":"221:2:4"},"src":"198:26:4"},{"errorSelector":"8baa579f","id":1455,"name":"InvalidSignature","nameLocation":"231:16:4","nodeType":"ErrorDefinition","parameters":{"id":1454,"nodeType":"ParameterList","parameters":[],"src":"247:2:4"},"src":"225:25:4"},{"abstract":false,"baseContracts":[],"canonicalName":"Webauthn","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1652,"linearizedBaseContracts":[1652],"name":"Webauthn","nameLocation":"260:8:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1588,"nodeType":"Block","src":"573:1569:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1478,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"693:17:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1480,"indexExpression":{"hexValue":"3332","id":1479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"711:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"693:21:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1481,"name":"authenticatorDataFlagMask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"717:25:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"693:49:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}}],"id":1483,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"692:51:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1484,"name":"authenticatorDataFlagMask","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"759:25:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"692:92:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1490,"nodeType":"IfStatement","src":"675:178:4","trueBody":{"id":1489,"nodeType":"Block","src":"795:58:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1486,"name":"InvalidAuthenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"816:24:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"816:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1488,"nodeType":"RevertStatement","src":"809:33:4"}]}},{"assignments":[1492],"declarations":[{"constant":false,"id":1492,"mutability":"mutable","name":"challengeEncoded","nameLocation":"951:16:4","nodeType":"VariableDeclaration","scope":1588,"src":"937:30:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1491,"name":"string","nodeType":"ElementaryTypeName","src":"937:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1500,"initialValue":{"arguments":[{"arguments":[{"id":1497,"name":"clientChallenge","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"1019:15:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1495,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1002:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1496,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1006:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"1002:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1002:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1493,"name":"Base64URL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":48,"src":"970:9:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Base64URL_$48_$","typeString":"type(library Base64URL)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"980:8:4","memberName":"encode32","nodeType":"MemberAccess","referencedDeclaration":47,"src":"970:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_string_memory_ptr_$","typeString":"function (bytes memory) pure returns (string memory)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"970:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"937:108:4"},{"assignments":[1502],"declarations":[{"constant":false,"id":1502,"mutability":"mutable","name":"challengeExtracted","nameLocation":"1068:18:4","nodeType":"VariableDeclaration","scope":1588,"src":"1055:31:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1501,"name":"bytes","nodeType":"ElementaryTypeName","src":"1055:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1511,"initialValue":{"arguments":[{"expression":{"arguments":[{"id":1507,"name":"challengeEncoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1118:16:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1112:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1505,"name":"bytes","nodeType":"ElementaryTypeName","src":"1112:5:4","typeDescriptions":{}}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1136:6:4","memberName":"length","nodeType":"MemberAccess","src":"1112:30:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1504,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1089:9:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1503,"name":"bytes","nodeType":"ElementaryTypeName","src":"1093:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1089:63:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1055:97:4"},{"expression":{"arguments":[{"id":1513,"name":"clientData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"1185:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1514,"name":"clientChallengeDataOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"1209:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1515,"name":"challengeExtracted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1248:18:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1267:6:4","memberName":"length","nodeType":"MemberAccess","src":"1248:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1517,"name":"challengeExtracted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1287:18:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1319:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1512,"name":"copyBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1162:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256,bytes memory,uint256) pure returns (bytes memory)"}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:168:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1520,"nodeType":"ExpressionStatement","src":"1162:168:4"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"arguments":[{"id":1526,"name":"challengeEncoded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"1390:16:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1384:5:4","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1524,"name":"bytes","nodeType":"ElementaryTypeName","src":"1384:5:4","typeDescriptions":{}}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1384:23:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1522,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1367:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1371:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"1367:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1367:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1521,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1357:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1357:52:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"arguments":[{"id":1533,"name":"challengeExtracted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1502,"src":"1452:18:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1531,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1435:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1439:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"1435:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1435:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1530,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1425:9:4","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1425:47:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1357:115:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1541,"nodeType":"IfStatement","src":"1340:194:4","trueBody":{"id":1540,"nodeType":"Block","src":"1483:51:4","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1537,"name":"InvalidClientData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"1504:17:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1504:19:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1539,"nodeType":"RevertStatement","src":"1497:26:4"}]}},{"assignments":[1543],"declarations":[{"constant":false,"id":1543,"mutability":"mutable","name":"verifyData","nameLocation":"1647:10:4","nodeType":"VariableDeclaration","scope":1588,"src":"1634:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1542,"name":"bytes","nodeType":"ElementaryTypeName","src":"1634:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1551,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1546,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"1670:17:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1688:6:4","memberName":"length","nodeType":"MemberAccess","src":"1670:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3332","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1697:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"1670:29:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1660:9:4","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1544,"name":"bytes","nodeType":"ElementaryTypeName","src":"1664:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1660:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1634:66:4"},{"expression":{"arguments":[{"id":1553,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"1733:17:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1764:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":1555,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"1779:17:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1797:6:4","memberName":"length","nodeType":"MemberAccess","src":"1779:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1557,"name":"verifyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"1817:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1841:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1552,"name":"copyBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1710:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256,bytes memory,uint256) pure returns (bytes memory)"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:142:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1560,"nodeType":"ExpressionStatement","src":"1710:142:4"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1565,"name":"clientData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"1909:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1564,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"1902:6:4","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1902:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1562,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1885:3:4","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1889:12:4","memberName":"encodePacked","nodeType":"MemberAccess","src":"1885:16:4","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1885:36:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1935:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"3332","id":1569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},{"id":1570,"name":"verifyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"1966:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":1571,"name":"authenticatorData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"1990:17:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2008:6:4","memberName":"length","nodeType":"MemberAccess","src":"1990:24:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1561,"name":"copyBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1651,"src":"1862:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes memory,uint256,uint256,bytes memory,uint256) pure returns (bytes memory)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1862:162:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1574,"nodeType":"ExpressionStatement","src":"1862:162:4"},{"assignments":[1576],"declarations":[{"constant":false,"id":1576,"mutability":"mutable","name":"message","nameLocation":"2042:7:4","nodeType":"VariableDeclaration","scope":1588,"src":"2034:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1575,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2034:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1580,"initialValue":{"arguments":[{"id":1578,"name":"verifyData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"2059:10:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1577,"name":"sha256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-22,"src":"2052:6:4","typeDescriptions":{"typeIdentifier":"t_function_sha256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:18:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2034:36:4"},{"expression":{"arguments":[{"id":1583,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1576,"src":"2120:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1584,"name":"rs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"2129:2:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}},{"id":1585,"name":"Q","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"2133:1:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"},{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2] memory"}],"expression":{"id":1581,"name":"FCL_Elliptic_ZZ","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"2087:15:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_FCL_Elliptic_ZZ_$1202_$","typeString":"type(library FCL_Elliptic_ZZ)"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2103:16:4","memberName":"ecdsa_verify_mem","nodeType":"MemberAccess","referencedDeclaration":946,"src":"2087:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$returns$_t_bool_$","typeString":"function (bytes32,uint256[2] memory,uint256[2] memory) view returns (bool)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2087:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1477,"id":1587,"nodeType":"Return","src":"2080:55:4"}]},"functionSelector":"0d5efec9","id":1589,"implemented":true,"kind":"function","modifiers":[],"name":"checkSignature","nameLocation":"284:14:4","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1457,"mutability":"mutable","name":"authenticatorData","nameLocation":"321:17:4","nodeType":"VariableDeclaration","scope":1589,"src":"308:30:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1456,"name":"bytes","nodeType":"ElementaryTypeName","src":"308:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1459,"mutability":"mutable","name":"authenticatorDataFlagMask","nameLocation":"355:25:4","nodeType":"VariableDeclaration","scope":1589,"src":"348:32:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"typeName":{"id":1458,"name":"bytes1","nodeType":"ElementaryTypeName","src":"348:6:4","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"visibility":"internal"},{"constant":false,"id":1461,"mutability":"mutable","name":"clientData","nameLocation":"403:10:4","nodeType":"VariableDeclaration","scope":1589,"src":"390:23:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1460,"name":"bytes","nodeType":"ElementaryTypeName","src":"390:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1463,"mutability":"mutable","name":"clientChallenge","nameLocation":"431:15:4","nodeType":"VariableDeclaration","scope":1589,"src":"423:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"423:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1465,"mutability":"mutable","name":"clientChallengeDataOffset","nameLocation":"461:25:4","nodeType":"VariableDeclaration","scope":1589,"src":"456:30:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint","nodeType":"ElementaryTypeName","src":"456:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"rs","nameLocation":"511:2:4","nodeType":"VariableDeclaration","scope":1589,"src":"496:17:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1466,"name":"uint","nodeType":"ElementaryTypeName","src":"496:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1468,"length":{"hexValue":"32","id":1467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"501:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"496:7:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"},{"constant":false,"id":1473,"mutability":"mutable","name":"Q","nameLocation":"538:1:4","nodeType":"VariableDeclaration","scope":1589,"src":"523:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_memory_ptr","typeString":"uint256[2]"},"typeName":{"baseType":{"id":1470,"name":"uint","nodeType":"ElementaryTypeName","src":"523:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1472,"length":{"hexValue":"32","id":1471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"528:1:4","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"ArrayTypeName","src":"523:7:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$2_storage_ptr","typeString":"uint256[2]"}},"visibility":"internal"}],"src":"298:247:4"},"returnParameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1589,"src":"567:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1475,"name":"bool","nodeType":"ElementaryTypeName","src":"567:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"566:6:4"},"scope":1652,"src":"275:1867:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1650,"nodeType":"Block","src":"2476:538:4","statements":[{"assignments":[1605],"declarations":[{"constant":false,"id":1605,"mutability":"mutable","name":"minLength","nameLocation":"2491:9:4","nodeType":"VariableDeclaration","scope":1650,"src":"2486:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1604,"name":"uint","nodeType":"ElementaryTypeName","src":"2486:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1609,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1606,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"2503:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1607,"name":"_toOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"2513:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2503:19:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2486:36:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1611,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"2540:3:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2544:6:4","memberName":"length","nodeType":"MemberAccess","src":"2540:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1613,"name":"minLength","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1605,"src":"2554:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2540:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1610,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2532:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2532:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1616,"nodeType":"ExpressionStatement","src":"2532:32:4"},{"assignments":[1618],"declarations":[{"constant":false,"id":1618,"mutability":"mutable","name":"i","nameLocation":"2624:1:4","nodeType":"VariableDeclaration","scope":1650,"src":"2619:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1617,"name":"uint","nodeType":"ElementaryTypeName","src":"2619:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1622,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2628:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1620,"name":"_fromOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"2633:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2628:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2619:25:4"},{"assignments":[1624],"declarations":[{"constant":false,"id":1624,"mutability":"mutable","name":"j","nameLocation":"2740:1:4","nodeType":"VariableDeclaration","scope":1650,"src":"2735:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint","nodeType":"ElementaryTypeName","src":"2735:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1628,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2744:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1626,"name":"_toOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"2749:9:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2744:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2735:23:4"},{"body":{"id":1646,"nodeType":"Block","src":"2809:179:4","statements":[{"AST":{"nodeType":"YulBlock","src":"2832:104:4","statements":[{"nodeType":"YulVariableDeclaration","src":"2850:31:4","value":{"arguments":[{"arguments":[{"name":"_from","nodeType":"YulIdentifier","src":"2871:5:4"},{"name":"i","nodeType":"YulIdentifier","src":"2878:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2867:3:4"},"nodeType":"YulFunctionCall","src":"2867:13:4"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2861:5:4"},"nodeType":"YulFunctionCall","src":"2861:20:4"},"variables":[{"name":"tmp","nodeType":"YulTypedName","src":"2854:3:4","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_to","nodeType":"YulIdentifier","src":"2909:3:4"},{"name":"j","nodeType":"YulIdentifier","src":"2914:1:4"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2905:3:4"},"nodeType":"YulFunctionCall","src":"2905:11:4"},{"name":"tmp","nodeType":"YulIdentifier","src":"2918:3:4"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2898:6:4"},"nodeType":"YulFunctionCall","src":"2898:24:4"},"nodeType":"YulExpressionStatement","src":"2898:24:4"}]},"evmVersion":"london","externalReferences":[{"declaration":1591,"isOffset":false,"isSlot":false,"src":"2871:5:4","valueSize":1},{"declaration":1597,"isOffset":false,"isSlot":false,"src":"2909:3:4","valueSize":1},{"declaration":1618,"isOffset":false,"isSlot":false,"src":"2878:1:4","valueSize":1},{"declaration":1624,"isOffset":false,"isSlot":false,"src":"2914:1:4","valueSize":1}],"id":1637,"nodeType":"InlineAssembly","src":"2823:113:4"},{"expression":{"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1638,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"2949:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2954:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2949:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1641,"nodeType":"ExpressionStatement","src":"2949:7:4"},{"expression":{"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1642,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"2970:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2975:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2970:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1645,"nodeType":"ExpressionStatement","src":"2970:7:4"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1629,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"2775:1:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3332","id":1630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2780:2:4","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1631,"name":"_fromOffset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"2785:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2780:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1633,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1595,"src":"2799:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2780:26:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1635,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2779:28:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2775:32:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1647,"nodeType":"WhileStatement","src":"2768:220:4"},{"expression":{"id":1648,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"3004:3:4","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1603,"id":1649,"nodeType":"Return","src":"2997:10:4"}]},"id":1651,"implemented":true,"kind":"function","modifiers":[],"name":"copyBytes","nameLocation":"2284:9:4","nodeType":"FunctionDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"_from","nameLocation":"2316:5:4","nodeType":"VariableDeclaration","scope":1651,"src":"2303:18:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1590,"name":"bytes","nodeType":"ElementaryTypeName","src":"2303:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1593,"mutability":"mutable","name":"_fromOffset","nameLocation":"2336:11:4","nodeType":"VariableDeclaration","scope":1651,"src":"2331:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1592,"name":"uint","nodeType":"ElementaryTypeName","src":"2331:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1595,"mutability":"mutable","name":"_length","nameLocation":"2362:7:4","nodeType":"VariableDeclaration","scope":1651,"src":"2357:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1594,"name":"uint","nodeType":"ElementaryTypeName","src":"2357:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1597,"mutability":"mutable","name":"_to","nameLocation":"2392:3:4","nodeType":"VariableDeclaration","scope":1651,"src":"2379:16:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1596,"name":"bytes","nodeType":"ElementaryTypeName","src":"2379:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1599,"mutability":"mutable","name":"_toOffset","nameLocation":"2410:9:4","nodeType":"VariableDeclaration","scope":1651,"src":"2405:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1598,"name":"uint","nodeType":"ElementaryTypeName","src":"2405:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2293:132:4"},"returnParameters":{"id":1603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1602,"mutability":"mutable","name":"_copiedBytes","nameLocation":"2462:12:4","nodeType":"VariableDeclaration","scope":1651,"src":"2449:25:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1601,"name":"bytes","nodeType":"ElementaryTypeName","src":"2449:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2448:27:4"},"scope":1652,"src":"2275:739:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1653,"src":"252:2764:4","usedErrors":[1451,1453]}],"src":"39:2978:4"},"id":4},"solady/src/utils/LibClone.sol":{"ast":{"absolutePath":"solady/src/utils/LibClone.sol","exportedSymbols":{"LibClone":[1870]},"id":1871,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1654,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"LibClone","contractDependencies":[],"contractKind":"library","documentation":{"id":1655,"nodeType":"StructuredDocumentation","src":"57:1443:5","text":"@notice Minimal proxy library.\n @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)\n @author Minimal proxy by 0age (https://github.com/0age)\n @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie\n (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\n @dev Minimal proxy:\n Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime,\n it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,\n which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.\n @dev Minimal proxy (PUSH0 variant):\n This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai.\n It is optimized first for minimal runtime gas, then for minimal bytecode.\n The PUSH0 clone functions are intentionally postfixed with a jarring \"_PUSH0\" as\n many EVM chains may not support the PUSH0 opcode in the early months after Shanghai.\n Please use with caution.\n @dev Clones with immutable args (CWIA):\n The implementation of CWIA here implements a `receive()` method that emits the\n `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata,\n enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards\n composability. The minimal proxy implementation does not offer this feature."},"fullyImplemented":true,"id":1870,"linearizedBaseContracts":[1870],"name":"LibClone","nameLocation":"1508:8:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"1806:36:5","text":"@dev Unable to deploy the clone."},"errorSelector":"30116425","id":1658,"name":"DeploymentFailed","nameLocation":"1853:16:5","nodeType":"ErrorDefinition","parameters":{"id":1657,"nodeType":"ParameterList","parameters":[],"src":"1869:2:5"},"src":"1847:25:5"},{"documentation":{"id":1659,"nodeType":"StructuredDocumentation","src":"1878:72:5","text":"@dev The salt must start with either the zero address or the caller."},"errorSelector":"2f634836","id":1661,"name":"SaltDoesNotStartWithCaller","nameLocation":"1961:26:5","nodeType":"ErrorDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[],"src":"1987:2:5"},"src":"1955:35:5"},{"body":{"id":1670,"nodeType":"Block","src":"2404:5640:5","statements":[{"AST":{"nodeType":"YulBlock","src":"2466:5572:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7434:4:5","type":"","value":"0x21"},{"kind":"number","nodeType":"YulLiteral","src":"7440:28:5","type":"","value":"0x5af43d3d93803e602a57fd5bf3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7427:6:5"},"nodeType":"YulFunctionCall","src":"7427:42:5"},"nodeType":"YulExpressionStatement","src":"7427:42:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:5","type":"","value":"0x14"},{"name":"implementation","nodeType":"YulIdentifier","src":"7495:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7482:6:5"},"nodeType":"YulFunctionCall","src":"7482:28:5"},"nodeType":"YulExpressionStatement","src":"7482:28:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7530:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7536:42:5","type":"","value":"0x602c3d8160093d39f33d3d3d3d363d3d37363d73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7523:6:5"},"nodeType":"YulFunctionCall","src":"7523:56:5"},"nodeType":"YulExpressionStatement","src":"7523:56:5"},{"nodeType":"YulAssignment","src":"7592:33:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7611:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7614:4:5","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"7620:4:5","type":"","value":"0x35"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"7604:6:5"},"nodeType":"YulFunctionCall","src":"7604:21:5"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"7592:8:5"}]},{"body":{"nodeType":"YulBlock","src":"7704:210:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7801:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7807:10:5","type":"","value":"0x30116425"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7794:6:5"},"nodeType":"YulFunctionCall","src":"7794:24:5"},"nodeType":"YulExpressionStatement","src":"7794:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7889:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"7895:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7882:6:5"},"nodeType":"YulFunctionCall","src":"7882:18:5"},"nodeType":"YulExpressionStatement","src":"7882:18:5"}]},"condition":{"arguments":[{"name":"instance","nodeType":"YulIdentifier","src":"7694:8:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7687:6:5"},"nodeType":"YulFunctionCall","src":"7687:16:5"},"nodeType":"YulIf","src":"7684:230:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8020:4:5","type":"","value":"0x21"},{"kind":"number","nodeType":"YulLiteral","src":"8026:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8013:6:5"},"nodeType":"YulFunctionCall","src":"8013:15:5"},"nodeType":"YulExpressionStatement","src":"8013:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1664,"isOffset":false,"isSlot":false,"src":"7495:14:5","valueSize":1},{"declaration":1667,"isOffset":false,"isSlot":false,"src":"7592:8:5","valueSize":1},{"declaration":1667,"isOffset":false,"isSlot":false,"src":"7694:8:5","valueSize":1}],"id":1669,"nodeType":"InlineAssembly","src":"2457:5581:5"}]},"documentation":{"id":1662,"nodeType":"StructuredDocumentation","src":"2279:45:5","text":"@dev Deploys a clone of `implementation`."},"id":1671,"implemented":true,"kind":"function","modifiers":[],"name":"clone","nameLocation":"2338:5:5","nodeType":"FunctionDefinition","parameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"implementation","nameLocation":"2352:14:5","nodeType":"VariableDeclaration","scope":1671,"src":"2344:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1663,"name":"address","nodeType":"ElementaryTypeName","src":"2344:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2343:24:5"},"returnParameters":{"id":1668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"instance","nameLocation":"2394:8:5","nodeType":"VariableDeclaration","scope":1671,"src":"2386:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1666,"name":"address","nodeType":"ElementaryTypeName","src":"2386:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2385:18:5"},"scope":1870,"src":"2329:5715:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1682,"nodeType":"Block","src":"8248:700:5","statements":[{"AST":{"nodeType":"YulBlock","src":"8310:632:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8331:4:5","type":"","value":"0x21"},{"kind":"number","nodeType":"YulLiteral","src":"8337:28:5","type":"","value":"0x5af43d3d93803e602a57fd5bf3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8324:6:5"},"nodeType":"YulFunctionCall","src":"8324:42:5"},"nodeType":"YulExpressionStatement","src":"8324:42:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8386:4:5","type":"","value":"0x14"},{"name":"implementation","nodeType":"YulIdentifier","src":"8392:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8379:6:5"},"nodeType":"YulFunctionCall","src":"8379:28:5"},"nodeType":"YulExpressionStatement","src":"8379:28:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8427:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8433:42:5","type":"","value":"0x602c3d8160093d39f33d3d3d3d363d3d37363d73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8420:6:5"},"nodeType":"YulFunctionCall","src":"8420:56:5"},"nodeType":"YulExpressionStatement","src":"8420:56:5"},{"nodeType":"YulAssignment","src":"8489:40:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8509:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8512:4:5","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"8518:4:5","type":"","value":"0x35"},{"name":"salt","nodeType":"YulIdentifier","src":"8524:4:5"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"8501:7:5"},"nodeType":"YulFunctionCall","src":"8501:28:5"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"8489:8:5"}]},{"body":{"nodeType":"YulBlock","src":"8608:210:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8705:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"8711:10:5","type":"","value":"0x30116425"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8698:6:5"},"nodeType":"YulFunctionCall","src":"8698:24:5"},"nodeType":"YulExpressionStatement","src":"8698:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8793:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"8799:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8786:6:5"},"nodeType":"YulFunctionCall","src":"8786:18:5"},"nodeType":"YulExpressionStatement","src":"8786:18:5"}]},"condition":{"arguments":[{"name":"instance","nodeType":"YulIdentifier","src":"8598:8:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8591:6:5"},"nodeType":"YulFunctionCall","src":"8591:16:5"},"nodeType":"YulIf","src":"8588:230:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8924:4:5","type":"","value":"0x21"},{"kind":"number","nodeType":"YulLiteral","src":"8930:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8917:6:5"},"nodeType":"YulFunctionCall","src":"8917:15:5"},"nodeType":"YulExpressionStatement","src":"8917:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1674,"isOffset":false,"isSlot":false,"src":"8392:14:5","valueSize":1},{"declaration":1679,"isOffset":false,"isSlot":false,"src":"8489:8:5","valueSize":1},{"declaration":1679,"isOffset":false,"isSlot":false,"src":"8598:8:5","valueSize":1},{"declaration":1676,"isOffset":false,"isSlot":false,"src":"8524:4:5","valueSize":1}],"id":1681,"nodeType":"InlineAssembly","src":"8301:641:5"}]},"documentation":{"id":1672,"nodeType":"StructuredDocumentation","src":"8050:71:5","text":"@dev Deploys a deterministic clone of `implementation` with `salt`."},"id":1683,"implemented":true,"kind":"function","modifiers":[],"name":"cloneDeterministic","nameLocation":"8135:18:5","nodeType":"FunctionDefinition","parameters":{"id":1677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"mutability":"mutable","name":"implementation","nameLocation":"8162:14:5","nodeType":"VariableDeclaration","scope":1683,"src":"8154:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1673,"name":"address","nodeType":"ElementaryTypeName","src":"8154:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1676,"mutability":"mutable","name":"salt","nameLocation":"8186:4:5","nodeType":"VariableDeclaration","scope":1683,"src":"8178:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1675,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8178:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8153:38:5"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"instance","nameLocation":"8234:8:5","nodeType":"VariableDeclaration","scope":1683,"src":"8226:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1678,"name":"address","nodeType":"ElementaryTypeName","src":"8226:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8225:18:5"},"scope":1870,"src":"8126:822:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1692,"nodeType":"Block","src":"9182:400:5","statements":[{"AST":{"nodeType":"YulBlock","src":"9244:332:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9265:4:5","type":"","value":"0x21"},{"kind":"number","nodeType":"YulLiteral","src":"9271:28:5","type":"","value":"0x5af43d3d93803e602a57fd5bf3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9258:6:5"},"nodeType":"YulFunctionCall","src":"9258:42:5"},"nodeType":"YulExpressionStatement","src":"9258:42:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9320:4:5","type":"","value":"0x14"},{"name":"implementation","nodeType":"YulIdentifier","src":"9326:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9313:6:5"},"nodeType":"YulFunctionCall","src":"9313:28:5"},"nodeType":"YulExpressionStatement","src":"9313:28:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9361:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9367:42:5","type":"","value":"0x602c3d8160093d39f33d3d3d3d363d3d37363d73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9354:6:5"},"nodeType":"YulFunctionCall","src":"9354:56:5"},"nodeType":"YulExpressionStatement","src":"9354:56:5"},{"nodeType":"YulAssignment","src":"9423:29:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9441:4:5","type":"","value":"0x0c"},{"kind":"number","nodeType":"YulLiteral","src":"9447:4:5","type":"","value":"0x35"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9431:9:5"},"nodeType":"YulFunctionCall","src":"9431:21:5"},"variableNames":[{"name":"hash","nodeType":"YulIdentifier","src":"9423:4:5"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9558:4:5","type":"","value":"0x21"},{"kind":"number","nodeType":"YulLiteral","src":"9564:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9551:6:5"},"nodeType":"YulFunctionCall","src":"9551:15:5"},"nodeType":"YulExpressionStatement","src":"9551:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1689,"isOffset":false,"isSlot":false,"src":"9423:4:5","valueSize":1},{"declaration":1686,"isOffset":false,"isSlot":false,"src":"9326:14:5","valueSize":1}],"id":1691,"nodeType":"InlineAssembly","src":"9235:341:5"}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"8954:140:5","text":"@dev Returns the initialization code hash of the clone of `implementation`.\n Used for mining vanity addresses with create2crunch."},"id":1693,"implemented":true,"kind":"function","modifiers":[],"name":"initCodeHash","nameLocation":"9108:12:5","nodeType":"FunctionDefinition","parameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1686,"mutability":"mutable","name":"implementation","nameLocation":"9129:14:5","nodeType":"VariableDeclaration","scope":1693,"src":"9121:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"9121:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9120:24:5"},"returnParameters":{"id":1690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1689,"mutability":"mutable","name":"hash","nameLocation":"9176:4:5","nodeType":"VariableDeclaration","scope":1693,"src":"9168:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1688,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9168:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9167:14:5"},"scope":1870,"src":"9099:483:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1719,"nodeType":"Block","src":"9960:131:5","statements":[{"assignments":[1706],"declarations":[{"constant":false,"id":1706,"mutability":"mutable","name":"hash","nameLocation":"9978:4:5","nodeType":"VariableDeclaration","scope":1719,"src":"9970:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1705,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9970:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1710,"initialValue":{"arguments":[{"id":1708,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"9998:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1707,"name":"initCodeHash","nodeType":"Identifier","overloadedDeclarations":[1693,1817],"referencedDeclaration":1693,"src":"9985:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9985:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"9970:43:5"},{"expression":{"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1711,"name":"predicted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"10023:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1713,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1706,"src":"10063:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1714,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"10069:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1715,"name":"deployer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"10075:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1712,"name":"predictDeterministicAddress","nodeType":"Identifier","overloadedDeclarations":[1720,1847,1861],"referencedDeclaration":1861,"src":"10035:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (bytes32,bytes32,address) pure returns (address)"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10035:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10023:61:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1718,"nodeType":"ExpressionStatement","src":"10023:61:5"}]},"documentation":{"id":1694,"nodeType":"StructuredDocumentation","src":"9588:204:5","text":"@dev Returns the address of the deterministic clone of `implementation`,\n with `salt` by `deployer`.\n Note: The returned result has dirty upper 96 bits. Please clean if used in assembly."},"id":1720,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"9806:27:5","nodeType":"FunctionDefinition","parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1696,"mutability":"mutable","name":"implementation","nameLocation":"9842:14:5","nodeType":"VariableDeclaration","scope":1720,"src":"9834:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1695,"name":"address","nodeType":"ElementaryTypeName","src":"9834:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1698,"mutability":"mutable","name":"salt","nameLocation":"9866:4:5","nodeType":"VariableDeclaration","scope":1720,"src":"9858:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9858:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1700,"mutability":"mutable","name":"deployer","nameLocation":"9880:8:5","nodeType":"VariableDeclaration","scope":1720,"src":"9872:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1699,"name":"address","nodeType":"ElementaryTypeName","src":"9872:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9833:56:5"},"returnParameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"predicted","nameLocation":"9945:9:5","nodeType":"VariableDeclaration","scope":1720,"src":"9937:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1702,"name":"address","nodeType":"ElementaryTypeName","src":"9937:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9936:19:5"},"scope":1870,"src":"9797:294:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1729,"nodeType":"Block","src":"10517:5754:5","statements":[{"AST":{"nodeType":"YulBlock","src":"10579:5686:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15638:4:5","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"15644:34:5","type":"","value":"0x5af43d5f5f3e6029573d5ffd5b3d5ff3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15631:6:5"},"nodeType":"YulFunctionCall","src":"15631:48:5"},"nodeType":"YulExpressionStatement","src":"15631:48:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15705:4:5","type":"","value":"0x14"},{"name":"implementation","nodeType":"YulIdentifier","src":"15711:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15698:6:5"},"nodeType":"YulFunctionCall","src":"15698:28:5"},"nodeType":"YulExpressionStatement","src":"15698:28:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15752:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"15758:38:5","type":"","value":"0x602d5f8160095f39f35f5f365f5f37365f73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15745:6:5"},"nodeType":"YulFunctionCall","src":"15745:52:5"},"nodeType":"YulExpressionStatement","src":"15745:52:5"},{"nodeType":"YulAssignment","src":"15819:33:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15838:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15841:4:5","type":"","value":"0x0e"},{"kind":"number","nodeType":"YulLiteral","src":"15847:4:5","type":"","value":"0x36"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"15831:6:5"},"nodeType":"YulFunctionCall","src":"15831:21:5"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"15819:8:5"}]},{"body":{"nodeType":"YulBlock","src":"15931:210:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16028:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"16034:10:5","type":"","value":"0x30116425"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16021:6:5"},"nodeType":"YulFunctionCall","src":"16021:24:5"},"nodeType":"YulExpressionStatement","src":"16021:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16116:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"16122:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16109:6:5"},"nodeType":"YulFunctionCall","src":"16109:18:5"},"nodeType":"YulExpressionStatement","src":"16109:18:5"}]},"condition":{"arguments":[{"name":"instance","nodeType":"YulIdentifier","src":"15921:8:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15914:6:5"},"nodeType":"YulFunctionCall","src":"15914:16:5"},"nodeType":"YulIf","src":"15911:230:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16247:4:5","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"16253:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16240:6:5"},"nodeType":"YulFunctionCall","src":"16240:15:5"},"nodeType":"YulExpressionStatement","src":"16240:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1723,"isOffset":false,"isSlot":false,"src":"15711:14:5","valueSize":1},{"declaration":1726,"isOffset":false,"isSlot":false,"src":"15819:8:5","valueSize":1},{"declaration":1726,"isOffset":false,"isSlot":false,"src":"15921:8:5","valueSize":1}],"id":1728,"nodeType":"InlineAssembly","src":"10570:5695:5"}]},"documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"10380:51:5","text":"@dev Deploys a PUSH0 clone of `implementation`."},"id":1730,"implemented":true,"kind":"function","modifiers":[],"name":"clone_PUSH0","nameLocation":"10445:11:5","nodeType":"FunctionDefinition","parameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"implementation","nameLocation":"10465:14:5","nodeType":"VariableDeclaration","scope":1730,"src":"10457:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1722,"name":"address","nodeType":"ElementaryTypeName","src":"10457:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10456:24:5"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"instance","nameLocation":"10507:8:5","nodeType":"VariableDeclaration","scope":1730,"src":"10499:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1725,"name":"address","nodeType":"ElementaryTypeName","src":"10499:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10498:18:5"},"scope":1870,"src":"10436:5835:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1741,"nodeType":"Block","src":"16487:723:5","statements":[{"AST":{"nodeType":"YulBlock","src":"16549:655:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16570:4:5","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"16576:34:5","type":"","value":"0x5af43d5f5f3e6029573d5ffd5b3d5ff3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16563:6:5"},"nodeType":"YulFunctionCall","src":"16563:48:5"},"nodeType":"YulExpressionStatement","src":"16563:48:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16637:4:5","type":"","value":"0x14"},{"name":"implementation","nodeType":"YulIdentifier","src":"16643:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16630:6:5"},"nodeType":"YulFunctionCall","src":"16630:28:5"},"nodeType":"YulExpressionStatement","src":"16630:28:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16684:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"16690:38:5","type":"","value":"0x602d5f8160095f39f35f5f365f5f37365f73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16677:6:5"},"nodeType":"YulFunctionCall","src":"16677:52:5"},"nodeType":"YulExpressionStatement","src":"16677:52:5"},{"nodeType":"YulAssignment","src":"16751:40:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16771:1:5","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16774:4:5","type":"","value":"0x0e"},{"kind":"number","nodeType":"YulLiteral","src":"16780:4:5","type":"","value":"0x36"},{"name":"salt","nodeType":"YulIdentifier","src":"16786:4:5"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"16763:7:5"},"nodeType":"YulFunctionCall","src":"16763:28:5"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"16751:8:5"}]},{"body":{"nodeType":"YulBlock","src":"16870:210:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16967:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"16973:10:5","type":"","value":"0x30116425"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16960:6:5"},"nodeType":"YulFunctionCall","src":"16960:24:5"},"nodeType":"YulExpressionStatement","src":"16960:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17055:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"17061:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"17048:6:5"},"nodeType":"YulFunctionCall","src":"17048:18:5"},"nodeType":"YulExpressionStatement","src":"17048:18:5"}]},"condition":{"arguments":[{"name":"instance","nodeType":"YulIdentifier","src":"16860:8:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16853:6:5"},"nodeType":"YulFunctionCall","src":"16853:16:5"},"nodeType":"YulIf","src":"16850:230:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17186:4:5","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"17192:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17179:6:5"},"nodeType":"YulFunctionCall","src":"17179:15:5"},"nodeType":"YulExpressionStatement","src":"17179:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1733,"isOffset":false,"isSlot":false,"src":"16643:14:5","valueSize":1},{"declaration":1738,"isOffset":false,"isSlot":false,"src":"16751:8:5","valueSize":1},{"declaration":1738,"isOffset":false,"isSlot":false,"src":"16860:8:5","valueSize":1},{"declaration":1735,"isOffset":false,"isSlot":false,"src":"16786:4:5","valueSize":1}],"id":1740,"nodeType":"InlineAssembly","src":"16540:664:5"}]},"documentation":{"id":1731,"nodeType":"StructuredDocumentation","src":"16277:77:5","text":"@dev Deploys a deterministic PUSH0 clone of `implementation` with `salt`."},"id":1742,"implemented":true,"kind":"function","modifiers":[],"name":"cloneDeterministic_PUSH0","nameLocation":"16368:24:5","nodeType":"FunctionDefinition","parameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"implementation","nameLocation":"16401:14:5","nodeType":"VariableDeclaration","scope":1742,"src":"16393:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"16393:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"salt","nameLocation":"16425:4:5","nodeType":"VariableDeclaration","scope":1742,"src":"16417:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1734,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16417:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16392:38:5"},"returnParameters":{"id":1739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1738,"mutability":"mutable","name":"instance","nameLocation":"16473:8:5","nodeType":"VariableDeclaration","scope":1742,"src":"16465:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1737,"name":"address","nodeType":"ElementaryTypeName","src":"16465:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16464:18:5"},"scope":1870,"src":"16359:851:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1751,"nodeType":"Block","src":"17456:423:5","statements":[{"AST":{"nodeType":"YulBlock","src":"17518:355:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17539:4:5","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"17545:34:5","type":"","value":"0x5af43d5f5f3e6029573d5ffd5b3d5ff3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17532:6:5"},"nodeType":"YulFunctionCall","src":"17532:48:5"},"nodeType":"YulExpressionStatement","src":"17532:48:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17606:4:5","type":"","value":"0x14"},{"name":"implementation","nodeType":"YulIdentifier","src":"17612:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17599:6:5"},"nodeType":"YulFunctionCall","src":"17599:28:5"},"nodeType":"YulExpressionStatement","src":"17599:28:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17653:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"17659:38:5","type":"","value":"0x602d5f8160095f39f35f5f365f5f37365f73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17646:6:5"},"nodeType":"YulFunctionCall","src":"17646:52:5"},"nodeType":"YulExpressionStatement","src":"17646:52:5"},{"nodeType":"YulAssignment","src":"17720:29:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17738:4:5","type":"","value":"0x0e"},{"kind":"number","nodeType":"YulLiteral","src":"17744:4:5","type":"","value":"0x36"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"17728:9:5"},"nodeType":"YulFunctionCall","src":"17728:21:5"},"variableNames":[{"name":"hash","nodeType":"YulIdentifier","src":"17720:4:5"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17855:4:5","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"17861:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17848:6:5"},"nodeType":"YulFunctionCall","src":"17848:15:5"},"nodeType":"YulExpressionStatement","src":"17848:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1748,"isOffset":false,"isSlot":false,"src":"17720:4:5","valueSize":1},{"declaration":1745,"isOffset":false,"isSlot":false,"src":"17612:14:5","valueSize":1}],"id":1750,"nodeType":"InlineAssembly","src":"17509:364:5"}]},"documentation":{"id":1743,"nodeType":"StructuredDocumentation","src":"17216:146:5","text":"@dev Returns the initialization code hash of the PUSH0 clone of `implementation`.\n Used for mining vanity addresses with create2crunch."},"id":1752,"implemented":true,"kind":"function","modifiers":[],"name":"initCodeHash_PUSH0","nameLocation":"17376:18:5","nodeType":"FunctionDefinition","parameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"implementation","nameLocation":"17403:14:5","nodeType":"VariableDeclaration","scope":1752,"src":"17395:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"17395:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"17394:24:5"},"returnParameters":{"id":1749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1748,"mutability":"mutable","name":"hash","nameLocation":"17450:4:5","nodeType":"VariableDeclaration","scope":1752,"src":"17442:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17442:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17441:14:5"},"scope":1870,"src":"17367:512:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1778,"nodeType":"Block","src":"18271:137:5","statements":[{"assignments":[1765],"declarations":[{"constant":false,"id":1765,"mutability":"mutable","name":"hash","nameLocation":"18289:4:5","nodeType":"VariableDeclaration","scope":1778,"src":"18281:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18281:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1769,"initialValue":{"arguments":[{"id":1767,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1755,"src":"18315:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1766,"name":"initCodeHash_PUSH0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"18296:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18296:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"18281:49:5"},{"expression":{"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1770,"name":"predicted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1762,"src":"18340:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1772,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"18380:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1773,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"18386:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1774,"name":"deployer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1759,"src":"18392:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1771,"name":"predictDeterministicAddress","nodeType":"Identifier","overloadedDeclarations":[1720,1847,1861],"referencedDeclaration":1861,"src":"18352:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (bytes32,bytes32,address) pure returns (address)"}},"id":1775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18352:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18340:61:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1777,"nodeType":"ExpressionStatement","src":"18340:61:5"}]},"documentation":{"id":1753,"nodeType":"StructuredDocumentation","src":"17885:210:5","text":"@dev Returns the address of the deterministic PUSH0 clone of `implementation`,\n with `salt` by `deployer`.\n Note: The returned result has dirty upper 96 bits. Please clean if used in assembly."},"id":1779,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress_PUSH0","nameLocation":"18109:33:5","nodeType":"FunctionDefinition","parameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"implementation","nameLocation":"18160:14:5","nodeType":"VariableDeclaration","scope":1779,"src":"18152:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1754,"name":"address","nodeType":"ElementaryTypeName","src":"18152:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1757,"mutability":"mutable","name":"salt","nameLocation":"18192:4:5","nodeType":"VariableDeclaration","scope":1779,"src":"18184:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1756,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18184:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1759,"mutability":"mutable","name":"deployer","nameLocation":"18214:8:5","nodeType":"VariableDeclaration","scope":1779,"src":"18206:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1758,"name":"address","nodeType":"ElementaryTypeName","src":"18206:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18142:86:5"},"returnParameters":{"id":1763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1762,"mutability":"mutable","name":"predicted","nameLocation":"18260:9:5","nodeType":"VariableDeclaration","scope":1779,"src":"18252:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1761,"name":"address","nodeType":"ElementaryTypeName","src":"18252:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"18251:19:5"},"scope":1870,"src":"18100:308:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1790,"nodeType":"Block","src":"19102:11230:5","statements":[{"AST":{"nodeType":"YulBlock","src":"19121:11205:5","statements":[{"nodeType":"YulVariableDeclaration","src":"19223:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19249:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"19255:4:5","type":"","value":"0x60"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19245:3:5"},"nodeType":"YulFunctionCall","src":"19245:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19239:5:5"},"nodeType":"YulFunctionCall","src":"19239:22:5"},"variables":[{"name":"mBefore3","nodeType":"YulTypedName","src":"19227:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19274:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19300:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"19306:4:5","type":"","value":"0x40"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19296:3:5"},"nodeType":"YulFunctionCall","src":"19296:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19290:5:5"},"nodeType":"YulFunctionCall","src":"19290:22:5"},"variables":[{"name":"mBefore2","nodeType":"YulTypedName","src":"19278:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19325:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19351:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"19357:4:5","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19347:3:5"},"nodeType":"YulFunctionCall","src":"19347:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19341:5:5"},"nodeType":"YulFunctionCall","src":"19341:22:5"},"variables":[{"name":"mBefore1","nodeType":"YulTypedName","src":"19329:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19376:29:5","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19400:4:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19394:5:5"},"nodeType":"YulFunctionCall","src":"19394:11:5"},"variables":[{"name":"dataLength","nodeType":"YulTypedName","src":"19380:10:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19418:47:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"19441:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"19447:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19437:3:5"},"nodeType":"YulFunctionCall","src":"19437:15:5"},{"name":"dataLength","nodeType":"YulIdentifier","src":"19454:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19433:3:5"},"nodeType":"YulFunctionCall","src":"19433:32:5"},"variables":[{"name":"dataEnd","nodeType":"YulTypedName","src":"19422:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19478:29:5","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"19499:7:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"19493:5:5"},"nodeType":"YulFunctionCall","src":"19493:14:5"},"variables":[{"name":"mAfter1","nodeType":"YulTypedName","src":"19482:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"19602:37:5","value":{"arguments":[{"name":"dataLength","nodeType":"YulIdentifier","src":"19625:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"19637:1:5","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19621:3:5"},"nodeType":"YulFunctionCall","src":"19621:18:5"},"variables":[{"name":"extraLength","nodeType":"YulTypedName","src":"19606:11:5","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28669:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"28675:28:5","type":"","value":"0x5af43d3d93803e606057fd5bf3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28662:6:5"},"nodeType":"YulFunctionCall","src":"28662:42:5"},"nodeType":"YulExpressionStatement","src":"28662:42:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28784:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"28790:4:5","type":"","value":"0x0d"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28780:3:5"},"nodeType":"YulFunctionCall","src":"28780:15:5"},{"name":"implementation","nodeType":"YulIdentifier","src":"28797:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28773:6:5"},"nodeType":"YulFunctionCall","src":"28773:39:5"},"nodeType":"YulExpressionStatement","src":"28773:39:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"28900:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"28906:4:5","type":"","value":"0x21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28896:3:5"},"nodeType":"YulFunctionCall","src":"28896:15:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"28936:4:5","type":"","value":"0x48"},{"name":"extraLength","nodeType":"YulIdentifier","src":"28942:11:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"28932:3:5"},"nodeType":"YulFunctionCall","src":"28932:22:5"},{"kind":"number","nodeType":"YulLiteral","src":"28956:52:5","type":"","value":"0x593da1005b363d3d373d3d3d3d610000806062363936013d73"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"28929:2:5"},"nodeType":"YulFunctionCall","src":"28929:80:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28872:6:5"},"nodeType":"YulFunctionCall","src":"28872:151:5"},"nodeType":"YulExpressionStatement","src":"28872:151:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"29114:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"29120:4:5","type":"","value":"0x3a"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29110:3:5"},"nodeType":"YulFunctionCall","src":"29110:15:5"},{"kind":"number","nodeType":"YulLiteral","src":"29127:66:5","type":"","value":"0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29086:6:5"},"nodeType":"YulFunctionCall","src":"29086:121:5"},"nodeType":"YulExpressionStatement","src":"29086:121:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"29431:4:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29441:4:5","type":"","value":"0x59"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"29450:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"29463:6:5","type":"","value":"0xff9e"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"29447:2:5"},"nodeType":"YulFunctionCall","src":"29447:23:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29437:3:5"},"nodeType":"YulFunctionCall","src":"29437:34:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29427:3:5"},"nodeType":"YulFunctionCall","src":"29427:45:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29497:4:5","type":"","value":"0x78"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"29507:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"29520:4:5","type":"","value":"0x62"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29503:3:5"},"nodeType":"YulFunctionCall","src":"29503:22:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"29493:3:5"},"nodeType":"YulFunctionCall","src":"29493:33:5"},{"kind":"number","nodeType":"YulLiteral","src":"29528:40:5","type":"","value":"0xfd6100003d81600a3d39f336602c57343d527f"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"29490:2:5"},"nodeType":"YulFunctionCall","src":"29490:79:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29220:6:5"},"nodeType":"YulFunctionCall","src":"29220:363:5"},"nodeType":"YulExpressionStatement","src":"29220:363:5"},{"expression":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"29603:7:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29616:4:5","type":"","value":"0xf0"},{"name":"extraLength","nodeType":"YulIdentifier","src":"29622:11:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"29612:3:5"},"nodeType":"YulFunctionCall","src":"29612:22:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29596:6:5"},"nodeType":"YulFunctionCall","src":"29596:39:5"},"nodeType":"YulExpressionStatement","src":"29596:39:5"},{"nodeType":"YulAssignment","src":"29685:62:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29704:1:5","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"29711:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"29717:4:5","type":"","value":"0x4c"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29707:3:5"},"nodeType":"YulFunctionCall","src":"29707:15:5"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"29728:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"29741:4:5","type":"","value":"0x6c"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29724:3:5"},"nodeType":"YulFunctionCall","src":"29724:22:5"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"29697:6:5"},"nodeType":"YulFunctionCall","src":"29697:50:5"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"29685:8:5"}]},{"body":{"nodeType":"YulBlock","src":"29827:210:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"29924:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"29930:10:5","type":"","value":"0x30116425"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29917:6:5"},"nodeType":"YulFunctionCall","src":"29917:24:5"},"nodeType":"YulExpressionStatement","src":"29917:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30012:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"30018:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30005:6:5"},"nodeType":"YulFunctionCall","src":"30005:18:5"},"nodeType":"YulExpressionStatement","src":"30005:18:5"}]},"condition":{"arguments":[{"name":"instance","nodeType":"YulIdentifier","src":"29817:8:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"29810:6:5"},"nodeType":"YulFunctionCall","src":"29810:16:5"},"nodeType":"YulIf","src":"29807:230:5"},{"expression":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"30124:7:5"},{"name":"mAfter1","nodeType":"YulIdentifier","src":"30133:7:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30117:6:5"},"nodeType":"YulFunctionCall","src":"30117:24:5"},"nodeType":"YulExpressionStatement","src":"30117:24:5"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30161:4:5"},{"name":"dataLength","nodeType":"YulIdentifier","src":"30167:10:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30154:6:5"},"nodeType":"YulFunctionCall","src":"30154:24:5"},"nodeType":"YulExpressionStatement","src":"30154:24:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30202:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"30208:4:5","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30198:3:5"},"nodeType":"YulFunctionCall","src":"30198:15:5"},{"name":"mBefore1","nodeType":"YulIdentifier","src":"30215:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30191:6:5"},"nodeType":"YulFunctionCall","src":"30191:33:5"},"nodeType":"YulExpressionStatement","src":"30191:33:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30248:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"30254:4:5","type":"","value":"0x40"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30244:3:5"},"nodeType":"YulFunctionCall","src":"30244:15:5"},{"name":"mBefore2","nodeType":"YulIdentifier","src":"30261:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30237:6:5"},"nodeType":"YulFunctionCall","src":"30237:33:5"},"nodeType":"YulExpressionStatement","src":"30237:33:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30294:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"30300:4:5","type":"","value":"0x60"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30290:3:5"},"nodeType":"YulFunctionCall","src":"30290:15:5"},{"name":"mBefore3","nodeType":"YulIdentifier","src":"30307:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30283:6:5"},"nodeType":"YulFunctionCall","src":"30283:33:5"},"nodeType":"YulExpressionStatement","src":"30283:33:5"}]},"evmVersion":"london","externalReferences":[{"declaration":1784,"isOffset":false,"isSlot":false,"src":"19249:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"19300:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"19351:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"19400:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"19441:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"28669:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"28784:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"28900:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"29114:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"29431:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"29711:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"30161:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"30202:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"30248:4:5","valueSize":1},{"declaration":1784,"isOffset":false,"isSlot":false,"src":"30294:4:5","valueSize":1},{"declaration":1782,"isOffset":false,"isSlot":false,"src":"28797:14:5","valueSize":1},{"declaration":1787,"isOffset":false,"isSlot":false,"src":"29685:8:5","valueSize":1},{"declaration":1787,"isOffset":false,"isSlot":false,"src":"29817:8:5","valueSize":1}],"id":1789,"nodeType":"InlineAssembly","src":"19112:11214:5"}]},"documentation":{"id":1780,"nodeType":"StructuredDocumentation","src":"18697:306:5","text":"@dev Deploys a minimal proxy with `implementation`,\n using immutable arguments encoded in `data`.\n Note: This implementation of CWIA differs from the original implementation.\n If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`."},"id":1791,"implemented":true,"kind":"function","modifiers":[],"name":"clone","nameLocation":"19017:5:5","nodeType":"FunctionDefinition","parameters":{"id":1785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1782,"mutability":"mutable","name":"implementation","nameLocation":"19031:14:5","nodeType":"VariableDeclaration","scope":1791,"src":"19023:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1781,"name":"address","nodeType":"ElementaryTypeName","src":"19023:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1784,"mutability":"mutable","name":"data","nameLocation":"19060:4:5","nodeType":"VariableDeclaration","scope":1791,"src":"19047:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1783,"name":"bytes","nodeType":"ElementaryTypeName","src":"19047:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"19022:43:5"},"returnParameters":{"id":1788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1787,"mutability":"mutable","name":"instance","nameLocation":"19092:8:5","nodeType":"VariableDeclaration","scope":1791,"src":"19084:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1786,"name":"address","nodeType":"ElementaryTypeName","src":"19084:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19083:18:5"},"scope":1870,"src":"19008:11324:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1804,"nodeType":"Block","src":"30807:2279:5","statements":[{"AST":{"nodeType":"YulBlock","src":"30826:2254:5","statements":[{"nodeType":"YulVariableDeclaration","src":"30928:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"30954:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"30960:4:5","type":"","value":"0x60"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30950:3:5"},"nodeType":"YulFunctionCall","src":"30950:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30944:5:5"},"nodeType":"YulFunctionCall","src":"30944:22:5"},"variables":[{"name":"mBefore3","nodeType":"YulTypedName","src":"30932:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"30979:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31005:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31011:4:5","type":"","value":"0x40"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31001:3:5"},"nodeType":"YulFunctionCall","src":"31001:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30995:5:5"},"nodeType":"YulFunctionCall","src":"30995:22:5"},"variables":[{"name":"mBefore2","nodeType":"YulTypedName","src":"30983:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31030:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31056:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31062:4:5","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31052:3:5"},"nodeType":"YulFunctionCall","src":"31052:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31046:5:5"},"nodeType":"YulFunctionCall","src":"31046:22:5"},"variables":[{"name":"mBefore1","nodeType":"YulTypedName","src":"31034:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31081:29:5","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31105:4:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31099:5:5"},"nodeType":"YulFunctionCall","src":"31099:11:5"},"variables":[{"name":"dataLength","nodeType":"YulTypedName","src":"31085:10:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31123:47:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31146:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31152:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31142:3:5"},"nodeType":"YulFunctionCall","src":"31142:15:5"},{"name":"dataLength","nodeType":"YulIdentifier","src":"31159:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31138:3:5"},"nodeType":"YulFunctionCall","src":"31138:32:5"},"variables":[{"name":"dataEnd","nodeType":"YulTypedName","src":"31127:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31183:29:5","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"31204:7:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31198:5:5"},"nodeType":"YulFunctionCall","src":"31198:14:5"},"variables":[{"name":"mAfter1","nodeType":"YulTypedName","src":"31187:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"31307:37:5","value":{"arguments":[{"name":"dataLength","nodeType":"YulIdentifier","src":"31330:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"31342:1:5","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31326:3:5"},"nodeType":"YulFunctionCall","src":"31326:18:5"},"variables":[{"name":"extraLength","nodeType":"YulTypedName","src":"31311:11:5","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31416:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31422:28:5","type":"","value":"0x5af43d3d93803e606057fd5bf3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31409:6:5"},"nodeType":"YulFunctionCall","src":"31409:42:5"},"nodeType":"YulExpressionStatement","src":"31409:42:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31531:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31537:4:5","type":"","value":"0x0d"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31527:3:5"},"nodeType":"YulFunctionCall","src":"31527:15:5"},{"name":"implementation","nodeType":"YulIdentifier","src":"31544:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31520:6:5"},"nodeType":"YulFunctionCall","src":"31520:39:5"},"nodeType":"YulExpressionStatement","src":"31520:39:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31647:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31653:4:5","type":"","value":"0x21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31643:3:5"},"nodeType":"YulFunctionCall","src":"31643:15:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31683:4:5","type":"","value":"0x48"},{"name":"extraLength","nodeType":"YulIdentifier","src":"31689:11:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31679:3:5"},"nodeType":"YulFunctionCall","src":"31679:22:5"},{"kind":"number","nodeType":"YulLiteral","src":"31703:52:5","type":"","value":"0x593da1005b363d3d373d3d3d3d610000806062363936013d73"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"31676:2:5"},"nodeType":"YulFunctionCall","src":"31676:80:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31619:6:5"},"nodeType":"YulFunctionCall","src":"31619:151:5"},"nodeType":"YulExpressionStatement","src":"31619:151:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31861:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"31867:4:5","type":"","value":"0x3a"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31857:3:5"},"nodeType":"YulFunctionCall","src":"31857:15:5"},{"kind":"number","nodeType":"YulLiteral","src":"31874:66:5","type":"","value":"0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31833:6:5"},"nodeType":"YulFunctionCall","src":"31833:121:5"},"nodeType":"YulExpressionStatement","src":"31833:121:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32178:4:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32188:4:5","type":"","value":"0x59"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"32197:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"32210:6:5","type":"","value":"0xff9e"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"32194:2:5"},"nodeType":"YulFunctionCall","src":"32194:23:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32184:3:5"},"nodeType":"YulFunctionCall","src":"32184:34:5"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32174:3:5"},"nodeType":"YulFunctionCall","src":"32174:45:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32244:4:5","type":"","value":"0x78"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"32254:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"32267:4:5","type":"","value":"0x62"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32250:3:5"},"nodeType":"YulFunctionCall","src":"32250:22:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"32240:3:5"},"nodeType":"YulFunctionCall","src":"32240:33:5"},{"kind":"number","nodeType":"YulLiteral","src":"32275:40:5","type":"","value":"0xfd6100003d81600a3d39f336602c57343d527f"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"32237:2:5"},"nodeType":"YulFunctionCall","src":"32237:79:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31967:6:5"},"nodeType":"YulFunctionCall","src":"31967:363:5"},"nodeType":"YulExpressionStatement","src":"31967:363:5"},{"expression":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"32350:7:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32363:4:5","type":"","value":"0xf0"},{"name":"extraLength","nodeType":"YulIdentifier","src":"32369:11:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"32359:3:5"},"nodeType":"YulFunctionCall","src":"32359:22:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32343:6:5"},"nodeType":"YulFunctionCall","src":"32343:39:5"},"nodeType":"YulExpressionStatement","src":"32343:39:5"},{"nodeType":"YulAssignment","src":"32432:69:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32452:1:5","type":"","value":"0"},{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32459:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"32465:4:5","type":"","value":"0x4c"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32455:3:5"},"nodeType":"YulFunctionCall","src":"32455:15:5"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"32476:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"32489:4:5","type":"","value":"0x6c"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32472:3:5"},"nodeType":"YulFunctionCall","src":"32472:22:5"},{"name":"salt","nodeType":"YulIdentifier","src":"32496:4:5"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"32444:7:5"},"nodeType":"YulFunctionCall","src":"32444:57:5"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"32432:8:5"}]},{"body":{"nodeType":"YulBlock","src":"32581:210:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32678:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"32684:10:5","type":"","value":"0x30116425"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32671:6:5"},"nodeType":"YulFunctionCall","src":"32671:24:5"},"nodeType":"YulExpressionStatement","src":"32671:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32766:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"32772:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32759:6:5"},"nodeType":"YulFunctionCall","src":"32759:18:5"},"nodeType":"YulExpressionStatement","src":"32759:18:5"}]},"condition":{"arguments":[{"name":"instance","nodeType":"YulIdentifier","src":"32571:8:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"32564:6:5"},"nodeType":"YulFunctionCall","src":"32564:16:5"},"nodeType":"YulIf","src":"32561:230:5"},{"expression":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"32878:7:5"},{"name":"mAfter1","nodeType":"YulIdentifier","src":"32887:7:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32871:6:5"},"nodeType":"YulFunctionCall","src":"32871:24:5"},"nodeType":"YulExpressionStatement","src":"32871:24:5"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32915:4:5"},{"name":"dataLength","nodeType":"YulIdentifier","src":"32921:10:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32908:6:5"},"nodeType":"YulFunctionCall","src":"32908:24:5"},"nodeType":"YulExpressionStatement","src":"32908:24:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"32956:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"32962:4:5","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32952:3:5"},"nodeType":"YulFunctionCall","src":"32952:15:5"},{"name":"mBefore1","nodeType":"YulIdentifier","src":"32969:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32945:6:5"},"nodeType":"YulFunctionCall","src":"32945:33:5"},"nodeType":"YulExpressionStatement","src":"32945:33:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33002:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"33008:4:5","type":"","value":"0x40"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32998:3:5"},"nodeType":"YulFunctionCall","src":"32998:15:5"},{"name":"mBefore2","nodeType":"YulIdentifier","src":"33015:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32991:6:5"},"nodeType":"YulFunctionCall","src":"32991:33:5"},"nodeType":"YulExpressionStatement","src":"32991:33:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33048:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"33054:4:5","type":"","value":"0x60"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33044:3:5"},"nodeType":"YulFunctionCall","src":"33044:15:5"},{"name":"mBefore3","nodeType":"YulIdentifier","src":"33061:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"33037:6:5"},"nodeType":"YulFunctionCall","src":"33037:33:5"},"nodeType":"YulExpressionStatement","src":"33037:33:5"}]},"evmVersion":"london","externalReferences":[{"declaration":1796,"isOffset":false,"isSlot":false,"src":"30954:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31005:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31056:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31105:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31146:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31416:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31531:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31647:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"31861:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"32178:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"32459:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"32915:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"32956:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"33002:4:5","valueSize":1},{"declaration":1796,"isOffset":false,"isSlot":false,"src":"33048:4:5","valueSize":1},{"declaration":1794,"isOffset":false,"isSlot":false,"src":"31544:14:5","valueSize":1},{"declaration":1801,"isOffset":false,"isSlot":false,"src":"32432:8:5","valueSize":1},{"declaration":1801,"isOffset":false,"isSlot":false,"src":"32571:8:5","valueSize":1},{"declaration":1798,"isOffset":false,"isSlot":false,"src":"32496:4:5","valueSize":1}],"id":1803,"nodeType":"InlineAssembly","src":"30817:2263:5"}]},"documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"30338:323:5","text":"@dev Deploys a deterministic clone of `implementation`,\n using immutable arguments encoded in `data`, with `salt`.\n Note: This implementation of CWIA differs from the original implementation.\n If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`."},"id":1805,"implemented":true,"kind":"function","modifiers":[],"name":"cloneDeterministic","nameLocation":"30675:18:5","nodeType":"FunctionDefinition","parameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"implementation","nameLocation":"30702:14:5","nodeType":"VariableDeclaration","scope":1805,"src":"30694:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"30694:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"data","nameLocation":"30731:4:5","nodeType":"VariableDeclaration","scope":1805,"src":"30718:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1795,"name":"bytes","nodeType":"ElementaryTypeName","src":"30718:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"salt","nameLocation":"30745:4:5","nodeType":"VariableDeclaration","scope":1805,"src":"30737:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1797,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30737:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"30693:57:5"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"instance","nameLocation":"30793:8:5","nodeType":"VariableDeclaration","scope":1805,"src":"30785:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1800,"name":"address","nodeType":"ElementaryTypeName","src":"30785:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30784:18:5"},"scope":1870,"src":"30666:2420:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1816,"nodeType":"Block","src":"33419:2041:5","statements":[{"AST":{"nodeType":"YulBlock","src":"33438:2016:5","statements":[{"nodeType":"YulVariableDeclaration","src":"33540:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33566:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"33572:4:5","type":"","value":"0x60"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33562:3:5"},"nodeType":"YulFunctionCall","src":"33562:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33556:5:5"},"nodeType":"YulFunctionCall","src":"33556:22:5"},"variables":[{"name":"mBefore3","nodeType":"YulTypedName","src":"33544:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33591:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33617:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"33623:4:5","type":"","value":"0x40"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33613:3:5"},"nodeType":"YulFunctionCall","src":"33613:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33607:5:5"},"nodeType":"YulFunctionCall","src":"33607:22:5"},"variables":[{"name":"mBefore2","nodeType":"YulTypedName","src":"33595:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33642:38:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33668:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"33674:4:5","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"33664:3:5"},"nodeType":"YulFunctionCall","src":"33664:15:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33658:5:5"},"nodeType":"YulFunctionCall","src":"33658:22:5"},"variables":[{"name":"mBefore1","nodeType":"YulTypedName","src":"33646:8:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33693:29:5","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33717:4:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33711:5:5"},"nodeType":"YulFunctionCall","src":"33711:11:5"},"variables":[{"name":"dataLength","nodeType":"YulTypedName","src":"33697:10:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33735:47:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"33758:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"33764:4:5","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33754:3:5"},"nodeType":"YulFunctionCall","src":"33754:15:5"},{"name":"dataLength","nodeType":"YulIdentifier","src":"33771:10:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33750:3:5"},"nodeType":"YulFunctionCall","src":"33750:32:5"},"variables":[{"name":"dataEnd","nodeType":"YulTypedName","src":"33739:7:5","type":""}]},{"nodeType":"YulVariableDeclaration","src":"33795:29:5","value":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"33816:7:5"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"33810:5:5"},"nodeType":"YulFunctionCall","src":"33810:14:5"},"variables":[{"name":"mAfter1","nodeType":"YulTypedName","src":"33799:7:5","type":""}]},{"expression":{"arguments":[{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"34027:14:5"},"nodeType":"YulFunctionCall","src":"34027:16:5"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"34045:14:5"},"nodeType":"YulFunctionCall","src":"34045:16:5"},{"arguments":[{"name":"dataLength","nodeType":"YulIdentifier","src":"34066:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"34078:6:5","type":"","value":"0xff9b"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"34063:2:5"},"nodeType":"YulFunctionCall","src":"34063:22:5"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"34012:14:5"},"nodeType":"YulFunctionCall","src":"34012:74:5"},"nodeType":"YulExpressionStatement","src":"34012:74:5"},{"nodeType":"YulVariableDeclaration","src":"34181:37:5","value":{"arguments":[{"name":"dataLength","nodeType":"YulIdentifier","src":"34204:10:5"},{"kind":"number","nodeType":"YulLiteral","src":"34216:1:5","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34200:3:5"},"nodeType":"YulFunctionCall","src":"34200:18:5"},"variables":[{"name":"extraLength","nodeType":"YulTypedName","src":"34185:11:5","type":""}]},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34290:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"34296:28:5","type":"","value":"0x5af43d3d93803e606057fd5bf3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34283:6:5"},"nodeType":"YulFunctionCall","src":"34283:42:5"},"nodeType":"YulExpressionStatement","src":"34283:42:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34405:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"34411:4:5","type":"","value":"0x0d"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34401:3:5"},"nodeType":"YulFunctionCall","src":"34401:15:5"},{"name":"implementation","nodeType":"YulIdentifier","src":"34418:14:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34394:6:5"},"nodeType":"YulFunctionCall","src":"34394:39:5"},"nodeType":"YulExpressionStatement","src":"34394:39:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34521:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"34527:4:5","type":"","value":"0x21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34517:3:5"},"nodeType":"YulFunctionCall","src":"34517:15:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34557:4:5","type":"","value":"0x48"},{"name":"extraLength","nodeType":"YulIdentifier","src":"34563:11:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"34553:3:5"},"nodeType":"YulFunctionCall","src":"34553:22:5"},{"kind":"number","nodeType":"YulLiteral","src":"34577:52:5","type":"","value":"0x593da1005b363d3d373d3d3d3d610000806062363936013d73"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"34550:2:5"},"nodeType":"YulFunctionCall","src":"34550:80:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34493:6:5"},"nodeType":"YulFunctionCall","src":"34493:151:5"},"nodeType":"YulExpressionStatement","src":"34493:151:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34735:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"34741:4:5","type":"","value":"0x3a"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34731:3:5"},"nodeType":"YulFunctionCall","src":"34731:15:5"},{"kind":"number","nodeType":"YulLiteral","src":"34748:66:5","type":"","value":"0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34707:6:5"},"nodeType":"YulFunctionCall","src":"34707:121:5"},"nodeType":"YulExpressionStatement","src":"34707:121:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"34869:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"34875:4:5","type":"","value":"0x5a"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34865:3:5"},"nodeType":"YulFunctionCall","src":"34865:15:5"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"34905:4:5","type":"","value":"0x78"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"34915:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"34928:4:5","type":"","value":"0x62"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34911:3:5"},"nodeType":"YulFunctionCall","src":"34911:22:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"34901:3:5"},"nodeType":"YulFunctionCall","src":"34901:33:5"},{"kind":"number","nodeType":"YulLiteral","src":"34936:38:5","type":"","value":"0x6100003d81600a3d39f336602c57343d527f"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"34898:2:5"},"nodeType":"YulFunctionCall","src":"34898:77:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34841:6:5"},"nodeType":"YulFunctionCall","src":"34841:148:5"},"nodeType":"YulExpressionStatement","src":"34841:148:5"},{"expression":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"35009:7:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"35022:4:5","type":"","value":"0xf0"},{"name":"extraLength","nodeType":"YulIdentifier","src":"35028:11:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"35018:3:5"},"nodeType":"YulFunctionCall","src":"35018:22:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35002:6:5"},"nodeType":"YulFunctionCall","src":"35002:39:5"},"nodeType":"YulExpressionStatement","src":"35002:39:5"},{"nodeType":"YulAssignment","src":"35107:58:5","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35129:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"35135:4:5","type":"","value":"0x4c"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35125:3:5"},"nodeType":"YulFunctionCall","src":"35125:15:5"},{"arguments":[{"name":"extraLength","nodeType":"YulIdentifier","src":"35146:11:5"},{"kind":"number","nodeType":"YulLiteral","src":"35159:4:5","type":"","value":"0x6c"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35142:3:5"},"nodeType":"YulFunctionCall","src":"35142:22:5"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"35115:9:5"},"nodeType":"YulFunctionCall","src":"35115:50:5"},"variableNames":[{"name":"hash","nodeType":"YulIdentifier","src":"35107:4:5"}]},{"expression":{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"35252:7:5"},{"name":"mAfter1","nodeType":"YulIdentifier","src":"35261:7:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35245:6:5"},"nodeType":"YulFunctionCall","src":"35245:24:5"},"nodeType":"YulExpressionStatement","src":"35245:24:5"},{"expression":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35289:4:5"},{"name":"dataLength","nodeType":"YulIdentifier","src":"35295:10:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35282:6:5"},"nodeType":"YulFunctionCall","src":"35282:24:5"},"nodeType":"YulExpressionStatement","src":"35282:24:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35330:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"35336:4:5","type":"","value":"0x20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35326:3:5"},"nodeType":"YulFunctionCall","src":"35326:15:5"},{"name":"mBefore1","nodeType":"YulIdentifier","src":"35343:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35319:6:5"},"nodeType":"YulFunctionCall","src":"35319:33:5"},"nodeType":"YulExpressionStatement","src":"35319:33:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35376:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"35382:4:5","type":"","value":"0x40"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35372:3:5"},"nodeType":"YulFunctionCall","src":"35372:15:5"},{"name":"mBefore2","nodeType":"YulIdentifier","src":"35389:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35365:6:5"},"nodeType":"YulFunctionCall","src":"35365:33:5"},"nodeType":"YulExpressionStatement","src":"35365:33:5"},{"expression":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"35422:4:5"},{"kind":"number","nodeType":"YulLiteral","src":"35428:4:5","type":"","value":"0x60"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"35418:3:5"},"nodeType":"YulFunctionCall","src":"35418:15:5"},{"name":"mBefore3","nodeType":"YulIdentifier","src":"35435:8:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35411:6:5"},"nodeType":"YulFunctionCall","src":"35411:33:5"},"nodeType":"YulExpressionStatement","src":"35411:33:5"}]},"evmVersion":"london","externalReferences":[{"declaration":1810,"isOffset":false,"isSlot":false,"src":"33566:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"33617:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"33668:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"33717:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"33758:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"34290:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"34405:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"34521:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"34735:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"34869:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"35129:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"35289:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"35330:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"35376:4:5","valueSize":1},{"declaration":1810,"isOffset":false,"isSlot":false,"src":"35422:4:5","valueSize":1},{"declaration":1813,"isOffset":false,"isSlot":false,"src":"35107:4:5","valueSize":1},{"declaration":1808,"isOffset":false,"isSlot":false,"src":"34418:14:5","valueSize":1}],"id":1815,"nodeType":"InlineAssembly","src":"33429:2025:5"}]},"documentation":{"id":1806,"nodeType":"StructuredDocumentation","src":"33092:192:5","text":"@dev Returns the initialization code hash of the clone of `implementation`\n using immutable arguments encoded in `data`.\n Used for mining vanity addresses with create2crunch."},"id":1817,"implemented":true,"kind":"function","modifiers":[],"name":"initCodeHash","nameLocation":"33298:12:5","nodeType":"FunctionDefinition","parameters":{"id":1811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1808,"mutability":"mutable","name":"implementation","nameLocation":"33319:14:5","nodeType":"VariableDeclaration","scope":1817,"src":"33311:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1807,"name":"address","nodeType":"ElementaryTypeName","src":"33311:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1810,"mutability":"mutable","name":"data","nameLocation":"33348:4:5","nodeType":"VariableDeclaration","scope":1817,"src":"33335:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1809,"name":"bytes","nodeType":"ElementaryTypeName","src":"33335:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33310:43:5"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1813,"mutability":"mutable","name":"hash","nameLocation":"33409:4:5","nodeType":"VariableDeclaration","scope":1817,"src":"33401:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"33401:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"33400:14:5"},"scope":1870,"src":"33289:2171:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1846,"nodeType":"Block","src":"35912:137:5","statements":[{"assignments":[1832],"declarations":[{"constant":false,"id":1832,"mutability":"mutable","name":"hash","nameLocation":"35930:4:5","nodeType":"VariableDeclaration","scope":1846,"src":"35922:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35922:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1837,"initialValue":{"arguments":[{"id":1834,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"35950:14:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1835,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"35966:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1833,"name":"initCodeHash","nodeType":"Identifier","overloadedDeclarations":[1693,1817],"referencedDeclaration":1817,"src":"35937:12:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (address,bytes memory) pure returns (bytes32)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35937:34:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"35922:49:5"},{"expression":{"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1838,"name":"predicted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"35981:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1840,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"36021:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1841,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"36027:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1842,"name":"deployer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1826,"src":"36033:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1839,"name":"predictDeterministicAddress","nodeType":"Identifier","overloadedDeclarations":[1720,1847,1861],"referencedDeclaration":1861,"src":"35993:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (bytes32,bytes32,address) pure returns (address)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"35993:49:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"35981:61:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1845,"nodeType":"ExpressionStatement","src":"35981:61:5"}]},"documentation":{"id":1818,"nodeType":"StructuredDocumentation","src":"35466:249:5","text":"@dev Returns the address of the deterministic clone of\n `implementation` using immutable arguments encoded in `data`, with `salt`, by `deployer`.\n Note: The returned result has dirty upper 96 bits. Please clean if used in assembly."},"id":1847,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"35729:27:5","nodeType":"FunctionDefinition","parameters":{"id":1827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"mutability":"mutable","name":"implementation","nameLocation":"35774:14:5","nodeType":"VariableDeclaration","scope":1847,"src":"35766:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"35766:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1822,"mutability":"mutable","name":"data","nameLocation":"35811:4:5","nodeType":"VariableDeclaration","scope":1847,"src":"35798:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1821,"name":"bytes","nodeType":"ElementaryTypeName","src":"35798:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1824,"mutability":"mutable","name":"salt","nameLocation":"35833:4:5","nodeType":"VariableDeclaration","scope":1847,"src":"35825:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1823,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35825:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1826,"mutability":"mutable","name":"deployer","nameLocation":"35855:8:5","nodeType":"VariableDeclaration","scope":1847,"src":"35847:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1825,"name":"address","nodeType":"ElementaryTypeName","src":"35847:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"35756:113:5"},"returnParameters":{"id":1830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"predicted","nameLocation":"35901:9:5","nodeType":"VariableDeclaration","scope":1847,"src":"35893:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"35893:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"35892:19:5"},"scope":1870,"src":"35720:329:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1860,"nodeType":"Block","src":"36720:451:5","statements":[{"AST":{"nodeType":"YulBlock","src":"36782:383:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36856:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"36862:4:5","type":"","value":"0xff"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"36848:7:5"},"nodeType":"YulFunctionCall","src":"36848:19:5"},"nodeType":"YulExpressionStatement","src":"36848:19:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36908:4:5","type":"","value":"0x35"},{"name":"hash","nodeType":"YulIdentifier","src":"36914:4:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36901:6:5"},"nodeType":"YulFunctionCall","src":"36901:18:5"},"nodeType":"YulExpressionStatement","src":"36901:18:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36939:4:5","type":"","value":"0x01"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36949:2:5","type":"","value":"96"},{"name":"deployer","nodeType":"YulIdentifier","src":"36953:8:5"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"36945:3:5"},"nodeType":"YulFunctionCall","src":"36945:17:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36932:6:5"},"nodeType":"YulFunctionCall","src":"36932:31:5"},"nodeType":"YulExpressionStatement","src":"36932:31:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"36983:4:5","type":"","value":"0x15"},{"name":"salt","nodeType":"YulIdentifier","src":"36989:4:5"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36976:6:5"},"nodeType":"YulFunctionCall","src":"36976:18:5"},"nodeType":"YulExpressionStatement","src":"36976:18:5"},{"nodeType":"YulAssignment","src":"37007:34:5","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37030:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"37036:4:5","type":"","value":"0x55"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"37020:9:5"},"nodeType":"YulFunctionCall","src":"37020:21:5"},"variableNames":[{"name":"predicted","nodeType":"YulIdentifier","src":"37007:9:5"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37147:4:5","type":"","value":"0x35"},{"kind":"number","nodeType":"YulLiteral","src":"37153:1:5","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37140:6:5"},"nodeType":"YulFunctionCall","src":"37140:15:5"},"nodeType":"YulExpressionStatement","src":"37140:15:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1854,"isOffset":false,"isSlot":false,"src":"36953:8:5","valueSize":1},{"declaration":1850,"isOffset":false,"isSlot":false,"src":"36914:4:5","valueSize":1},{"declaration":1857,"isOffset":false,"isSlot":false,"src":"37007:9:5","valueSize":1},{"declaration":1852,"isOffset":false,"isSlot":false,"src":"36989:4:5","valueSize":1}],"id":1859,"nodeType":"InlineAssembly","src":"36773:392:5"}]},"documentation":{"id":1848,"nodeType":"StructuredDocumentation","src":"36338:224:5","text":"@dev Returns the address when a contract with initialization code hash,\n `hash`, is deployed with `salt`, by `deployer`.\n Note: The returned result has dirty upper 96 bits. Please clean if used in assembly."},"id":1861,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"36576:27:5","nodeType":"FunctionDefinition","parameters":{"id":1855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"hash","nameLocation":"36612:4:5","nodeType":"VariableDeclaration","scope":1861,"src":"36604:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36604:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"salt","nameLocation":"36626:4:5","nodeType":"VariableDeclaration","scope":1861,"src":"36618:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36618:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1854,"mutability":"mutable","name":"deployer","nameLocation":"36640:8:5","nodeType":"VariableDeclaration","scope":1861,"src":"36632:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"36632:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"36603:46:5"},"returnParameters":{"id":1858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1857,"mutability":"mutable","name":"predicted","nameLocation":"36705:9:5","nodeType":"VariableDeclaration","scope":1861,"src":"36697:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1856,"name":"address","nodeType":"ElementaryTypeName","src":"36697:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"36696:19:5"},"scope":1870,"src":"36567:604:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1868,"nodeType":"Block","src":"37326:457:5","statements":[{"AST":{"nodeType":"YulBlock","src":"37388:389:5","statements":[{"body":{"nodeType":"YulBlock","src":"37547:220:5","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37654:4:5","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"37660:10:5","type":"","value":"0x2f634836"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37647:6:5"},"nodeType":"YulFunctionCall","src":"37647:24:5"},"nodeType":"YulExpressionStatement","src":"37647:24:5"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37742:4:5","type":"","value":"0x1c"},{"kind":"number","nodeType":"YulLiteral","src":"37748:4:5","type":"","value":"0x04"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"37735:6:5"},"nodeType":"YulFunctionCall","src":"37735:18:5"},"nodeType":"YulExpressionStatement","src":"37735:18:5"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37505:2:5","type":"","value":"96"},{"name":"salt","nodeType":"YulIdentifier","src":"37509:4:5"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"37501:3:5"},"nodeType":"YulFunctionCall","src":"37501:13:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"37494:6:5"},"nodeType":"YulFunctionCall","src":"37494:21:5"},{"arguments":[{"arguments":[],"functionName":{"name":"caller","nodeType":"YulIdentifier","src":"37520:6:5"},"nodeType":"YulFunctionCall","src":"37520:8:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"37534:2:5","type":"","value":"96"},{"name":"salt","nodeType":"YulIdentifier","src":"37538:4:5"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"37530:3:5"},"nodeType":"YulFunctionCall","src":"37530:13:5"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"37517:2:5"},"nodeType":"YulFunctionCall","src":"37517:27:5"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"37491:2:5"},"nodeType":"YulFunctionCall","src":"37491:54:5"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"37484:6:5"},"nodeType":"YulFunctionCall","src":"37484:62:5"},"nodeType":"YulIf","src":"37481:286:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1864,"isOffset":false,"isSlot":false,"src":"37509:4:5","valueSize":1},{"declaration":1864,"isOffset":false,"isSlot":false,"src":"37538:4:5","valueSize":1}],"id":1867,"nodeType":"InlineAssembly","src":"37379:398:5"}]},"documentation":{"id":1862,"nodeType":"StructuredDocumentation","src":"37177:85:5","text":"@dev Reverts if `salt` does not start with either the zero address or the caller."},"id":1869,"implemented":true,"kind":"function","modifiers":[],"name":"checkStartsWithCaller","nameLocation":"37276:21:5","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1864,"mutability":"mutable","name":"salt","nameLocation":"37306:4:5","nodeType":"VariableDeclaration","scope":1869,"src":"37298:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"37298:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"37297:14:5"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[],"src":"37326:0:5"},"scope":1870,"src":"37267:516:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1871,"src":"1500:36285:5","usedErrors":[1658,1661]}],"src":"32:37754:5"},"id":5}},"contracts":{"contracts/Base64URL.sol":{"Base64URL":{"abi":[],"devdoc":{"details":"Provides a set of functions to operate with Base64 strings. _Available since v4.5._","kind":"dev","methods":{},"stateVariables":{"_TABLE":{"details":"Base64 Encoding/Decoding Table"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d9d86742f5860bfe10b92d25612ec1040e2dd8f4683dfa2a18ded38e6949291964736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0xD8 PUSH8 0x42F5860BFE10B92D 0x25 PUSH2 0x2EC1 DIV 0xE 0x2D 0xD8 DELEGATECALL PUSH9 0x3DFA2A18DED38E6949 0x29 NOT PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"236:3585:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;236:3585:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d9d86742f5860bfe10b92d25612ec1040e2dd8f4683dfa2a18ded38e6949291964736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 0xD8 PUSH8 0x42F5860BFE10B92D 0x25 PUSH2 0x2EC1 DIV 0xE 0x2D 0xD8 DELEGATECALL PUSH9 0x3DFA2A18DED38E6949 0x29 NOT PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"236:3585:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"encode32(bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides a set of functions to operate with Base64 strings. _Available since v4.5._\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_TABLE\":{\"details\":\"Base64 Encoding/Decoding Table\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Base64URL.sol\":\"Base64URL\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Base64URL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// from OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64URL {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode32(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        //string memory result = new string(4 * ((data.length + 2) / 3));\\n        string memory result = new string(4 * ((data.length + 2) / 3) - 1);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            /*\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n*/\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xcf1ca3e3e85d1b22dec76240ef3b23f9f6416d76eb7483b80a7d0a8a8e9aa664\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/FCL/FCL_elliptic.sol":{"FCL_Elliptic_ZZ":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af3a0f43161a8a4760ada083ea2a9993fc6d993f5e63522e21c375fa0c1ddac564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF GASPRICE 0xF NUMBER AND BYTE DUP11 SELFBALANCE PUSH1 0xAD LOG0 DUP4 0xEA 0x2A SWAP10 SWAP4 0xFC PUSH14 0x993F5E63522E21C375FA0C1DDAC5 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1330:25491:1:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1330:25491:1;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220af3a0f43161a8a4760ada083ea2a9993fc6d993f5e63522e21c375fa0c1ddac564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF GASPRICE 0xF NUMBER AND BYTE DUP11 SELFBALANCE PUSH1 0xAD LOG0 DUP4 0xEA 0x2A SWAP10 SWAP4 0xFC PUSH14 0x993F5E63522E21C375FA0C1DDAC5 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1330:25491:1:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"FCL_nModInv(uint256)":"infinite","FCL_pModInv(uint256)":"infinite","ecAff_IsZero(uint256,uint256)":"infinite","ecAff_SetZZ(uint256,uint256)":"infinite","ecAff_SetZero()":"infinite","ecAff_add(uint256,uint256,uint256,uint256)":"infinite","ecAff_isOnCurve(uint256,uint256)":"infinite","ecZZ_AddN(uint256,uint256,uint256,uint256,uint256,uint256)":"infinite","ecZZ_Dbl(uint256,uint256,uint256,uint256)":"infinite","ecZZ_IsZero(uint256,uint256,uint256,uint256)":"infinite","ecZZ_SetAff(uint256,uint256,uint256,uint256)":"infinite","ecZZ_SetZero()":"infinite","ecZZ_mulmuladd_S8_extcode(uint256,uint256,address)":"infinite","ecZZ_mulmuladd_S8_hackmem(uint256,uint256,uint256)":"infinite","ecZZ_mulmuladd_S_asm(uint256,uint256,uint256,uint256)":"infinite","ecdsa_precomputed_hackmem(bytes32,uint256[2] calldata,uint256)":"infinite","ecdsa_precomputed_verify(bytes32,uint256[2] calldata,address)":"infinite","ecdsa_verify(bytes32,uint256[2] calldata,uint256[2] calldata)":"infinite","ecdsa_verify_mem(bytes32,uint256[2] memory,uint256[2] memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FCL/FCL_elliptic.sol\":\"FCL_Elliptic_ZZ\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/FCL/FCL_elliptic.sol\":{\"content\":\"//********************************************************************************************/\\n//  ___           _       ___               _         _    _ _    \\n// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ \\n// | _| '_/ -_|_-< ' \\\\  | (__| '_| || | '_ \\\\  _/ _ \\\\ | |__| | '_ \\\\\\n// |_||_| \\\\___/__/_||_|  \\\\___|_|  \\\\_, | .__/\\\\__\\\\___/ |____|_|_.__/\\n//                                |__/|_|                        \\n///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project \\n///* License: This software is licensed under MIT License \\t \\n///* This Code may be reused including license and copyright notice. \\t \\n///* See LICENSE file at the root folder of the project.\\t\\t\\t\\t \\n///* FILE: FCL_elliptic.sol\\t\\t\\t\\t\\t\\t         \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* DESCRIPTION: modified XYZZ system coordinates for EVM elliptic point multiplication\\n///*  optimization\\n///* \\n//**************************************************************************************/\\n//* WARNING: this code SHALL not be used for non prime order curves for security reasons.\\n// Code is optimized for a=-3 only curves with prime order, constant like -1, -2 shall be replaced\\n// if ever used for other curve than sec256R1\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\nlibrary FCL_Elliptic_ZZ {\\n    // Set parameters for curve sec256r1.\\n    \\n    //curve prime field modulus\\n    uint constant p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    //short weierstrass first coefficient\\n    uint constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    //short weierstrass second coefficient    \\n    uint constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    //generating point affine coordinates    \\n    uint constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    //curve order (number of points)\\n    uint constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;    \\n    /* -2 mod p constant, used to speed up inversion and doubling (avoid negation)*/\\n    uint constant minus_2 = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD;\\n    /* -2 mod n constant, used to speed up inversion*/\\n    uint constant minus_2modn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F; \\n       \\n    uint constant minus_1=      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    \\n    /**\\n    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/\\n    function FCL_nModInv(uint256 u) internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {\\n            \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2modn)\\n            mstore(add(pointer, 0xa0), n)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n       \\n    }\\n     /**\\n    /* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled*/\\n    function FCL_pModInv(uint256 u)   internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {  \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2)\\n            mstore(add(pointer, 0xa0), p)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from affine rep to XYZZ rep*/\\n    function ecAff_SetZZ(\\n        uint x0,\\n        uint y0\\n    ) internal pure returns (uint[4] memory P) {\\n        unchecked {\\n            P[2] = 1; //ZZ\\n            P[3] = 1; //ZZZ\\n            P[0] = x0;\\n            P[1] = y0;\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from XYZZ rep to affine rep*/ \\n    /*    https://hyperelliptic.org/EFD/g1p/auto-shortw-xyzz-3.html#addition-add-2008-s*/\\n    function ecZZ_SetAff( uint x,\\n        uint y,\\n        uint zz,\\n        uint zzz) internal view  returns (uint x1, uint y1)\\n    {\\n      uint zzzInv = FCL_pModInv(zzz); //1/zzz\\n      y1=mulmod(y,zzzInv,p);//Y/zzz\\n      uint b=mulmod(zz, zzzInv,p); //1/z\\n      zzzInv= mulmod(b,b,p); //1/zz\\n      x1=mulmod(x,zzzInv,p);//X/zz\\n    }\\n    \\n \\n    \\n    /**\\n    /* @dev Sutherland2008 doubling*/\\n    /* The \\\"dbl-2008-s-1\\\" doubling formulas */\\n    \\n    function ecZZ_Dbl(\\n    \\tuint x,\\n        uint y,\\n        uint zz,\\n        uint zzz\\n    ) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n    {\\n     unchecked{\\n     assembly{\\n      P0:=mulmod(2, y, p) //U = 2*Y1\\n      P2:=mulmod(P0,P0,p)  // V=U^2\\n      P3:=mulmod(x, P2,p)// S = X1*V\\n      P1:=mulmod(P0, P2,p) // W=UV\\n      P2:=mulmod(P2, zz, p) //zz3=V*ZZ1\\n      zz:=mulmod(3, mulmod(addmod(x,sub(p,zz),p), addmod(x,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      P0:=addmod(mulmod(zz,zz,p), mulmod(minus_2, P3,p),p) //X3=M^2-2S\\n      x:=mulmod(zz,addmod(P3, sub(p,P0),p),p)//M(S-X3)\\n      P3:=mulmod(P1,zzz,p)//zzz3=W*zzz1\\n      P1:=addmod(x, sub(p, mulmod(P1, y,p)),p )//Y3= M(S-X3)-W*Y1\\n      }\\n     }\\n     return (P0, P1, P2, P3);\\n    }\\n    \\n     /**\\n     * @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\\n     * warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)\\n     */\\n     \\n    //tbd: return -x1 and -Y1 in double to avoid two substractions\\n    function ecZZ_AddN(\\n    \\tuint x1,\\n        uint y1,\\n        uint zz1,\\n        uint zzz1,\\n        uint x2,\\n        uint y2) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n     {\\n       unchecked{\\n      if(y1==0){\\n       return (x2,y2,1,1);\\n      }\\n  \\n       assembly{\\n      y1:=sub(p, y1)\\n      y2:=addmod(mulmod(y2, zzz1,p),y1,p)  \\n      x2:=addmod(mulmod(x2, zz1,p),sub(p,x1),p)  \\n      P0:=mulmod(x2, x2, p)//PP = P^2\\n      P1:=mulmod(P0,x2,p)//PPP = P*PP\\n      P2:=mulmod(zz1,P0,p) ////ZZ3 = ZZ1*PP\\n      P3:= mulmod(zzz1,P1,p) ////ZZZ3 = ZZZ1*PPP\\n      zz1:=mulmod(x1, P0, p)//Q = X1*PP\\n      P0:=addmod(addmod(mulmod(y2,y2, p), sub(p,P1),p ), mulmod(minus_2, zz1,p) ,p )//R^2-PPP-2*Q\\n      P1:=addmod(mulmod(addmod(zz1, sub(p,P0),p), y2, p), mulmod(y1, P1,p),p)//R*(Q-X3)\\n     }\\n    //end assembly\\n      }//end unchecked\\n      return (P0, P1, P2, P3);\\n     }\\n       \\n     /**\\n     * @dev Return the zero curve in XYZZ coordinates.\\n     */\\n    function ecZZ_SetZero() internal pure returns (uint x, uint y, uint zz, uint zzz) {\\n        return (0, 0, 0, 0);\\n    }\\n     /**\\n     * @dev Check if point is the neutral of the curve\\n     */\\n    function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\\n    {\\n     if ( (y0 == 0)  ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)\\n     */\\n    function ecAff_SetZero() internal pure returns (uint x, uint y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve in affine rep.\\n     */\\n   function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\\n        return (y==0);\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve).\\n     */\\n    function ecAff_isOnCurve(uint x, uint y) internal pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n        unchecked {\\n            uint LHS = mulmod(y, y, p); // y^2\\n            uint RHS = addmod(mulmod(mulmod(x, x, p), x, p), mulmod(x, a, p), p); // x^3+ax\\n                 RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n           \\n            return LHS == RHS;\\n        }\\n    }\\n    \\n\\n      /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n     \\n    function ecAff_add(\\n        uint x0,\\n        uint y0,\\n        uint x1,\\n        uint y1\\n    ) internal view returns (uint, uint) {\\n        uint zz0;\\n        uint zzz0;\\n        \\n\\tif(ecAff_IsZero(x0,y0)) return (x1,y1);\\n\\tif(ecAff_IsZero(x1,y1)) return (x1,y1);\\n\\t\\n        (x0, y0, zz0, zzz0) = ecZZ_AddN(x0, y0, 1,1, x1, y1);\\n\\n        return ecZZ_SetAff(x0, y0, zz0, zzz0);\\n    }\\n\\n     /**\\n     * @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key\\n     */\\n     function ecZZ_mulmuladd_S_asm(\\n        uint Q0, uint Q1,// Point G and Q stored in one memory for stack optimization\\n        uint scalar_u,\\n        uint scalar_v\\n    ) internal view returns (uint X) {\\n     uint zz;\\n     uint zzz;\\n     uint Y;\\n     uint index=255;\\n     uint[6] memory T;\\n     uint H0;\\n     uint H1;   \\n     \\n     unchecked {\\n     \\n     if(scalar_u==0 && scalar_v==0) return 0;\\n     \\n     (H0,H1 )=ecAff_add(gx,gy,Q0, Q1);//will not work if Q=P, obvious forbidden private key\\n   \\n   /*\\n     while( ( ((scalar_u>>index)&1)+2*((scalar_v>>index)&1) ) ==0){\\n      index=index-1; \\n     }\\n     */\\n         \\n      assembly{\\n      \\n     \\n      for{  let T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      } eq(T4,0) {\\n        index := sub(index, 1)\\n        T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      }\\n      {}\\n       zz:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n           \\n      if eq(zz,1) {\\n      \\tX:=gx\\n      \\tY:=gy\\n      \\t}\\n      if eq(zz,2) {\\n       X:=Q0\\n      \\tY:=Q1\\n      }\\n      if eq(zz,3) {\\n      \\t X:=H0\\n      \\t Y:= H1\\n      }\\n     \\n      index:=sub(index,1)\\n      zz:=1\\n      zzz:=1\\n      \\n      for {   } gt( minus_1, index) { index := sub(index, 1) } \\n      {\\n      // inlined EcZZ_Dbl\\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n      \\n     { \\n      //value of dibit\\t\\n      T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      \\n      if iszero(T4){\\n       Y:=sub(p,Y)//restore the -Y inversion \\n       continue\\n      }// if T4!=0\\n        \\n      if eq(T4,1) {\\n      \\tT1:=gx\\n      \\tT2:=gy\\n      \\t\\n      \\t}\\n      if eq(T4,2) {\\n        T1:=Q0\\n      \\tT2:=Q1\\n      }\\n      if eq(T4,3) {\\n      \\t T1:=H0\\n      \\t T2:= H1\\n      \\t }\\n      \\t \\t \\n       // inlined EcZZ_AddN\\n      //T3:=sub(p, Y)\\n      //T3:=Y\\n      let y2:=addmod(mulmod(T2, zzz,p),Y,p)  //R\\n      T2:=addmod(mulmod(T1, zz,p),sub(p,X),p)  //P\\n      \\n      //special extremely rare case accumulator where EcAdd is replaced by EcDbl, no need to optimize this\\n      //todo : construct edge vector case\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       \\n       T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      \\n      continue  \\n       }\\n      }\\n      \\n      T4:=mulmod(T2, T2, p)//PP\\n      let TT1:=mulmod(T4,T2,p)//PPP, this one could be spared, but adding this register spare gas\\n      zz:=mulmod(zz,T4,p) \\n      zzz:= mulmod(zzz,TT1,p) //zz3=V*ZZ1\\n      let TT2:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,TT1),p ), mulmod(minus_2, TT2,p) ,p )\\n      Y:=addmod(mulmod(addmod(TT2, sub(p,T4),p), y2, p), mulmod(Y, TT1,p),p)\\n     \\n      X:=T4\\n       }\\n          \\n           }//end loop\\n        mstore(add(T, 0x60),zz)\\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(staticcall(not(0), 0x05, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n       \\n      //Y:=mulmod(Y,zzz,p)//Y/zzz\\n      //zz :=mulmod(zz, mload(T),p) //1/z\\n      //zz:= mulmod(zz,zz,p) //1/zz\\n      X:=mulmod(X,mload(T),p)//X/zz\\n      } //end assembly\\n     }//end unchecked\\n     \\n      return X;\\n    }\\n    \\n       \\n      //8 dimensions Shamir's trick, using precomputations stored in Shamir8,  stored as Bytecode of an external\\n      //contract at given address dataPointer\\n      //(thx to Lakhdar https://github.com/Kelvyne for EVM storage explanations and tricks)\\n      // the external tool to generate tables from public key is in the /sage directory\\n    function ecZZ_mulmuladd_S8_extcode(uint scalar_u, uint scalar_v, address dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n    \\n      unchecked{ \\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      extcodecopy(dataPointer, T, mload(T), 64)\\n      \\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\t{\\n      let TT1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(TT1,TT1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      let T1:=mulmod(TT1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      let T5:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T5,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      }\\n      {\\n      let T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      let index2:=sub(index, 64)\\n      let T3:=add(T4, add( shl(12, and(shr(index2, scalar_v),1)), shl(8, and(shr(index2, scalar_u),1)) ))\\n      let index3:=sub(index2, 64)\\n      let T2:=add(T3,add( shl(11, and(shr(index3, scalar_v),1)), shl(7, and(shr(index3, scalar_u),1)) ))\\n      index:=sub(index3, 64)\\n      let T1:=add(T2,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      \\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T1){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n       extcodecopy(dataPointer, T,T1, 64)\\n     }\\n     \\n     {\\n     \\n         /* Access to precomputed table using extcodecopy hack */\\n          \\n      // inlined EcZZ_AddN\\n      \\n      \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      let T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      \\n      //special case ecAdd(P,P)=EcDbl\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       let    T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       let T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      let T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n         continue\\n       }\\n      }\\n      \\n      let T4:=mulmod(T2, T2, p)\\n      let T1:=mulmod(T4,T2,p)//\\n       zz:=mulmod(zz,T4,p) //zzz3=V*ZZ1\\n      zzz:= mulmod(zzz,T1,p) // W=UV/\\n      let zz1:=mulmod(X, T4, p)\\n      X:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,X),p), y2, p), mulmod(Y, T1,p),p)\\n      \\n    \\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n   \\n     \\n      // improving the extcodecopy trick : append array at end of contract\\n    function ecZZ_mulmuladd_S8_hackmem(uint scalar_u, uint scalar_v, uint dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      unchecked{ \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      codecopy( T, add(mload(T), dataPointer), 64)\\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n     \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      \\n      T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      index:=sub(index, 64)\\n      T4:=add(T4, add( shl(12, and(shr(index, scalar_v),1)), shl(8, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(11, and(shr(index, scalar_v),1)), shl(7, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T4){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n     {\\n         /* Access to precomputed table using extcodecopy hack */\\n      codecopy( T, add(T4, dataPointer), 64)\\n          \\n      // inlined EcZZ_AddN\\n      \\n     \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      T4:=mulmod(T2, T2, p)\\n      T1:=mulmod(T4,T2,p)\\n      T2:=mulmod(zz,T4,p) // W=UV\\n      zzz:= mulmod(zzz,T1,p) //zz3=V*ZZ1\\n      let zz1:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,T4),p), y2, p), mulmod(Y, T1,p),p)\\n      zz:=T2\\n      X:=T4\\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n    function ecdsa_verify_mem(\\n        bytes32 message,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) internal view returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,mload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n                \\n    /**\\n     * @dev ECDSA verification, given , signature, and public key.\\n     */\\n    function ecdsa_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint[2] calldata Q\\n    ) internal  returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n     \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        address Shamir8\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n       uint sInv =FCL_nModInv(rs[1]);\\n       //uint sInv =2;\\n       \\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_extcode(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), Shamir8);\\n      \\n\\tassembly{\\n\\t\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t\\n\\t \\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n        \\n        \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_hackmem(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint256 endcontract\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n        uint sInv =FCL_nModInv(rs[1]);\\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_hackmem(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), endcontract);\\n      \\n\\tassembly{\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n}//EOF\\n\\n\\n\",\"keccak256\":\"0xff4afff0bd9034e0de7df18b225e540636313280237c828428103030093f318a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/P256Signer.sol":{"P256Signer":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AlreadyInitialized","type":"error"},{"inputs":[],"name":"InvalidHash","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"x_","type":"uint256"},{"internalType":"uint256","name":"y_","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"initialized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_hash","type":"bytes"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"x","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"y","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is the implementation. It is meant to be used through      proxy clone.","kind":"dev","methods":{"initialize(uint256,uint256)":{"details":"This function is only callable once and needs to be called immediately      after deployment by the factory in the same transaction.","params":{"x_":"The x coordinate of the public key","y_":"The y coordinate of the public key"}},"isValidSignature(bytes,bytes)":{"details":"This is the old version of the function of EIP-1271 using bytes      memory instead of bytes32","params":{"_hash":"The hash of the data signed","_signature":"The signature"},"returns":{"_0":"The EIP-1271 magic value"}},"isValidSignature(bytes32,bytes)":{"params":{"_hash":"The hash of the data signed","_signature":"The signature"},"returns":{"_0":"The EIP-1271 magic value"}}},"title":"P256Signer","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1241":{"entryPoint":null,"id":1241,"parameterSlots":0,"returnSlots":0}},"generatedSources":[],"linkReferences":{"contracts/Webauthn.sol":{"Webauthn":[{"length":20,"start":641}]}},"object":"608060405234801561001057600080fd5b506000805460ff191660011790556107c18061002d6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806320c13b0b1161005057806320c13b0b146100f4578063a56dfe4a14610107578063e4a301161461011057600080fd5b80630c55699c14610077578063158ef93e146100935780631626ba7e146100b0575b600080fd5b61008060015481565b6040519081526020015b60405180910390f35b6000546100a09060ff1681565b604051901515815260200161008a565b6100c36100be366004610475565b610125565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161008a565b6100c36101023660046104bc565b61017a565b61008060025481565b61012361011e366004610516565b6101ae565b005b60006101528360405160200161013d91815260200190565b60405160208183030381529060405283610222565b507f1626ba7e0000000000000000000000000000000000000000000000000000000092915050565b60006101868383610222565b507f20c13b0b0000000000000000000000000000000000000000000000000000000092915050565b60005460ff16156101eb576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915591909155600255565b6000828051906020012090506000806000808580602001905181019061024891906105a9565b9350935093509350600073__$84047ae21dcd4eb7d6018436351b69d321$__630d5efec9866001878a8888604051806040016040528060015481526020016002548152506040518863ffffffff1660e01b81526004016102ae97969594939291906106da565b602060405180830381865af41580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610762565b905080610328576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561038457610384610332565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156103d1576103d1610332565b604052919050565b600067ffffffffffffffff8211156103f3576103f3610332565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261043057600080fd5b813561044361043e826103d9565b61038a565b81815284602083860101111561045857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561048857600080fd5b82359150602083013567ffffffffffffffff8111156104a657600080fd5b6104b28582860161041f565b9150509250929050565b600080604083850312156104cf57600080fd5b823567ffffffffffffffff808211156104e757600080fd5b6104f38683870161041f565b9350602085013591508082111561050957600080fd5b506104b28582860161041f565b6000806040838503121561052957600080fd5b50508035926020909101359150565b60005b8381101561055357818101518382015260200161053b565b50506000910152565b600082601f83011261056d57600080fd5b815161057b61043e826103d9565b81815284602083860101111561059057600080fd5b6105a1826020830160208701610538565b949350505050565b60008060008060a085870312156105bf57600080fd5b845167ffffffffffffffff808211156105d757600080fd5b6105e38883890161055c565b95506020915081870151818111156105fa57600080fd5b61060689828a0161055c565b955050506040860151925086607f87011261062057600080fd5b610628610361565b8060a088018981111561063a57600080fd5b606089015b81811015610656578051845292840192840161063f565b505080935050505092959194509250565b6000815180845261067f816020860160208601610538565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8060005b60028110156106d45781518452602093840193909101906001016106b5565b50505050565b60006101208083526106ee8184018b610667565b90507fff000000000000000000000000000000000000000000000000000000000000008960f81b166020840152828103604084015261072d8189610667565b91505085606083015284608083015261074960a08301856106b1565b61075660e08301846106b1565b98975050505050505050565b60006020828403121561077457600080fd5b8151801515811461078457600080fd5b939250505056fea26469706673582212204c2cd764983a078a0acaf210d01cba40a233f6e965fbd1313aed3fe2eca0705164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x7C1 DUP1 PUSH2 0x2D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x20C13B0B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x20C13B0B EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0xA56DFE4A EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xE4A30116 EQ PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC55699C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xB0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x80 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xA0 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8A JUMP JUMPDEST PUSH2 0xC3 PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x475 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8A JUMP JUMPDEST PUSH2 0xC3 PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH2 0x80 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x516 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x152 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP4 PUSH2 0x222 JUMP JUMPDEST POP PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x186 DUP4 DUP4 PUSH2 0x222 JUMP JUMPDEST POP PUSH32 0x20C13B0B00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1EB JUMPI PUSH1 0x40 MLOAD PUSH32 0xDC149F000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x5A9 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0xD5EFEC9 DUP7 PUSH1 0x1 DUP8 DUP11 DUP9 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 SLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AE SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x762 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x328 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x384 JUMPI PUSH2 0x384 PUSH2 0x332 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3D1 JUMPI PUSH2 0x3D1 PUSH2 0x332 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3F3 JUMPI PUSH2 0x3F3 PUSH2 0x332 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x443 PUSH2 0x43E DUP3 PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B2 DUP6 DUP3 DUP7 ADD PUSH2 0x41F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F3 DUP7 DUP4 DUP8 ADD PUSH2 0x41F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B2 DUP6 DUP3 DUP7 ADD PUSH2 0x41F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x553 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x53B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x56D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x57B PUSH2 0x43E DUP3 PUSH2 0x3D9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5A1 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x538 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5E3 DUP9 DUP4 DUP10 ADD PUSH2 0x55C JUMP JUMPDEST SWAP6 POP PUSH1 0x20 SWAP2 POP DUP2 DUP8 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x606 DUP10 DUP3 DUP11 ADD PUSH2 0x55C JUMP JUMPDEST SWAP6 POP POP POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP DUP7 PUSH1 0x7F DUP8 ADD SLT PUSH2 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x628 PUSH2 0x361 JUMP JUMPDEST DUP1 PUSH1 0xA0 DUP9 ADD DUP10 DUP2 GT ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP10 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x656 JUMPI DUP1 MLOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 DUP5 ADD PUSH2 0x63F JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x67F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x538 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x6D4 JUMPI DUP2 MLOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6B5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH2 0x6EE DUP2 DUP5 ADD DUP12 PUSH2 0x667 JUMP JUMPDEST SWAP1 POP PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP10 PUSH1 0xF8 SHL AND PUSH1 0x20 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x72D DUP2 DUP10 PUSH2 0x667 JUMP JUMPDEST SWAP2 POP POP DUP6 PUSH1 0x60 DUP4 ADD MSTORE DUP5 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x749 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x756 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0x6B1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0x2C 0xD7 PUSH5 0x983A078A0A 0xCA CALLCODE LT 0xD0 SHR 0xBA BLOCKHASH LOG2 CALLER 0xF6 0xE9 PUSH6 0xFBD1313AED3F 0xE2 0xEC LOG0 PUSH17 0x5164736F6C634300081100330000000000 ","sourceMap":"309:2792:2:-:0;;;1083:49;;;;;;;;;-1:-1:-1;1107:11:2;:18;;-1:-1:-1;;1107:18:2;1121:4;1107:18;;;309:2792;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_validate_1342":{"entryPoint":546,"id":1342,"parameterSlots":2,"returnSlots":0},"@initialize_1368":{"entryPoint":430,"id":1368,"parameterSlots":2,"returnSlots":0},"@initialized_1218":{"entryPoint":null,"id":1218,"parameterSlots":0,"returnSlots":0},"@isValidSignature_1262":{"entryPoint":293,"id":1262,"parameterSlots":2,"returnSlots":1},"@isValidSignature_1280":{"entryPoint":378,"id":1280,"parameterSlots":2,"returnSlots":1},"@x_1221":{"entryPoint":null,"id":1221,"parameterSlots":0,"returnSlots":0},"@y_1224":{"entryPoint":null,"id":1224,"parameterSlots":0,"returnSlots":0},"abi_decode_bytes":{"entryPoint":1055,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":1372,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1890,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_bytes_memory_ptr":{"entryPoint":1141,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr":{"entryPoint":1212,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptrt_uint256t_array$_t_uint256_$2_memory_ptr_fromMemory":{"entryPoint":1449,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":1302,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256":{"entryPoint":1713,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_bytes":{"entryPoint":1639,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_rational_1_by_1_t_bytes_memory_ptr_t_bytes32_t_uint256_t_array$_t_uint256_$2_memory_ptr_t_array$_t_uint256_$2_memory_ptr__to_t_bytes_memory_ptr_t_bytes1_t_bytes_memory_ptr_t_bytes32_t_uint256_t_array$_t_uint256_$2_memory_ptr_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed":{"entryPoint":1754,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":906,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory_931":{"entryPoint":865,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":985,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1336,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x41":{"entryPoint":818,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7264:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:76:6","statements":[{"nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:6"},"nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"178:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:6"},"nodeType":"YulFunctionCall","src":"160:25:6"},"nodeType":"YulExpressionStatement","src":"160:25:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:177:6"},{"body":{"nodeType":"YulBlock","src":"291:92:6","statements":[{"nodeType":"YulAssignment","src":"301:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"313:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"324:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"309:3:6"},"nodeType":"YulFunctionCall","src":"309:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"301:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"343:9:6"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"368:6:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"361:6:6"},"nodeType":"YulFunctionCall","src":"361:14:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"354:6:6"},"nodeType":"YulFunctionCall","src":"354:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:6"},"nodeType":"YulFunctionCall","src":"336:41:6"},"nodeType":"YulExpressionStatement","src":"336:41:6"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"260:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"271:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"282:4:6","type":""}],"src":"196:187:6"},{"body":{"nodeType":"YulBlock","src":"420:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"437:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"440:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"430:6:6"},"nodeType":"YulFunctionCall","src":"430:88:6"},"nodeType":"YulExpressionStatement","src":"430:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"534:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"537:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"527:6:6"},"nodeType":"YulFunctionCall","src":"527:15:6"},"nodeType":"YulExpressionStatement","src":"527:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"558:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"561:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"551:6:6"},"nodeType":"YulFunctionCall","src":"551:15:6"},"nodeType":"YulExpressionStatement","src":"551:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"388:184:6"},{"body":{"nodeType":"YulBlock","src":"622:205:6","statements":[{"nodeType":"YulAssignment","src":"632:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"648:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"642:5:6"},"nodeType":"YulFunctionCall","src":"642:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"632:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"660:33:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"682:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"690:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"678:3:6"},"nodeType":"YulFunctionCall","src":"678:15:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"664:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"768:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"770:16:6"},"nodeType":"YulFunctionCall","src":"770:18:6"},"nodeType":"YulExpressionStatement","src":"770:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"711:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"723:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"708:2:6"},"nodeType":"YulFunctionCall","src":"708:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"747:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"759:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"744:2:6"},"nodeType":"YulFunctionCall","src":"744:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"705:2:6"},"nodeType":"YulFunctionCall","src":"705:62:6"},"nodeType":"YulIf","src":"702:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"806:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"810:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"799:6:6"},"nodeType":"YulFunctionCall","src":"799:22:6"},"nodeType":"YulExpressionStatement","src":"799:22:6"}]},"name":"allocate_memory_931","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"611:6:6","type":""}],"src":"577:250:6"},{"body":{"nodeType":"YulBlock","src":"877:289:6","statements":[{"nodeType":"YulAssignment","src":"887:19:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"903:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"897:5:6"},"nodeType":"YulFunctionCall","src":"897:9:6"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"887:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"915:117:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"937:6:6"},{"arguments":[{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"953:4:6"},{"kind":"number","nodeType":"YulLiteral","src":"959:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"949:3:6"},"nodeType":"YulFunctionCall","src":"949:13:6"},{"kind":"number","nodeType":"YulLiteral","src":"964:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"945:3:6"},"nodeType":"YulFunctionCall","src":"945:86:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"933:3:6"},"nodeType":"YulFunctionCall","src":"933:99:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"919:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1107:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1109:16:6"},"nodeType":"YulFunctionCall","src":"1109:18:6"},"nodeType":"YulExpressionStatement","src":"1109:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1050:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"1062:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1047:2:6"},"nodeType":"YulFunctionCall","src":"1047:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1086:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1098:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1083:2:6"},"nodeType":"YulFunctionCall","src":"1083:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1044:2:6"},"nodeType":"YulFunctionCall","src":"1044:62:6"},"nodeType":"YulIf","src":"1041:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1145:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1149:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1138:6:6"},"nodeType":"YulFunctionCall","src":"1138:22:6"},"nodeType":"YulExpressionStatement","src":"1138:22:6"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"857:4:6","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"866:6:6","type":""}],"src":"832:334:6"},{"body":{"nodeType":"YulBlock","src":"1228:188:6","statements":[{"body":{"nodeType":"YulBlock","src":"1272:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1274:16:6"},"nodeType":"YulFunctionCall","src":"1274:18:6"},"nodeType":"YulExpressionStatement","src":"1274:18:6"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1244:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1252:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1241:2:6"},"nodeType":"YulFunctionCall","src":"1241:30:6"},"nodeType":"YulIf","src":"1238:56:6"},{"nodeType":"YulAssignment","src":"1303:107:6","value":{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1323:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1331:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1319:3:6"},"nodeType":"YulFunctionCall","src":"1319:15:6"},{"kind":"number","nodeType":"YulLiteral","src":"1336:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1315:3:6"},"nodeType":"YulFunctionCall","src":"1315:88:6"},{"kind":"number","nodeType":"YulLiteral","src":"1405:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1311:3:6"},"nodeType":"YulFunctionCall","src":"1311:99:6"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1303:4:6"}]}]},"name":"array_allocation_size_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1208:6:6","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1219:4:6","type":""}],"src":"1171:245:6"},{"body":{"nodeType":"YulBlock","src":"1473:410:6","statements":[{"body":{"nodeType":"YulBlock","src":"1522:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1531:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1534:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1524:6:6"},"nodeType":"YulFunctionCall","src":"1524:12:6"},"nodeType":"YulExpressionStatement","src":"1524:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1501:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1509:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1497:3:6"},"nodeType":"YulFunctionCall","src":"1497:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"1516:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1493:3:6"},"nodeType":"YulFunctionCall","src":"1493:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1486:6:6"},"nodeType":"YulFunctionCall","src":"1486:35:6"},"nodeType":"YulIf","src":"1483:55:6"},{"nodeType":"YulVariableDeclaration","src":"1547:30:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1570:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1557:12:6"},"nodeType":"YulFunctionCall","src":"1557:20:6"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1551:2:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1586:63:6","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"1645:2:6"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"1617:27:6"},"nodeType":"YulFunctionCall","src":"1617:31:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1601:15:6"},"nodeType":"YulFunctionCall","src":"1601:48:6"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"1590:7:6","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1665:7:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1674:2:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1658:6:6"},"nodeType":"YulFunctionCall","src":"1658:19:6"},"nodeType":"YulExpressionStatement","src":"1658:19:6"},{"body":{"nodeType":"YulBlock","src":"1725:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1734:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1737:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1727:6:6"},"nodeType":"YulFunctionCall","src":"1727:12:6"},"nodeType":"YulExpressionStatement","src":"1727:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1700:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1708:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1696:3:6"},"nodeType":"YulFunctionCall","src":"1696:15:6"},{"kind":"number","nodeType":"YulLiteral","src":"1713:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1692:3:6"},"nodeType":"YulFunctionCall","src":"1692:26:6"},{"name":"end","nodeType":"YulIdentifier","src":"1720:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1689:2:6"},"nodeType":"YulFunctionCall","src":"1689:35:6"},"nodeType":"YulIf","src":"1686:55:6"},{"expression":{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1767:7:6"},{"kind":"number","nodeType":"YulLiteral","src":"1776:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1763:3:6"},"nodeType":"YulFunctionCall","src":"1763:18:6"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1787:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1795:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1783:3:6"},"nodeType":"YulFunctionCall","src":"1783:17:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1802:2:6"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1750:12:6"},"nodeType":"YulFunctionCall","src":"1750:55:6"},"nodeType":"YulExpressionStatement","src":"1750:55:6"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"1829:7:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1838:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1825:3:6"},"nodeType":"YulFunctionCall","src":"1825:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"1843:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1821:3:6"},"nodeType":"YulFunctionCall","src":"1821:27:6"},{"kind":"number","nodeType":"YulLiteral","src":"1850:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1814:6:6"},"nodeType":"YulFunctionCall","src":"1814:38:6"},"nodeType":"YulExpressionStatement","src":"1814:38:6"},{"nodeType":"YulAssignment","src":"1861:16:6","value":{"name":"array_1","nodeType":"YulIdentifier","src":"1870:7:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1861:5:6"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1447:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1455:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1463:5:6","type":""}],"src":"1421:462:6"},{"body":{"nodeType":"YulBlock","src":"1984:292:6","statements":[{"body":{"nodeType":"YulBlock","src":"2030:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2039:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2042:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2032:6:6"},"nodeType":"YulFunctionCall","src":"2032:12:6"},"nodeType":"YulExpressionStatement","src":"2032:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2005:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2014:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2001:3:6"},"nodeType":"YulFunctionCall","src":"2001:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2026:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1997:3:6"},"nodeType":"YulFunctionCall","src":"1997:32:6"},"nodeType":"YulIf","src":"1994:52:6"},{"nodeType":"YulAssignment","src":"2055:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2078:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2065:12:6"},"nodeType":"YulFunctionCall","src":"2065:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2055:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"2097:46:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2128:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2139:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2124:3:6"},"nodeType":"YulFunctionCall","src":"2124:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2111:12:6"},"nodeType":"YulFunctionCall","src":"2111:32:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2101:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2186:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2195:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2198:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2188:6:6"},"nodeType":"YulFunctionCall","src":"2188:12:6"},"nodeType":"YulExpressionStatement","src":"2188:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2166:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2155:2:6"},"nodeType":"YulFunctionCall","src":"2155:30:6"},"nodeType":"YulIf","src":"2152:50:6"},{"nodeType":"YulAssignment","src":"2211:59:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2242:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2253:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2238:3:6"},"nodeType":"YulFunctionCall","src":"2238:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2262:7:6"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2221:16:6"},"nodeType":"YulFunctionCall","src":"2221:49:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2211:6:6"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1942:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1953:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1965:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1973:6:6","type":""}],"src":"1888:388:6"},{"body":{"nodeType":"YulBlock","src":"2380:149:6","statements":[{"nodeType":"YulAssignment","src":"2390:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2402:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2413:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2398:3:6"},"nodeType":"YulFunctionCall","src":"2398:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2390:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2432:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2447:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"2455:66:6","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2443:3:6"},"nodeType":"YulFunctionCall","src":"2443:79:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2425:6:6"},"nodeType":"YulFunctionCall","src":"2425:98:6"},"nodeType":"YulExpressionStatement","src":"2425:98:6"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2349:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2360:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2371:4:6","type":""}],"src":"2281:248:6"},{"body":{"nodeType":"YulBlock","src":"2639:434:6","statements":[{"body":{"nodeType":"YulBlock","src":"2685:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2694:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2697:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2687:6:6"},"nodeType":"YulFunctionCall","src":"2687:12:6"},"nodeType":"YulExpressionStatement","src":"2687:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2660:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2669:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2656:3:6"},"nodeType":"YulFunctionCall","src":"2656:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2681:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2652:3:6"},"nodeType":"YulFunctionCall","src":"2652:32:6"},"nodeType":"YulIf","src":"2649:52:6"},{"nodeType":"YulVariableDeclaration","src":"2710:37:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2737:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2724:12:6"},"nodeType":"YulFunctionCall","src":"2724:23:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2714:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2756:28:6","value":{"kind":"number","nodeType":"YulLiteral","src":"2766:18:6","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2760:2:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2811:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2820:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2823:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2813:6:6"},"nodeType":"YulFunctionCall","src":"2813:12:6"},"nodeType":"YulExpressionStatement","src":"2813:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2799:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"2807:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2796:2:6"},"nodeType":"YulFunctionCall","src":"2796:14:6"},"nodeType":"YulIf","src":"2793:34:6"},{"nodeType":"YulAssignment","src":"2836:59:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2867:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2878:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2863:3:6"},"nodeType":"YulFunctionCall","src":"2863:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2887:7:6"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2846:16:6"},"nodeType":"YulFunctionCall","src":"2846:49:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2836:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"2904:48:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2937:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2948:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2933:3:6"},"nodeType":"YulFunctionCall","src":"2933:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2920:12:6"},"nodeType":"YulFunctionCall","src":"2920:32:6"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2908:8:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2981:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2990:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2993:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2983:6:6"},"nodeType":"YulFunctionCall","src":"2983:12:6"},"nodeType":"YulExpressionStatement","src":"2983:12:6"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2967:8:6"},{"name":"_1","nodeType":"YulIdentifier","src":"2977:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2964:2:6"},"nodeType":"YulFunctionCall","src":"2964:16:6"},"nodeType":"YulIf","src":"2961:36:6"},{"nodeType":"YulAssignment","src":"3006:61:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3037:9:6"},{"name":"offset_1","nodeType":"YulIdentifier","src":"3048:8:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3033:3:6"},"nodeType":"YulFunctionCall","src":"3033:24:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3059:7:6"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"3016:16:6"},"nodeType":"YulFunctionCall","src":"3016:51:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3006:6:6"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2597:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2608:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2620:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2628:6:6","type":""}],"src":"2534:539:6"},{"body":{"nodeType":"YulBlock","src":"3165:161:6","statements":[{"body":{"nodeType":"YulBlock","src":"3211:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3220:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3223:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3213:6:6"},"nodeType":"YulFunctionCall","src":"3213:12:6"},"nodeType":"YulExpressionStatement","src":"3213:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3186:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"3195:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3182:3:6"},"nodeType":"YulFunctionCall","src":"3182:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"3207:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3178:3:6"},"nodeType":"YulFunctionCall","src":"3178:32:6"},"nodeType":"YulIf","src":"3175:52:6"},{"nodeType":"YulAssignment","src":"3236:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3259:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3246:12:6"},"nodeType":"YulFunctionCall","src":"3246:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3236:6:6"}]},{"nodeType":"YulAssignment","src":"3278:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3305:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3316:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3301:3:6"},"nodeType":"YulFunctionCall","src":"3301:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3288:12:6"},"nodeType":"YulFunctionCall","src":"3288:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3278:6:6"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3123:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3134:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3146:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3154:6:6","type":""}],"src":"3078:248:6"},{"body":{"nodeType":"YulBlock","src":"3432:76:6","statements":[{"nodeType":"YulAssignment","src":"3442:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3454:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3465:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3450:3:6"},"nodeType":"YulFunctionCall","src":"3450:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3442:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3484:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"3495:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3477:6:6"},"nodeType":"YulFunctionCall","src":"3477:25:6"},"nodeType":"YulExpressionStatement","src":"3477:25:6"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3401:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3412:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3423:4:6","type":""}],"src":"3331:177:6"},{"body":{"nodeType":"YulBlock","src":"3579:184:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3589:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3598:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3593:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3658:63:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3683:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"3688:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3679:3:6"},"nodeType":"YulFunctionCall","src":"3679:11:6"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3702:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"3707:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:6"},"nodeType":"YulFunctionCall","src":"3698:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3692:5:6"},"nodeType":"YulFunctionCall","src":"3692:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3672:6:6"},"nodeType":"YulFunctionCall","src":"3672:39:6"},"nodeType":"YulExpressionStatement","src":"3672:39:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3619:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"3622:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3616:2:6"},"nodeType":"YulFunctionCall","src":"3616:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3630:19:6","statements":[{"nodeType":"YulAssignment","src":"3632:15:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3641:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"3644:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3637:3:6"},"nodeType":"YulFunctionCall","src":"3637:10:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3632:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"3612:3:6","statements":[]},"src":"3608:113:6"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"3741:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3746:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3737:3:6"},"nodeType":"YulFunctionCall","src":"3737:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"3755:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3730:6:6"},"nodeType":"YulFunctionCall","src":"3730:27:6"},"nodeType":"YulExpressionStatement","src":"3730:27:6"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"3557:3:6","type":""},{"name":"dst","nodeType":"YulTypedName","src":"3562:3:6","type":""},{"name":"length","nodeType":"YulTypedName","src":"3567:6:6","type":""}],"src":"3513:250:6"},{"body":{"nodeType":"YulBlock","src":"3831:378:6","statements":[{"body":{"nodeType":"YulBlock","src":"3880:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3889:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3892:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3882:6:6"},"nodeType":"YulFunctionCall","src":"3882:12:6"},"nodeType":"YulExpressionStatement","src":"3882:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3859:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"3867:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3855:3:6"},"nodeType":"YulFunctionCall","src":"3855:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"3874:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3851:3:6"},"nodeType":"YulFunctionCall","src":"3851:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3844:6:6"},"nodeType":"YulFunctionCall","src":"3844:35:6"},"nodeType":"YulIf","src":"3841:55:6"},{"nodeType":"YulVariableDeclaration","src":"3905:23:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3921:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3915:5:6"},"nodeType":"YulFunctionCall","src":"3915:13:6"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3909:2:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3937:63:6","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3996:2:6"}],"functionName":{"name":"array_allocation_size_bytes","nodeType":"YulIdentifier","src":"3968:27:6"},"nodeType":"YulFunctionCall","src":"3968:31:6"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"3952:15:6"},"nodeType":"YulFunctionCall","src":"3952:48:6"},"variables":[{"name":"array_1","nodeType":"YulTypedName","src":"3941:7:6","type":""}]},{"expression":{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4016:7:6"},{"name":"_1","nodeType":"YulIdentifier","src":"4025:2:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4009:6:6"},"nodeType":"YulFunctionCall","src":"4009:19:6"},"nodeType":"YulExpressionStatement","src":"4009:19:6"},{"body":{"nodeType":"YulBlock","src":"4076:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4085:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4088:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4078:6:6"},"nodeType":"YulFunctionCall","src":"4078:12:6"},"nodeType":"YulExpressionStatement","src":"4078:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4051:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"4059:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4047:3:6"},"nodeType":"YulFunctionCall","src":"4047:15:6"},{"kind":"number","nodeType":"YulLiteral","src":"4064:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4043:3:6"},"nodeType":"YulFunctionCall","src":"4043:26:6"},{"name":"end","nodeType":"YulIdentifier","src":"4071:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4040:2:6"},"nodeType":"YulFunctionCall","src":"4040:35:6"},"nodeType":"YulIf","src":"4037:55:6"},{"expression":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4140:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"4148:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4136:3:6"},"nodeType":"YulFunctionCall","src":"4136:17:6"},{"arguments":[{"name":"array_1","nodeType":"YulIdentifier","src":"4159:7:6"},{"kind":"number","nodeType":"YulLiteral","src":"4168:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4155:3:6"},"nodeType":"YulFunctionCall","src":"4155:18:6"},{"name":"_1","nodeType":"YulIdentifier","src":"4175:2:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4101:34:6"},"nodeType":"YulFunctionCall","src":"4101:77:6"},"nodeType":"YulExpressionStatement","src":"4101:77:6"},{"nodeType":"YulAssignment","src":"4187:16:6","value":{"name":"array_1","nodeType":"YulIdentifier","src":"4196:7:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4187:5:6"}]}]},"name":"abi_decode_bytes_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3805:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"3813:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3821:5:6","type":""}],"src":"3768:441:6"},{"body":{"nodeType":"YulBlock","src":"4387:940:6","statements":[{"body":{"nodeType":"YulBlock","src":"4434:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4443:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4446:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4436:6:6"},"nodeType":"YulFunctionCall","src":"4436:12:6"},"nodeType":"YulExpressionStatement","src":"4436:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4408:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"4417:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4404:3:6"},"nodeType":"YulFunctionCall","src":"4404:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"4429:3:6","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4400:3:6"},"nodeType":"YulFunctionCall","src":"4400:33:6"},"nodeType":"YulIf","src":"4397:53:6"},{"nodeType":"YulVariableDeclaration","src":"4459:30:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4479:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4473:5:6"},"nodeType":"YulFunctionCall","src":"4473:16:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4463:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4498:28:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4508:18:6","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4502:2:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4553:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4562:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4565:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4555:6:6"},"nodeType":"YulFunctionCall","src":"4555:12:6"},"nodeType":"YulExpressionStatement","src":"4555:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4541:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"4549:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4538:2:6"},"nodeType":"YulFunctionCall","src":"4538:14:6"},"nodeType":"YulIf","src":"4535:34:6"},{"nodeType":"YulAssignment","src":"4578:70:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4620:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"4631:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4616:3:6"},"nodeType":"YulFunctionCall","src":"4616:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4640:7:6"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"4588:27:6"},"nodeType":"YulFunctionCall","src":"4588:60:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4578:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"4657:12:6","value":{"kind":"number","nodeType":"YulLiteral","src":"4667:2:6","type":"","value":"32"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4661:2:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4678:41:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4704:9:6"},{"name":"_2","nodeType":"YulIdentifier","src":"4715:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:6"},"nodeType":"YulFunctionCall","src":"4700:18:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4694:5:6"},"nodeType":"YulFunctionCall","src":"4694:25:6"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4682:8:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"4748:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4757:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4760:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4750:6:6"},"nodeType":"YulFunctionCall","src":"4750:12:6"},"nodeType":"YulExpressionStatement","src":"4750:12:6"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4734:8:6"},{"name":"_1","nodeType":"YulIdentifier","src":"4744:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4731:2:6"},"nodeType":"YulFunctionCall","src":"4731:16:6"},"nodeType":"YulIf","src":"4728:36:6"},{"nodeType":"YulAssignment","src":"4773:72:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4815:9:6"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4826:8:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4811:3:6"},"nodeType":"YulFunctionCall","src":"4811:24:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4837:7:6"}],"functionName":{"name":"abi_decode_bytes_fromMemory","nodeType":"YulIdentifier","src":"4783:27:6"},"nodeType":"YulFunctionCall","src":"4783:62:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4773:6:6"}]},{"nodeType":"YulAssignment","src":"4854:35:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4874:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4885:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4870:3:6"},"nodeType":"YulFunctionCall","src":"4870:18:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4864:5:6"},"nodeType":"YulFunctionCall","src":"4864:25:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4854:6:6"}]},{"body":{"nodeType":"YulBlock","src":"4943:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4952:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4955:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4945:6:6"},"nodeType":"YulFunctionCall","src":"4945:12:6"},"nodeType":"YulExpressionStatement","src":"4945:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4916:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4927:3:6","type":"","value":"127"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4912:3:6"},"nodeType":"YulFunctionCall","src":"4912:19:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4933:7:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4908:3:6"},"nodeType":"YulFunctionCall","src":"4908:33:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4901:6:6"},"nodeType":"YulFunctionCall","src":"4901:41:6"},"nodeType":"YulIf","src":"4898:61:6"},{"nodeType":"YulVariableDeclaration","src":"4968:32:6","value":{"arguments":[],"functionName":{"name":"allocate_memory_931","nodeType":"YulIdentifier","src":"4979:19:6"},"nodeType":"YulFunctionCall","src":"4979:21:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"4972:3:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5009:16:6","value":{"name":"dst","nodeType":"YulIdentifier","src":"5022:3:6"},"variables":[{"name":"dst_1","nodeType":"YulTypedName","src":"5013:5:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5034:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5052:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5063:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5048:3:6"},"nodeType":"YulFunctionCall","src":"5048:19:6"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"5038:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5099:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5108:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5111:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5101:6:6"},"nodeType":"YulFunctionCall","src":"5101:12:6"},"nodeType":"YulExpressionStatement","src":"5101:12:6"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"5082:6:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5090:7:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5079:2:6"},"nodeType":"YulFunctionCall","src":"5079:19:6"},"nodeType":"YulIf","src":"5076:39:6"},{"nodeType":"YulVariableDeclaration","src":"5124:29:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5139:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5150:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5135:3:6"},"nodeType":"YulFunctionCall","src":"5135:18:6"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"5128:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5218:79:6","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5239:3:6"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5250:3:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5244:5:6"},"nodeType":"YulFunctionCall","src":"5244:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5232:6:6"},"nodeType":"YulFunctionCall","src":"5232:23:6"},"nodeType":"YulExpressionStatement","src":"5232:23:6"},{"nodeType":"YulAssignment","src":"5268:19:6","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"5279:3:6"},{"name":"_2","nodeType":"YulIdentifier","src":"5284:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5275:3:6"},"nodeType":"YulFunctionCall","src":"5275:12:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"5268:3:6"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5173:3:6"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"5178:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5170:2:6"},"nodeType":"YulFunctionCall","src":"5170:15:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5186:23:6","statements":[{"nodeType":"YulAssignment","src":"5188:19:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5199:3:6"},{"name":"_2","nodeType":"YulIdentifier","src":"5204:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5195:3:6"},"nodeType":"YulFunctionCall","src":"5195:12:6"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"5188:3:6"}]}]},"pre":{"nodeType":"YulBlock","src":"5166:3:6","statements":[]},"src":"5162:135:6"},{"nodeType":"YulAssignment","src":"5306:15:6","value":{"name":"dst_1","nodeType":"YulIdentifier","src":"5316:5:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5306:6:6"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptrt_uint256t_array$_t_uint256_$2_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4329:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4340:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4352:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4360:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4368:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4376:6:6","type":""}],"src":"4214:1113:6"},{"body":{"nodeType":"YulBlock","src":"5381:280:6","statements":[{"nodeType":"YulVariableDeclaration","src":"5391:26:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5411:5:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5405:5:6"},"nodeType":"YulFunctionCall","src":"5405:12:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5395:6:6","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5433:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"5438:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5426:6:6"},"nodeType":"YulFunctionCall","src":"5426:19:6"},"nodeType":"YulExpressionStatement","src":"5426:19:6"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5493:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"5500:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5489:3:6"},"nodeType":"YulFunctionCall","src":"5489:16:6"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5511:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"5516:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5507:3:6"},"nodeType":"YulFunctionCall","src":"5507:14:6"},{"name":"length","nodeType":"YulIdentifier","src":"5523:6:6"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5454:34:6"},"nodeType":"YulFunctionCall","src":"5454:76:6"},"nodeType":"YulExpressionStatement","src":"5454:76:6"},{"nodeType":"YulAssignment","src":"5539:116:6","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5554:3:6"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5567:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"5575:2:6","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5563:3:6"},"nodeType":"YulFunctionCall","src":"5563:15:6"},{"kind":"number","nodeType":"YulLiteral","src":"5580:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5559:3:6"},"nodeType":"YulFunctionCall","src":"5559:88:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5550:3:6"},"nodeType":"YulFunctionCall","src":"5550:98:6"},{"kind":"number","nodeType":"YulLiteral","src":"5650:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5546:3:6"},"nodeType":"YulFunctionCall","src":"5546:109:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5539:3:6"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5358:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5365:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5373:3:6","type":""}],"src":"5332:329:6"},{"body":{"nodeType":"YulBlock","src":"5716:276:6","statements":[{"nodeType":"YulAssignment","src":"5726:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"5733:3:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5726:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"5745:19:6","value":{"name":"value","nodeType":"YulIdentifier","src":"5759:5:6"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"5749:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"5773:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5782:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"5777:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"5839:147:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5860:3:6"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5871:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5865:5:6"},"nodeType":"YulFunctionCall","src":"5865:13:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5853:6:6"},"nodeType":"YulFunctionCall","src":"5853:26:6"},"nodeType":"YulExpressionStatement","src":"5853:26:6"},{"nodeType":"YulVariableDeclaration","src":"5892:14:6","value":{"kind":"number","nodeType":"YulLiteral","src":"5902:4:6","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5896:2:6","type":""}]},{"nodeType":"YulAssignment","src":"5919:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5930:3:6"},{"name":"_1","nodeType":"YulIdentifier","src":"5935:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5926:3:6"},"nodeType":"YulFunctionCall","src":"5926:12:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5919:3:6"}]},{"nodeType":"YulAssignment","src":"5951:25:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5965:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"5973:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5961:3:6"},"nodeType":"YulFunctionCall","src":"5961:15:6"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"5951:6:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5803:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"5806:4:6","type":"","value":"0x02"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5800:2:6"},"nodeType":"YulFunctionCall","src":"5800:11:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5812:18:6","statements":[{"nodeType":"YulAssignment","src":"5814:14:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"5823:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"5826:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5819:3:6"},"nodeType":"YulFunctionCall","src":"5819:9:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"5814:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"5796:3:6","statements":[]},"src":"5792:194:6"}]},"name":"abi_encode_array_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5700:5:6","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5707:3:6","type":""}],"src":"5666:326:6"},{"body":{"nodeType":"YulBlock","src":"6409:571:6","statements":[{"nodeType":"YulVariableDeclaration","src":"6419:13:6","value":{"kind":"number","nodeType":"YulLiteral","src":"6429:3:6","type":"","value":"288"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6423:2:6","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6448:9:6"},{"name":"_1","nodeType":"YulIdentifier","src":"6459:2:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6441:6:6"},"nodeType":"YulFunctionCall","src":"6441:21:6"},"nodeType":"YulExpressionStatement","src":"6441:21:6"},{"nodeType":"YulVariableDeclaration","src":"6471:58:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6502:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6514:9:6"},{"name":"_1","nodeType":"YulIdentifier","src":"6525:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6510:3:6"},"nodeType":"YulFunctionCall","src":"6510:18:6"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6485:16:6"},"nodeType":"YulFunctionCall","src":"6485:44:6"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"6475:6:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6549:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6560:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6545:3:6"},"nodeType":"YulFunctionCall","src":"6545:18:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6573:3:6","type":"","value":"248"},{"name":"value1","nodeType":"YulIdentifier","src":"6578:6:6"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6569:3:6"},"nodeType":"YulFunctionCall","src":"6569:16:6"},{"kind":"number","nodeType":"YulLiteral","src":"6587:66:6","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6565:3:6"},"nodeType":"YulFunctionCall","src":"6565:89:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6538:6:6"},"nodeType":"YulFunctionCall","src":"6538:117:6"},"nodeType":"YulExpressionStatement","src":"6538:117:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6675:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6686:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6671:3:6"},"nodeType":"YulFunctionCall","src":"6671:18:6"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"6695:6:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"6703:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6691:3:6"},"nodeType":"YulFunctionCall","src":"6691:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6664:6:6"},"nodeType":"YulFunctionCall","src":"6664:50:6"},"nodeType":"YulExpressionStatement","src":"6664:50:6"},{"nodeType":"YulAssignment","src":"6723:40:6","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6748:6:6"},{"name":"tail_1","nodeType":"YulIdentifier","src":"6756:6:6"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6731:16:6"},"nodeType":"YulFunctionCall","src":"6731:32:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6723:4:6"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6783:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6794:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6779:3:6"},"nodeType":"YulFunctionCall","src":"6779:18:6"},{"name":"value3","nodeType":"YulIdentifier","src":"6799:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6772:6:6"},"nodeType":"YulFunctionCall","src":"6772:34:6"},"nodeType":"YulExpressionStatement","src":"6772:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6826:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6837:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6822:3:6"},"nodeType":"YulFunctionCall","src":"6822:19:6"},{"name":"value4","nodeType":"YulIdentifier","src":"6843:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6815:6:6"},"nodeType":"YulFunctionCall","src":"6815:35:6"},"nodeType":"YulExpressionStatement","src":"6815:35:6"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"6884:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6896:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6907:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6892:3:6"},"nodeType":"YulFunctionCall","src":"6892:19:6"}],"functionName":{"name":"abi_encode_array_uint256","nodeType":"YulIdentifier","src":"6859:24:6"},"nodeType":"YulFunctionCall","src":"6859:53:6"},"nodeType":"YulExpressionStatement","src":"6859:53:6"},{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"6946:6:6"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6958:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6969:3:6","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6954:3:6"},"nodeType":"YulFunctionCall","src":"6954:19:6"}],"functionName":{"name":"abi_encode_array_uint256","nodeType":"YulIdentifier","src":"6921:24:6"},"nodeType":"YulFunctionCall","src":"6921:53:6"},"nodeType":"YulExpressionStatement","src":"6921:53:6"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_rational_1_by_1_t_bytes_memory_ptr_t_bytes32_t_uint256_t_array$_t_uint256_$2_memory_ptr_t_array$_t_uint256_$2_memory_ptr__to_t_bytes_memory_ptr_t_bytes1_t_bytes_memory_ptr_t_bytes32_t_uint256_t_array$_t_uint256_$2_memory_ptr_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6330:9:6","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6341:6:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6349:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6357:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6365:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6373:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6381:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6389:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6400:4:6","type":""}],"src":"5997:983:6"},{"body":{"nodeType":"YulBlock","src":"7063:199:6","statements":[{"body":{"nodeType":"YulBlock","src":"7109:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7118:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7121:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7111:6:6"},"nodeType":"YulFunctionCall","src":"7111:12:6"},"nodeType":"YulExpressionStatement","src":"7111:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7084:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"7093:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7080:3:6"},"nodeType":"YulFunctionCall","src":"7080:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"7105:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7076:3:6"},"nodeType":"YulFunctionCall","src":"7076:32:6"},"nodeType":"YulIf","src":"7073:52:6"},{"nodeType":"YulVariableDeclaration","src":"7134:29:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7153:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7147:5:6"},"nodeType":"YulFunctionCall","src":"7147:16:6"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7138:5:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"7216:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7225:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7228:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7218:6:6"},"nodeType":"YulFunctionCall","src":"7218:12:6"},"nodeType":"YulExpressionStatement","src":"7218:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7185:5:6"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7206:5:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7199:6:6"},"nodeType":"YulFunctionCall","src":"7199:13:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7192:6:6"},"nodeType":"YulFunctionCall","src":"7192:21:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7182:2:6"},"nodeType":"YulFunctionCall","src":"7182:32:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7175:6:6"},"nodeType":"YulFunctionCall","src":"7175:40:6"},"nodeType":"YulIf","src":"7172:60:6"},{"nodeType":"YulAssignment","src":"7241:15:6","value":{"name":"value","nodeType":"YulIdentifier","src":"7251:5:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7241:6:6"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7029:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7040:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7052:6:6","type":""}],"src":"6985:277:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_931() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_bytes_memory_ptrt_uint256t_array$_t_uint256_$2_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_bytes_fromMemory(add(headStart, offset), dataEnd)\n        let _2 := 32\n        let offset_1 := mload(add(headStart, _2))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_bytes_fromMemory(add(headStart, offset_1), dataEnd)\n        value2 := mload(add(headStart, 64))\n        if iszero(slt(add(headStart, 127), dataEnd)) { revert(0, 0) }\n        let dst := allocate_memory_931()\n        let dst_1 := dst\n        let srcEnd := add(headStart, 160)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(headStart, 96)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, mload(src))\n            dst := add(dst, _2)\n        }\n        value3 := dst_1\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_array_uint256(value, pos)\n    {\n        pos := pos\n        let srcPtr := value\n        let i := 0\n        for { } lt(i, 0x02) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_rational_1_by_1_t_bytes_memory_ptr_t_bytes32_t_uint256_t_array$_t_uint256_$2_memory_ptr_t_array$_t_uint256_$2_memory_ptr__to_t_bytes_memory_ptr_t_bytes1_t_bytes_memory_ptr_t_bytes32_t_uint256_t_array$_t_uint256_$2_memory_ptr_t_array$_t_uint256_$2_memory_ptr__fromStack_library_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, _1)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, _1))\n        mstore(add(headStart, 32), and(shl(248, value1), 0xff00000000000000000000000000000000000000000000000000000000000000))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        abi_encode_array_uint256(value5, add(headStart, 160))\n        abi_encode_array_uint256(value6, add(headStart, 224))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{"contracts/Webauthn.sol":{"Webauthn":[{"length":20,"start":596}]}},"object":"608060405234801561001057600080fd5b50600436106100725760003560e01c806320c13b0b1161005057806320c13b0b146100f4578063a56dfe4a14610107578063e4a301161461011057600080fd5b80630c55699c14610077578063158ef93e146100935780631626ba7e146100b0575b600080fd5b61008060015481565b6040519081526020015b60405180910390f35b6000546100a09060ff1681565b604051901515815260200161008a565b6100c36100be366004610475565b610125565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161008a565b6100c36101023660046104bc565b61017a565b61008060025481565b61012361011e366004610516565b6101ae565b005b60006101528360405160200161013d91815260200190565b60405160208183030381529060405283610222565b507f1626ba7e0000000000000000000000000000000000000000000000000000000092915050565b60006101868383610222565b507f20c13b0b0000000000000000000000000000000000000000000000000000000092915050565b60005460ff16156101eb576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915591909155600255565b6000828051906020012090506000806000808580602001905181019061024891906105a9565b9350935093509350600073__$84047ae21dcd4eb7d6018436351b69d321$__630d5efec9866001878a8888604051806040016040528060015481526020016002548152506040518863ffffffff1660e01b81526004016102ae97969594939291906106da565b602060405180830381865af41580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610762565b905080610328576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561038457610384610332565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156103d1576103d1610332565b604052919050565b600067ffffffffffffffff8211156103f3576103f3610332565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261043057600080fd5b813561044361043e826103d9565b61038a565b81815284602083860101111561045857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561048857600080fd5b82359150602083013567ffffffffffffffff8111156104a657600080fd5b6104b28582860161041f565b9150509250929050565b600080604083850312156104cf57600080fd5b823567ffffffffffffffff808211156104e757600080fd5b6104f38683870161041f565b9350602085013591508082111561050957600080fd5b506104b28582860161041f565b6000806040838503121561052957600080fd5b50508035926020909101359150565b60005b8381101561055357818101518382015260200161053b565b50506000910152565b600082601f83011261056d57600080fd5b815161057b61043e826103d9565b81815284602083860101111561059057600080fd5b6105a1826020830160208701610538565b949350505050565b60008060008060a085870312156105bf57600080fd5b845167ffffffffffffffff808211156105d757600080fd5b6105e38883890161055c565b95506020915081870151818111156105fa57600080fd5b61060689828a0161055c565b955050506040860151925086607f87011261062057600080fd5b610628610361565b8060a088018981111561063a57600080fd5b606089015b81811015610656578051845292840192840161063f565b505080935050505092959194509250565b6000815180845261067f816020860160208601610538565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8060005b60028110156106d45781518452602093840193909101906001016106b5565b50505050565b60006101208083526106ee8184018b610667565b90507fff000000000000000000000000000000000000000000000000000000000000008960f81b166020840152828103604084015261072d8189610667565b91505085606083015284608083015261074960a08301856106b1565b61075660e08301846106b1565b98975050505050505050565b60006020828403121561077457600080fd5b8151801515811461078457600080fd5b939250505056fea26469706673582212204c2cd764983a078a0acaf210d01cba40a233f6e965fbd1313aed3fe2eca0705164736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x20C13B0B GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x20C13B0B EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0xA56DFE4A EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xE4A30116 EQ PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xC55699C EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x158EF93E EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xB0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x80 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xA0 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8A JUMP JUMPDEST PUSH2 0xC3 PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x475 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8A JUMP JUMPDEST PUSH2 0xC3 PUSH2 0x102 CALLDATASIZE PUSH1 0x4 PUSH2 0x4BC JUMP JUMPDEST PUSH2 0x17A JUMP JUMPDEST PUSH2 0x80 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x123 PUSH2 0x11E CALLDATASIZE PUSH1 0x4 PUSH2 0x516 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x152 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP4 PUSH2 0x222 JUMP JUMPDEST POP PUSH32 0x1626BA7E00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x186 DUP4 DUP4 PUSH2 0x222 JUMP JUMPDEST POP PUSH32 0x20C13B0B00000000000000000000000000000000000000000000000000000000 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1EB JUMPI PUSH1 0x40 MLOAD PUSH32 0xDC149F000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x248 SWAP2 SWAP1 PUSH2 0x5A9 JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP PUSH1 0x0 PUSH20 0x0 PUSH4 0xD5EFEC9 DUP7 PUSH1 0x1 DUP8 DUP11 DUP9 DUP9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 SLOAD DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AE SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6DA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x762 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x328 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x384 JUMPI PUSH2 0x384 PUSH2 0x332 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3D1 JUMPI PUSH2 0x3D1 PUSH2 0x332 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3F3 JUMPI PUSH2 0x3F3 PUSH2 0x332 JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x443 PUSH2 0x43E DUP3 PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x38A JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x488 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4B2 DUP6 DUP3 DUP7 ADD PUSH2 0x41F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4F3 DUP7 DUP4 DUP8 ADD PUSH2 0x41F JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4B2 DUP6 DUP3 DUP7 ADD PUSH2 0x41F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x529 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x553 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x53B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x56D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x57B PUSH2 0x43E DUP3 PUSH2 0x3D9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5A1 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x538 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x5BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5E3 DUP9 DUP4 DUP10 ADD PUSH2 0x55C JUMP JUMPDEST SWAP6 POP PUSH1 0x20 SWAP2 POP DUP2 DUP8 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x606 DUP10 DUP3 DUP11 ADD PUSH2 0x55C JUMP JUMPDEST SWAP6 POP POP POP PUSH1 0x40 DUP7 ADD MLOAD SWAP3 POP DUP7 PUSH1 0x7F DUP8 ADD SLT PUSH2 0x620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x628 PUSH2 0x361 JUMP JUMPDEST DUP1 PUSH1 0xA0 DUP9 ADD DUP10 DUP2 GT ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 DUP10 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x656 JUMPI DUP1 MLOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 DUP5 ADD PUSH2 0x63F JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x67F DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x538 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP2 LT ISZERO PUSH2 0x6D4 JUMPI DUP2 MLOAD DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6B5 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH2 0x6EE DUP2 DUP5 ADD DUP12 PUSH2 0x667 JUMP JUMPDEST SWAP1 POP PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP10 PUSH1 0xF8 SHL AND PUSH1 0x20 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x72D DUP2 DUP10 PUSH2 0x667 JUMP JUMPDEST SWAP2 POP POP DUP6 PUSH1 0x60 DUP4 ADD MSTORE DUP5 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x749 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x756 PUSH1 0xE0 DUP4 ADD DUP5 PUSH2 0x6B1 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x784 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4C 0x2C 0xD7 PUSH5 0x983A078A0A 0xCA CALLCODE LT 0xD0 SHR 0xBA BLOCKHASH LOG2 CALLER 0xF6 0xE9 PUSH6 0xFBD1313AED3F 0xE2 0xEC LOG0 PUSH17 0x5164736F6C634300081100330000000000 ","sourceMap":"309:2792:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;700:16;;;;;;;;;160:25:6;;;148:2;133:18;700:16:2;;;;;;;;609:23;;;;;;;;;;;;361:14:6;;354:22;336:41;;324:2;309:18;609:23:2;196:187:6;1351::2;;;;;;:::i;:::-;;:::i;:::-;;;2455:66:6;2443:79;;;2425:98;;2413:2;2398:18;1351:187:2;2281:248:6;1873:184:2;;;;;;:::i;:::-;;:::i;784:16::-;;;;;;2925:174;;;;;;:::i;:::-;;:::i;:::-;;1351:187;1438:6;1456:40;1477:5;1466:17;;;;;;160:25:6;;148:2;133:18;;14:177;1466:17:2;;;;;;;;;;;;;1485:10;1456:9;:40::i;:::-;-1:-1:-1;1513:18:2;1351:187;;;;:::o;1873:184::-;1965:6;1983:28;1993:5;2000:10;1983:9;:28::i;:::-;-1:-1:-1;2028:22:2;1873:184;;;;:::o;2925:174::-;2992:11;;;;2988:44;;;3012:20;;;;;;;;;;;;;;2988:44;3042:11;:18;;;;3056:4;3042:18;;;;;;3070:6;;;;3086:1;:6;2925:174::o;2179:480::-;2265:13;2291:4;2281:15;;;;;;2265:31;;2307:30;2339:23;2364;2389:20;2436:10;2425:59;;;;;;;;;;;;:::i;:::-;2306:178;;;;;;;;2495:10;2508:8;:23;2532:17;2551:4;2557:10;2569:5;2576:15;2593:2;2508:96;;;;;;;;2598:1;;2508:96;;;;2601:1;;2508:96;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2495:109;;2620:5;2615:37;;2634:18;;;;;;;;;;;;;;2615:37;2255:404;;;;;;2179:480;;:::o;388:184:6:-;440:77;437:1;430:88;537:4;534:1;527:15;561:4;558:1;551:15;577:250;648:2;642:9;;;678:15;;723:18;708:34;;744:22;;;705:62;702:88;;;770:18;;:::i;:::-;806:2;799:22;577:250;:::o;832:334::-;903:2;897:9;959:2;949:13;;964:66;945:86;933:99;;1062:18;1047:34;;1083:22;;;1044:62;1041:88;;;1109:18;;:::i;:::-;1145:2;1138:22;832:334;;-1:-1:-1;832:334:6:o;1171:245::-;1219:4;1252:18;1244:6;1241:30;1238:56;;;1274:18;;:::i;:::-;-1:-1:-1;1331:2:6;1319:15;1336:66;1315:88;1405:4;1311:99;;1171:245::o;1421:462::-;1463:5;1516:3;1509:4;1501:6;1497:17;1493:27;1483:55;;1534:1;1531;1524:12;1483:55;1570:6;1557:20;1601:48;1617:31;1645:2;1617:31;:::i;:::-;1601:48;:::i;:::-;1674:2;1665:7;1658:19;1720:3;1713:4;1708:2;1700:6;1696:15;1692:26;1689:35;1686:55;;;1737:1;1734;1727:12;1686:55;1802:2;1795:4;1787:6;1783:17;1776:4;1767:7;1763:18;1750:55;1850:1;1825:16;;;1843:4;1821:27;1814:38;;;;1829:7;1421:462;-1:-1:-1;;;1421:462:6:o;1888:388::-;1965:6;1973;2026:2;2014:9;2005:7;2001:23;1997:32;1994:52;;;2042:1;2039;2032:12;1994:52;2078:9;2065:23;2055:33;;2139:2;2128:9;2124:18;2111:32;2166:18;2158:6;2155:30;2152:50;;;2198:1;2195;2188:12;2152:50;2221:49;2262:7;2253:6;2242:9;2238:22;2221:49;:::i;:::-;2211:59;;;1888:388;;;;;:::o;2534:539::-;2620:6;2628;2681:2;2669:9;2660:7;2656:23;2652:32;2649:52;;;2697:1;2694;2687:12;2649:52;2737:9;2724:23;2766:18;2807:2;2799:6;2796:14;2793:34;;;2823:1;2820;2813:12;2793:34;2846:49;2887:7;2878:6;2867:9;2863:22;2846:49;:::i;:::-;2836:59;;2948:2;2937:9;2933:18;2920:32;2904:48;;2977:2;2967:8;2964:16;2961:36;;;2993:1;2990;2983:12;2961:36;;3016:51;3059:7;3048:8;3037:9;3033:24;3016:51;:::i;3078:248::-;3146:6;3154;3207:2;3195:9;3186:7;3182:23;3178:32;3175:52;;;3223:1;3220;3213:12;3175:52;-1:-1:-1;;3246:23:6;;;3316:2;3301:18;;;3288:32;;-1:-1:-1;3078:248:6:o;3513:250::-;3598:1;3608:113;3622:6;3619:1;3616:13;3608:113;;;3698:11;;;3692:18;3679:11;;;3672:39;3644:2;3637:10;3608:113;;;-1:-1:-1;;3755:1:6;3737:16;;3730:27;3513:250::o;3768:441::-;3821:5;3874:3;3867:4;3859:6;3855:17;3851:27;3841:55;;3892:1;3889;3882:12;3841:55;3921:6;3915:13;3952:48;3968:31;3996:2;3968:31;:::i;3952:48::-;4025:2;4016:7;4009:19;4071:3;4064:4;4059:2;4051:6;4047:15;4043:26;4040:35;4037:55;;;4088:1;4085;4078:12;4037:55;4101:77;4175:2;4168:4;4159:7;4155:18;4148:4;4140:6;4136:17;4101:77;:::i;:::-;4196:7;3768:441;-1:-1:-1;;;;3768:441:6:o;4214:1113::-;4352:6;4360;4368;4376;4429:3;4417:9;4408:7;4404:23;4400:33;4397:53;;;4446:1;4443;4436:12;4397:53;4479:9;4473:16;4508:18;4549:2;4541:6;4538:14;4535:34;;;4565:1;4562;4555:12;4535:34;4588:60;4640:7;4631:6;4620:9;4616:22;4588:60;:::i;:::-;4578:70;;4667:2;4657:12;;4715:2;4704:9;4700:18;4694:25;4744:2;4734:8;4731:16;4728:36;;;4760:1;4757;4750:12;4728:36;4783:62;4837:7;4826:8;4815:9;4811:24;4783:62;:::i;:::-;4773:72;;;;4885:2;4874:9;4870:18;4864:25;4854:35;;4933:7;4927:3;4916:9;4912:19;4908:33;4898:61;;4955:1;4952;4945:12;4898:61;4979:21;;:::i;:::-;5022:3;5063;5052:9;5048:19;5090:7;5082:6;5079:19;5076:39;;;5111:1;5108;5101:12;5076:39;5150:2;5139:9;5135:18;5162:135;5178:6;5173:3;5170:15;5162:135;;;5244:10;;5232:23;;5275:12;;;;5195;;5162:135;;;5166:3;;5316:5;5306:15;;;;;4214:1113;;;;;;;:::o;5332:329::-;5373:3;5411:5;5405:12;5438:6;5433:3;5426:19;5454:76;5523:6;5516:4;5511:3;5507:14;5500:4;5493:5;5489:16;5454:76;:::i;:::-;5575:2;5563:15;5580:66;5559:88;5550:98;;;;5650:4;5546:109;;5332:329;-1:-1:-1;;5332:329:6:o;5666:326::-;5759:5;5782:1;5792:194;5806:4;5803:1;5800:11;5792:194;;;5865:13;;5853:26;;5902:4;5926:12;;;;5961:15;;;;5826:1;5819:9;5792:194;;;5796:3;;5666:326;;:::o;5997:983::-;6400:4;6429:3;6459:2;6448:9;6441:21;6485:44;6525:2;6514:9;6510:18;6502:6;6485:44;:::i;:::-;6471:58;;6587:66;6578:6;6573:3;6569:16;6565:89;6560:2;6549:9;6545:18;6538:117;6703:9;6695:6;6691:22;6686:2;6675:9;6671:18;6664:50;6731:32;6756:6;6748;6731:32;:::i;:::-;6723:40;;;6799:6;6794:2;6783:9;6779:18;6772:34;6843:6;6837:3;6826:9;6822:19;6815:35;6859:53;6907:3;6896:9;6892:19;6884:6;6859:53;:::i;:::-;6921;6969:3;6958:9;6954:19;6946:6;6921:53;:::i;:::-;5997:983;;;;;;;;;;:::o;6985:277::-;7052:6;7105:2;7093:9;7084:7;7080:23;7076:32;7073:52;;;7121:1;7118;7111:12;7073:52;7153:9;7147:16;7206:5;7199:13;7192:21;7185:5;7182:32;7172:60;;7228:1;7225;7218:12;7172:60;7251:5;6985:277;-1:-1:-1;;;6985:277:6:o"},"gasEstimates":{"creation":{"codeDepositCost":"397000","executionCost":"24660","totalCost":"421660"},"external":{"initialize(uint256,uint256)":"70856","initialized()":"2333","isValidSignature(bytes,bytes)":"infinite","isValidSignature(bytes32,bytes)":"infinite","x()":"2285","y()":"2306"},"internal":{"_validate(bytes memory,bytes memory)":"infinite"}},"methodIdentifiers":{"initialize(uint256,uint256)":"e4a30116","initialized()":"158ef93e","isValidSignature(bytes,bytes)":"20c13b0b","isValidSignature(bytes32,bytes)":"1626ba7e","x()":"0c55699c","y()":"a56dfe4a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_hash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"x\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"y\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is the implementation. It is meant to be used through      proxy clone.\",\"kind\":\"dev\",\"methods\":{\"initialize(uint256,uint256)\":{\"details\":\"This function is only callable once and needs to be called immediately      after deployment by the factory in the same transaction.\",\"params\":{\"x_\":\"The x coordinate of the public key\",\"y_\":\"The y coordinate of the public key\"}},\"isValidSignature(bytes,bytes)\":{\"details\":\"This is the old version of the function of EIP-1271 using bytes      memory instead of bytes32\",\"params\":{\"_hash\":\"The hash of the data signed\",\"_signature\":\"The signature\"},\"returns\":{\"_0\":\"The EIP-1271 magic value\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_hash\":\"The hash of the data signed\",\"_signature\":\"The signature\"},\"returns\":{\"_0\":\"The EIP-1271 magic value\"}}},\"title\":\"P256Signer\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyInitialized()\":[{\"notice\":\"Error message when the contract is already initialized\"}],\"InvalidHash()\":[{\"notice\":\"Error message when the hash is invalid\"}],\"InvalidSignature()\":[{\"notice\":\"Error message when the signature is invalid\"}]},\"kind\":\"user\",\"methods\":{\"initialized()\":{\"notice\":\"Whether the contract has been initialized\"},\"isValidSignature(bytes,bytes)\":{\"notice\":\"Verifies that the signer is the owner of the secp256r1 public key.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Verifies that the signer is the owner of the secp256r1 public key.\"},\"x()\":{\"notice\":\"The x coordinate of the secp256r1 public key\"},\"y()\":{\"notice\":\"The y coordinate of the secp256r1 public key\"}},\"notice\":\"A contract used to verify ECDSA signatures over secp256r1 through         EIP-1271 of Webauthn payloads.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/P256Signer.sol\":\"P256Signer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Base64URL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// from OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64URL {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode32(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        //string memory result = new string(4 * ((data.length + 2) / 3));\\n        string memory result = new string(4 * ((data.length + 2) / 3) - 1);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            /*\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n*/\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xcf1ca3e3e85d1b22dec76240ef3b23f9f6416d76eb7483b80a7d0a8a8e9aa664\",\"license\":\"MIT\"},\"contracts/FCL/FCL_elliptic.sol\":{\"content\":\"//********************************************************************************************/\\n//  ___           _       ___               _         _    _ _    \\n// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ \\n// | _| '_/ -_|_-< ' \\\\  | (__| '_| || | '_ \\\\  _/ _ \\\\ | |__| | '_ \\\\\\n// |_||_| \\\\___/__/_||_|  \\\\___|_|  \\\\_, | .__/\\\\__\\\\___/ |____|_|_.__/\\n//                                |__/|_|                        \\n///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project \\n///* License: This software is licensed under MIT License \\t \\n///* This Code may be reused including license and copyright notice. \\t \\n///* See LICENSE file at the root folder of the project.\\t\\t\\t\\t \\n///* FILE: FCL_elliptic.sol\\t\\t\\t\\t\\t\\t         \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* DESCRIPTION: modified XYZZ system coordinates for EVM elliptic point multiplication\\n///*  optimization\\n///* \\n//**************************************************************************************/\\n//* WARNING: this code SHALL not be used for non prime order curves for security reasons.\\n// Code is optimized for a=-3 only curves with prime order, constant like -1, -2 shall be replaced\\n// if ever used for other curve than sec256R1\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\nlibrary FCL_Elliptic_ZZ {\\n    // Set parameters for curve sec256r1.\\n    \\n    //curve prime field modulus\\n    uint constant p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    //short weierstrass first coefficient\\n    uint constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    //short weierstrass second coefficient    \\n    uint constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    //generating point affine coordinates    \\n    uint constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    //curve order (number of points)\\n    uint constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;    \\n    /* -2 mod p constant, used to speed up inversion and doubling (avoid negation)*/\\n    uint constant minus_2 = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD;\\n    /* -2 mod n constant, used to speed up inversion*/\\n    uint constant minus_2modn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F; \\n       \\n    uint constant minus_1=      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    \\n    /**\\n    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/\\n    function FCL_nModInv(uint256 u) internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {\\n            \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2modn)\\n            mstore(add(pointer, 0xa0), n)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n       \\n    }\\n     /**\\n    /* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled*/\\n    function FCL_pModInv(uint256 u)   internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {  \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2)\\n            mstore(add(pointer, 0xa0), p)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from affine rep to XYZZ rep*/\\n    function ecAff_SetZZ(\\n        uint x0,\\n        uint y0\\n    ) internal pure returns (uint[4] memory P) {\\n        unchecked {\\n            P[2] = 1; //ZZ\\n            P[3] = 1; //ZZZ\\n            P[0] = x0;\\n            P[1] = y0;\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from XYZZ rep to affine rep*/ \\n    /*    https://hyperelliptic.org/EFD/g1p/auto-shortw-xyzz-3.html#addition-add-2008-s*/\\n    function ecZZ_SetAff( uint x,\\n        uint y,\\n        uint zz,\\n        uint zzz) internal view  returns (uint x1, uint y1)\\n    {\\n      uint zzzInv = FCL_pModInv(zzz); //1/zzz\\n      y1=mulmod(y,zzzInv,p);//Y/zzz\\n      uint b=mulmod(zz, zzzInv,p); //1/z\\n      zzzInv= mulmod(b,b,p); //1/zz\\n      x1=mulmod(x,zzzInv,p);//X/zz\\n    }\\n    \\n \\n    \\n    /**\\n    /* @dev Sutherland2008 doubling*/\\n    /* The \\\"dbl-2008-s-1\\\" doubling formulas */\\n    \\n    function ecZZ_Dbl(\\n    \\tuint x,\\n        uint y,\\n        uint zz,\\n        uint zzz\\n    ) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n    {\\n     unchecked{\\n     assembly{\\n      P0:=mulmod(2, y, p) //U = 2*Y1\\n      P2:=mulmod(P0,P0,p)  // V=U^2\\n      P3:=mulmod(x, P2,p)// S = X1*V\\n      P1:=mulmod(P0, P2,p) // W=UV\\n      P2:=mulmod(P2, zz, p) //zz3=V*ZZ1\\n      zz:=mulmod(3, mulmod(addmod(x,sub(p,zz),p), addmod(x,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      P0:=addmod(mulmod(zz,zz,p), mulmod(minus_2, P3,p),p) //X3=M^2-2S\\n      x:=mulmod(zz,addmod(P3, sub(p,P0),p),p)//M(S-X3)\\n      P3:=mulmod(P1,zzz,p)//zzz3=W*zzz1\\n      P1:=addmod(x, sub(p, mulmod(P1, y,p)),p )//Y3= M(S-X3)-W*Y1\\n      }\\n     }\\n     return (P0, P1, P2, P3);\\n    }\\n    \\n     /**\\n     * @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\\n     * warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)\\n     */\\n     \\n    //tbd: return -x1 and -Y1 in double to avoid two substractions\\n    function ecZZ_AddN(\\n    \\tuint x1,\\n        uint y1,\\n        uint zz1,\\n        uint zzz1,\\n        uint x2,\\n        uint y2) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n     {\\n       unchecked{\\n      if(y1==0){\\n       return (x2,y2,1,1);\\n      }\\n  \\n       assembly{\\n      y1:=sub(p, y1)\\n      y2:=addmod(mulmod(y2, zzz1,p),y1,p)  \\n      x2:=addmod(mulmod(x2, zz1,p),sub(p,x1),p)  \\n      P0:=mulmod(x2, x2, p)//PP = P^2\\n      P1:=mulmod(P0,x2,p)//PPP = P*PP\\n      P2:=mulmod(zz1,P0,p) ////ZZ3 = ZZ1*PP\\n      P3:= mulmod(zzz1,P1,p) ////ZZZ3 = ZZZ1*PPP\\n      zz1:=mulmod(x1, P0, p)//Q = X1*PP\\n      P0:=addmod(addmod(mulmod(y2,y2, p), sub(p,P1),p ), mulmod(minus_2, zz1,p) ,p )//R^2-PPP-2*Q\\n      P1:=addmod(mulmod(addmod(zz1, sub(p,P0),p), y2, p), mulmod(y1, P1,p),p)//R*(Q-X3)\\n     }\\n    //end assembly\\n      }//end unchecked\\n      return (P0, P1, P2, P3);\\n     }\\n       \\n     /**\\n     * @dev Return the zero curve in XYZZ coordinates.\\n     */\\n    function ecZZ_SetZero() internal pure returns (uint x, uint y, uint zz, uint zzz) {\\n        return (0, 0, 0, 0);\\n    }\\n     /**\\n     * @dev Check if point is the neutral of the curve\\n     */\\n    function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\\n    {\\n     if ( (y0 == 0)  ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)\\n     */\\n    function ecAff_SetZero() internal pure returns (uint x, uint y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve in affine rep.\\n     */\\n   function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\\n        return (y==0);\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve).\\n     */\\n    function ecAff_isOnCurve(uint x, uint y) internal pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n        unchecked {\\n            uint LHS = mulmod(y, y, p); // y^2\\n            uint RHS = addmod(mulmod(mulmod(x, x, p), x, p), mulmod(x, a, p), p); // x^3+ax\\n                 RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n           \\n            return LHS == RHS;\\n        }\\n    }\\n    \\n\\n      /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n     \\n    function ecAff_add(\\n        uint x0,\\n        uint y0,\\n        uint x1,\\n        uint y1\\n    ) internal view returns (uint, uint) {\\n        uint zz0;\\n        uint zzz0;\\n        \\n\\tif(ecAff_IsZero(x0,y0)) return (x1,y1);\\n\\tif(ecAff_IsZero(x1,y1)) return (x1,y1);\\n\\t\\n        (x0, y0, zz0, zzz0) = ecZZ_AddN(x0, y0, 1,1, x1, y1);\\n\\n        return ecZZ_SetAff(x0, y0, zz0, zzz0);\\n    }\\n\\n     /**\\n     * @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key\\n     */\\n     function ecZZ_mulmuladd_S_asm(\\n        uint Q0, uint Q1,// Point G and Q stored in one memory for stack optimization\\n        uint scalar_u,\\n        uint scalar_v\\n    ) internal view returns (uint X) {\\n     uint zz;\\n     uint zzz;\\n     uint Y;\\n     uint index=255;\\n     uint[6] memory T;\\n     uint H0;\\n     uint H1;   \\n     \\n     unchecked {\\n     \\n     if(scalar_u==0 && scalar_v==0) return 0;\\n     \\n     (H0,H1 )=ecAff_add(gx,gy,Q0, Q1);//will not work if Q=P, obvious forbidden private key\\n   \\n   /*\\n     while( ( ((scalar_u>>index)&1)+2*((scalar_v>>index)&1) ) ==0){\\n      index=index-1; \\n     }\\n     */\\n         \\n      assembly{\\n      \\n     \\n      for{  let T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      } eq(T4,0) {\\n        index := sub(index, 1)\\n        T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      }\\n      {}\\n       zz:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n           \\n      if eq(zz,1) {\\n      \\tX:=gx\\n      \\tY:=gy\\n      \\t}\\n      if eq(zz,2) {\\n       X:=Q0\\n      \\tY:=Q1\\n      }\\n      if eq(zz,3) {\\n      \\t X:=H0\\n      \\t Y:= H1\\n      }\\n     \\n      index:=sub(index,1)\\n      zz:=1\\n      zzz:=1\\n      \\n      for {   } gt( minus_1, index) { index := sub(index, 1) } \\n      {\\n      // inlined EcZZ_Dbl\\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n      \\n     { \\n      //value of dibit\\t\\n      T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      \\n      if iszero(T4){\\n       Y:=sub(p,Y)//restore the -Y inversion \\n       continue\\n      }// if T4!=0\\n        \\n      if eq(T4,1) {\\n      \\tT1:=gx\\n      \\tT2:=gy\\n      \\t\\n      \\t}\\n      if eq(T4,2) {\\n        T1:=Q0\\n      \\tT2:=Q1\\n      }\\n      if eq(T4,3) {\\n      \\t T1:=H0\\n      \\t T2:= H1\\n      \\t }\\n      \\t \\t \\n       // inlined EcZZ_AddN\\n      //T3:=sub(p, Y)\\n      //T3:=Y\\n      let y2:=addmod(mulmod(T2, zzz,p),Y,p)  //R\\n      T2:=addmod(mulmod(T1, zz,p),sub(p,X),p)  //P\\n      \\n      //special extremely rare case accumulator where EcAdd is replaced by EcDbl, no need to optimize this\\n      //todo : construct edge vector case\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       \\n       T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      \\n      continue  \\n       }\\n      }\\n      \\n      T4:=mulmod(T2, T2, p)//PP\\n      let TT1:=mulmod(T4,T2,p)//PPP, this one could be spared, but adding this register spare gas\\n      zz:=mulmod(zz,T4,p) \\n      zzz:= mulmod(zzz,TT1,p) //zz3=V*ZZ1\\n      let TT2:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,TT1),p ), mulmod(minus_2, TT2,p) ,p )\\n      Y:=addmod(mulmod(addmod(TT2, sub(p,T4),p), y2, p), mulmod(Y, TT1,p),p)\\n     \\n      X:=T4\\n       }\\n          \\n           }//end loop\\n        mstore(add(T, 0x60),zz)\\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(staticcall(not(0), 0x05, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n       \\n      //Y:=mulmod(Y,zzz,p)//Y/zzz\\n      //zz :=mulmod(zz, mload(T),p) //1/z\\n      //zz:= mulmod(zz,zz,p) //1/zz\\n      X:=mulmod(X,mload(T),p)//X/zz\\n      } //end assembly\\n     }//end unchecked\\n     \\n      return X;\\n    }\\n    \\n       \\n      //8 dimensions Shamir's trick, using precomputations stored in Shamir8,  stored as Bytecode of an external\\n      //contract at given address dataPointer\\n      //(thx to Lakhdar https://github.com/Kelvyne for EVM storage explanations and tricks)\\n      // the external tool to generate tables from public key is in the /sage directory\\n    function ecZZ_mulmuladd_S8_extcode(uint scalar_u, uint scalar_v, address dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n    \\n      unchecked{ \\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      extcodecopy(dataPointer, T, mload(T), 64)\\n      \\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\t{\\n      let TT1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(TT1,TT1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      let T1:=mulmod(TT1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      let T5:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T5,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      }\\n      {\\n      let T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      let index2:=sub(index, 64)\\n      let T3:=add(T4, add( shl(12, and(shr(index2, scalar_v),1)), shl(8, and(shr(index2, scalar_u),1)) ))\\n      let index3:=sub(index2, 64)\\n      let T2:=add(T3,add( shl(11, and(shr(index3, scalar_v),1)), shl(7, and(shr(index3, scalar_u),1)) ))\\n      index:=sub(index3, 64)\\n      let T1:=add(T2,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      \\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T1){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n       extcodecopy(dataPointer, T,T1, 64)\\n     }\\n     \\n     {\\n     \\n         /* Access to precomputed table using extcodecopy hack */\\n          \\n      // inlined EcZZ_AddN\\n      \\n      \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      let T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      \\n      //special case ecAdd(P,P)=EcDbl\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       let    T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       let T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      let T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n         continue\\n       }\\n      }\\n      \\n      let T4:=mulmod(T2, T2, p)\\n      let T1:=mulmod(T4,T2,p)//\\n       zz:=mulmod(zz,T4,p) //zzz3=V*ZZ1\\n      zzz:= mulmod(zzz,T1,p) // W=UV/\\n      let zz1:=mulmod(X, T4, p)\\n      X:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,X),p), y2, p), mulmod(Y, T1,p),p)\\n      \\n    \\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n   \\n     \\n      // improving the extcodecopy trick : append array at end of contract\\n    function ecZZ_mulmuladd_S8_hackmem(uint scalar_u, uint scalar_v, uint dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      unchecked{ \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      codecopy( T, add(mload(T), dataPointer), 64)\\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n     \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      \\n      T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      index:=sub(index, 64)\\n      T4:=add(T4, add( shl(12, and(shr(index, scalar_v),1)), shl(8, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(11, and(shr(index, scalar_v),1)), shl(7, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T4){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n     {\\n         /* Access to precomputed table using extcodecopy hack */\\n      codecopy( T, add(T4, dataPointer), 64)\\n          \\n      // inlined EcZZ_AddN\\n      \\n     \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      T4:=mulmod(T2, T2, p)\\n      T1:=mulmod(T4,T2,p)\\n      T2:=mulmod(zz,T4,p) // W=UV\\n      zzz:= mulmod(zzz,T1,p) //zz3=V*ZZ1\\n      let zz1:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,T4),p), y2, p), mulmod(Y, T1,p),p)\\n      zz:=T2\\n      X:=T4\\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n    function ecdsa_verify_mem(\\n        bytes32 message,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) internal view returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,mload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n                \\n    /**\\n     * @dev ECDSA verification, given , signature, and public key.\\n     */\\n    function ecdsa_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint[2] calldata Q\\n    ) internal  returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n     \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        address Shamir8\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n       uint sInv =FCL_nModInv(rs[1]);\\n       //uint sInv =2;\\n       \\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_extcode(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), Shamir8);\\n      \\n\\tassembly{\\n\\t\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t\\n\\t \\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n        \\n        \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_hackmem(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint256 endcontract\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n        uint sInv =FCL_nModInv(rs[1]);\\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_hackmem(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), endcontract);\\n      \\n\\tassembly{\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n}//EOF\\n\\n\\n\",\"keccak256\":\"0xff4afff0bd9034e0de7df18b225e540636313280237c828428103030093f318a\",\"license\":\"MIT\"},\"contracts/P256Signer.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {Webauthn} from \\\"./Webauthn.sol\\\";\\n\\n/// @title P256Signer\\n/// @notice A contract used to verify ECDSA signatures over secp256r1 through\\n///         EIP-1271 of Webauthn payloads.\\n/// @dev This contract is the implementation. It is meant to be used through\\n///      proxy clone.\\ncontract P256Signer {\\n    /// @notice The EIP-1271 magic value\\n    bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\\n\\n    /// @notice The old EIP-1271 magic value\\n    bytes4 internal constant OLD_EIP1271_MAGICVALUE = 0x20c13b0b;\\n\\n    /// @notice Whether the contract has been initialized\\n    bool public initialized;\\n\\n    /// @notice The x coordinate of the secp256r1 public key\\n    uint256 public x;\\n\\n    /// @notice The y coordinate of the secp256r1 public key\\n    uint256 public y;\\n\\n    /// @notice Error message when the signature is invalid\\n    error InvalidSignature();\\n\\n    /// @notice Error message when the hash is invalid\\n    error InvalidHash();\\n\\n    /// @notice Error message when the contract is already initialized\\n    error AlreadyInitialized();\\n\\n    constructor() {\\n        initialized = true;\\n    }\\n\\n    /// @notice Verifies that the signer is the owner of the secp256r1 public key.\\n    /// @param _hash The hash of the data signed\\n    /// @param _signature The signature\\n    /// @return The EIP-1271 magic value\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4) {\\n        _validate(abi.encode(_hash), _signature);\\n        return EIP1271_MAGICVALUE;\\n    }\\n\\n    /// @notice Verifies that the signer is the owner of the secp256r1 public key.\\n    /// @dev This is the old version of the function of EIP-1271 using bytes\\n    ///      memory instead of bytes32\\n    /// @param _hash The hash of the data signed\\n    /// @param _signature The signature\\n    /// @return The EIP-1271 magic value\\n    function isValidSignature(bytes memory _hash, bytes memory _signature) public view returns (bytes4) {\\n        _validate(_hash, _signature);\\n        return OLD_EIP1271_MAGICVALUE;\\n    }\\n\\n    /// @notice Validates the signature\\n    /// @param data The data signed\\n    /// @param _signature The signature\\n    function _validate(bytes memory data, bytes memory _signature) private view {\\n        bytes32 _hash = keccak256(data);\\n        (bytes memory authenticatorData, bytes memory clientData, uint256 challengeOffset, uint256[2] memory rs) =\\n            abi.decode(_signature, (bytes, bytes, uint256, uint256[2]));\\n\\n        bool valid = Webauthn.checkSignature(authenticatorData, 0x01, clientData, _hash, challengeOffset, rs, [x, y]);\\n\\n        if (!valid) revert InvalidSignature();\\n    }\\n\\n    /// @dev This function is only callable once and needs to be called immediately\\n    ///      after deployment by the factory in the same transaction.\\n    /// @param x_ The x coordinate of the public key\\n    /// @param y_ The y coordinate of the public key\\n    function initialize(uint256 x_, uint256 y_) external {\\n        if (initialized) revert AlreadyInitialized();\\n        initialized = true;\\n        x = x_;\\n        y = y_;\\n    }\\n}\\n\",\"keccak256\":\"0x0006d3aac694a3f2be810db9f3f44c816411f94d73f2aa170818f7c54cae1e04\"},\"contracts/Webauthn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Base64URL} from \\\"./Base64URL.sol\\\";\\nimport {FCL_Elliptic_ZZ} from \\\"./FCL/FCL_elliptic.sol\\\";\\n\\nerror InvalidAuthenticatorData();\\nerror InvalidClientData();\\nerror InvalidSignature();\\n\\nlibrary Webauthn {\\n    function checkSignature(\\n        bytes memory authenticatorData,\\n        bytes1 authenticatorDataFlagMask,\\n        bytes memory clientData,\\n        bytes32 clientChallenge,\\n        uint clientChallengeDataOffset,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) public view returns (bool) {\\n        // Let the caller check if User Presence (0x01) or User Verification (0x04) are set\\n        if (\\n            (authenticatorData[32] & authenticatorDataFlagMask) !=\\n            authenticatorDataFlagMask\\n        ) {\\n            revert InvalidAuthenticatorData();\\n        }\\n        // Verify that clientData commits to the expected client challenge\\n        string memory challengeEncoded = Base64URL.encode32(\\n            abi.encodePacked(clientChallenge)\\n        );\\n        bytes memory challengeExtracted = new bytes(\\n            bytes(challengeEncoded).length\\n        );\\n        copyBytes(\\n            clientData,\\n            clientChallengeDataOffset,\\n            challengeExtracted.length,\\n            challengeExtracted,\\n            0\\n        );\\n        if (\\n            keccak256(abi.encodePacked(bytes(challengeEncoded))) !=\\n            keccak256(abi.encodePacked(challengeExtracted))\\n        ) {\\n            revert InvalidClientData();\\n        }      \\n        // Verify the signature over sha256(authenticatorData || sha256(clientData))\\n        bytes memory verifyData = new bytes(authenticatorData.length + 32);\\n        copyBytes(\\n            authenticatorData,\\n            0,\\n            authenticatorData.length,\\n            verifyData,\\n            0\\n        );\\n        copyBytes(\\n            abi.encodePacked(sha256(clientData)),\\n            0,\\n            32,\\n            verifyData,\\n            authenticatorData.length\\n        );\\n        bytes32 message = sha256(verifyData);\\n        return FCL_Elliptic_ZZ.ecdsa_verify_mem(message, rs, Q);\\n    }\\n\\n    /*\\n    The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n  */\\n    function copyBytes(\\n        bytes memory _from,\\n        uint _fromOffset,\\n        uint _length,\\n        bytes memory _to,\\n        uint _toOffset\\n    ) internal pure returns (bytes memory _copiedBytes) {\\n        uint minLength = _length + _toOffset;\\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint j = 32 + _toOffset;\\n        while (i < (32 + _fromOffset + _length)) {\\n            assembly {\\n                let tmp := mload(add(_from, i))\\n                mstore(add(_to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n        return _to;\\n    }\\n}\\n\",\"keccak256\":\"0x2a7664cb3b6cadd5ae500c6c9b06635de16e1fff5e504cccbd5952efae657683\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1218,"contract":"contracts/P256Signer.sol:P256Signer","label":"initialized","offset":0,"slot":"0","type":"t_bool"},{"astId":1221,"contract":"contracts/P256Signer.sol:P256Signer","label":"x","offset":0,"slot":"1","type":"t_uint256"},{"astId":1224,"contract":"contracts/P256Signer.sol:P256Signer","label":"y","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyInitialized()":[{"notice":"Error message when the contract is already initialized"}],"InvalidHash()":[{"notice":"Error message when the hash is invalid"}],"InvalidSignature()":[{"notice":"Error message when the signature is invalid"}]},"kind":"user","methods":{"initialized()":{"notice":"Whether the contract has been initialized"},"isValidSignature(bytes,bytes)":{"notice":"Verifies that the signer is the owner of the secp256r1 public key."},"isValidSignature(bytes32,bytes)":{"notice":"Verifies that the signer is the owner of the secp256r1 public key."},"x()":{"notice":"The x coordinate of the secp256r1 public key"},"y()":{"notice":"The y coordinate of the secp256r1 public key"}},"notice":"A contract used to verify ECDSA signatures over secp256r1 through         EIP-1271 of Webauthn payloads.","version":1}}},"contracts/P256SignerFactory.sol":{"P256SignerFactory":{"abi":[{"inputs":[{"internalType":"address","name":"implementation_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"x","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"y","type":"uint256"},{"indexed":false,"internalType":"address","name":"signer","type":"address"}],"name":"NewSignerCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"},{"internalType":"uint256","name":"y","type":"uint256"}],"name":"create","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"create(uint256,uint256)":{"params":{"x":"The x coordinate of the public key","y":"The y coordinate of the public key"}}},"title":"P256SignerFactory","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1388":{"entryPoint":null,"id":1388,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":64,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:306:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:6","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:6"},"nodeType":"YulFunctionCall","src":"143:12:6"},"nodeType":"YulExpressionStatement","src":"143:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:6"},"nodeType":"YulFunctionCall","src":"112:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:6"},"nodeType":"YulFunctionCall","src":"108:32:6"},"nodeType":"YulIf","src":"105:52:6"},{"nodeType":"YulVariableDeclaration","src":"166:29:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:6"},"nodeType":"YulFunctionCall","src":"179:16:6"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:6"},"nodeType":"YulFunctionCall","src":"260:12:6"},"nodeType":"YulExpressionStatement","src":"260:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:6"},"nodeType":"YulFunctionCall","src":"239:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:6"},"nodeType":"YulFunctionCall","src":"235:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:6"},"nodeType":"YulFunctionCall","src":"224:31:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:6"},"nodeType":"YulFunctionCall","src":"214:42:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:6"},"nodeType":"YulFunctionCall","src":"207:50:6"},"nodeType":"YulIf","src":"204:70:6"},{"nodeType":"YulAssignment","src":"283:15:6","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:6"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:6","type":""}],"src":"14:290:6"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b5060405161031a38038061031a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161028a610090600039600081816040015260d7015261028a6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635c60da1b1461003b5780639f7b45791461008b575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b610062610099366004610232565b60008083836040516020016100b8929190918252602082015260400190565b60405160208183030381529060405280519060200120905060006100fc7f0000000000000000000000000000000000000000000000000000000000000000836101db565b6040517fe4a30116000000000000000000000000000000000000000000000000000000008152600481018790526024810186905290915073ffffffffffffffffffffffffffffffffffffffff82169063e4a3011690604401600060405180830381600087803b15801561016e57600080fd5b505af1158015610182573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681528692508791507f33b61205835e3063eb8935cac4b29d7fc333ad80d6cb11893ba4758adf8cdde19060200160405180910390a3949350505050565b60006c5af43d3d93803e602a57fd5bf36021528260145273602c3d8160093d39f33d3d3d3d363d3d37363d73600052816035600c6000f59050806102275763301164256000526004601cfd5b600060215292915050565b6000806040838503121561024557600080fd5b5050803592602090910135915056fea2646970667358221220ec009f9898fcb5d212d2daac06dd5d6bbc31880e0064a8e79a85c5acfa508a5c64736f6c63430008110033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x31A CODESIZE SUB DUP1 PUSH2 0x31A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0x70 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x28A PUSH2 0x90 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0x40 ADD MSTORE PUSH1 0xD7 ADD MSTORE PUSH2 0x28A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9F7B4579 EQ PUSH2 0x8B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x62 PUSH2 0x99 CALLDATASIZE PUSH1 0x4 PUSH2 0x232 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB8 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xFC PUSH32 0x0 DUP4 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE4A3011600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0xE4A30116 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x182 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE DUP7 SWAP3 POP DUP8 SWAP2 POP PUSH32 0x33B61205835E3063EB8935CAC4B29D7FC333AD80D6CB11893BA4758ADF8CDDE1 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH13 0x5AF43D3D93803E602A57FD5BF3 PUSH1 0x21 MSTORE DUP3 PUSH1 0x14 MSTORE PUSH20 0x602C3D8160093D39F33D3D3D3D363D3D37363D73 PUSH1 0x0 MSTORE DUP2 PUSH1 0x35 PUSH1 0xC PUSH1 0x0 CREATE2 SWAP1 POP DUP1 PUSH2 0x227 JUMPI PUSH4 0x30116425 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 PUSH1 0x21 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC STOP SWAP16 SWAP9 SWAP9 0xFC 0xB5 0xD2 SLT 0xD2 0xDA 0xAC MOD 0xDD 0x5D PUSH12 0xBC31880E0064A8E79A85C5AC STATICCALL POP DUP11 0x5C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"205:877:3:-:0;;;354:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;401:32:3;;;205:877;;14:290:6;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:6;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:6:o;:::-;205:877:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@cloneDeterministic_1683":{"entryPoint":475,"id":1683,"parameterSlots":2,"returnSlots":1},"@create_1442":{"entryPoint":null,"id":1442,"parameterSlots":2,"returnSlots":1},"@implementation_1378":{"entryPoint":null,"id":1378,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":562,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1000:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"115:125:6","statements":[{"nodeType":"YulAssignment","src":"125:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"137:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"148:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"133:3:6"},"nodeType":"YulFunctionCall","src":"133:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"125:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"167:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"182:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"190:42:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"178:3:6"},"nodeType":"YulFunctionCall","src":"178:55:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"160:6:6"},"nodeType":"YulFunctionCall","src":"160:74:6"},"nodeType":"YulExpressionStatement","src":"160:74:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"84:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"95:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"106:4:6","type":""}],"src":"14:226:6"},{"body":{"nodeType":"YulBlock","src":"332:161:6","statements":[{"body":{"nodeType":"YulBlock","src":"378:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"387:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"390:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"380:6:6"},"nodeType":"YulFunctionCall","src":"380:12:6"},"nodeType":"YulExpressionStatement","src":"380:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"353:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"349:3:6"},"nodeType":"YulFunctionCall","src":"349:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"374:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"345:3:6"},"nodeType":"YulFunctionCall","src":"345:32:6"},"nodeType":"YulIf","src":"342:52:6"},{"nodeType":"YulAssignment","src":"403:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"426:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"413:12:6"},"nodeType":"YulFunctionCall","src":"413:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"403:6:6"}]},{"nodeType":"YulAssignment","src":"445:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"472:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"483:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"468:3:6"},"nodeType":"YulFunctionCall","src":"468:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"455:12:6"},"nodeType":"YulFunctionCall","src":"455:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"445:6:6"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"290:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"301:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"313:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"321:6:6","type":""}],"src":"245:248:6"},{"body":{"nodeType":"YulBlock","src":"645:100:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"662:3:6"},{"name":"value0","nodeType":"YulIdentifier","src":"667:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"655:6:6"},"nodeType":"YulFunctionCall","src":"655:19:6"},"nodeType":"YulExpressionStatement","src":"655:19:6"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"694:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"699:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"690:3:6"},"nodeType":"YulFunctionCall","src":"690:12:6"},{"name":"value1","nodeType":"YulIdentifier","src":"704:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"683:6:6"},"nodeType":"YulFunctionCall","src":"683:28:6"},"nodeType":"YulExpressionStatement","src":"683:28:6"},{"nodeType":"YulAssignment","src":"720:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"731:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"736:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"727:3:6"},"nodeType":"YulFunctionCall","src":"727:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"720:3:6"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"613:3:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"618:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"626:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"637:3:6","type":""}],"src":"498:247:6"},{"body":{"nodeType":"YulBlock","src":"879:119:6","statements":[{"nodeType":"YulAssignment","src":"889:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"901:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"912:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"897:3:6"},"nodeType":"YulFunctionCall","src":"897:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"889:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"931:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"942:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"924:6:6"},"nodeType":"YulFunctionCall","src":"924:25:6"},"nodeType":"YulExpressionStatement","src":"924:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"969:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"980:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"965:3:6"},"nodeType":"YulFunctionCall","src":"965:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"985:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"958:6:6"},"nodeType":"YulFunctionCall","src":"958:34:6"},"nodeType":"YulExpressionStatement","src":"958:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"840:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"851:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"859:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"870:4:6","type":""}],"src":"750:248:6"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_packed_t_uint256_t_uint256__to_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1378":[{"length":32,"start":64},{"length":32,"start":215}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100365760003560e01c80635c60da1b1461003b5780639f7b45791461008b575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b610062610099366004610232565b60008083836040516020016100b8929190918252602082015260400190565b60405160208183030381529060405280519060200120905060006100fc7f0000000000000000000000000000000000000000000000000000000000000000836101db565b6040517fe4a30116000000000000000000000000000000000000000000000000000000008152600481018790526024810186905290915073ffffffffffffffffffffffffffffffffffffffff82169063e4a3011690604401600060405180830381600087803b15801561016e57600080fd5b505af1158015610182573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681528692508791507f33b61205835e3063eb8935cac4b29d7fc333ad80d6cb11893ba4758adf8cdde19060200160405180910390a3949350505050565b60006c5af43d3d93803e602a57fd5bf36021528260145273602c3d8160093d39f33d3d3d3d363d3d37363d73600052816035600c6000f59050806102275763301164256000526004601cfd5b600060215292915050565b6000806040838503121561024557600080fd5b5050803592602090910135915056fea2646970667358221220ec009f9898fcb5d212d2daac06dd5d6bbc31880e0064a8e79a85c5acfa508a5c64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x9F7B4579 EQ PUSH2 0x8B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x62 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x62 PUSH2 0x99 CALLDATASIZE PUSH1 0x4 PUSH2 0x232 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB8 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0xFC PUSH32 0x0 DUP4 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE4A3011600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0xE4A30116 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x182 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE DUP7 SWAP3 POP DUP8 SWAP2 POP PUSH32 0x33B61205835E3063EB8935CAC4B29D7FC333AD80D6CB11893BA4758ADF8CDDE1 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH13 0x5AF43D3D93803E602A57FD5BF3 PUSH1 0x21 MSTORE DUP3 PUSH1 0x14 MSTORE PUSH20 0x602C3D8160093D39F33D3D3D3D363D3D37363D73 PUSH1 0x0 MSTORE DUP2 PUSH1 0x35 PUSH1 0xC PUSH1 0x0 CREATE2 SWAP1 POP DUP1 PUSH2 0x227 JUMPI PUSH4 0x30116425 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x1C REVERT JUMPDEST PUSH1 0x0 PUSH1 0x21 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEC STOP SWAP16 SWAP9 SWAP9 0xFC 0xB5 0xD2 SLT 0xD2 0xDA 0xAC MOD 0xDD 0x5D PUSH12 0xBC31880E0064A8E79A85C5AC STATICCALL POP DUP11 0x5C PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"205:877:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;308:39;;;;;;;;190:42:6;178:55;;;160:74;;148:2;133:18;308:39:3;;;;;;;761:319;;;;;;:::i;:::-;817:7;836:12;878:1;881;861:22;;;;;;;;655:19:6;;;699:2;690:12;;683:28;736:2;727:12;;498:247;861:22:3;;;;;;;;;;;;;851:33;;;;;;836:48;;894:14;911:49;939:14;955:4;911:27;:49::i;:::-;970:35;;;;;;;;924:25:6;;;965:18;;;958:34;;;894:66:3;;-1:-1:-1;970:29:3;;;;;;897:18:6;;970:35:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1020:30:3;;190:42:6;178:55;;160:74;;1040:1:3;;-1:-1:-1;1037:1:3;;-1:-1:-1;1020:30:3;;148:2:6;133:18;1020:30:3;;;;;;;1067:6;761:319;-1:-1:-1;;;;761:319:3:o;8126:822:5:-;8226:16;8337:28;8331:4;8324:42;8392:14;8386:4;8379:28;8433:42;8427:4;8420:56;8524:4;8518;8512;8509:1;8501:28;8489:40;;8598:8;8588:230;;8711:10;8705:4;8698:24;8799:4;8793;8786:18;8588:230;8930:1;8924:4;8917:15;8126:822;;;;:::o;245:248:6:-;313:6;321;374:2;362:9;353:7;349:23;345:32;342:52;;;390:1;387;380:12;342:52;-1:-1:-1;;413:23:6;;;483:2;468:18;;;455:32;;-1:-1:-1;245:248:6:o"},"gasEstimates":{"creation":{"codeDepositCost":"130000","executionCost":"infinite","totalCost":"infinite"},"external":{"create(uint256,uint256)":"infinite","implementation()":"infinite"}},"methodIdentifiers":{"create(uint256,uint256)":"9f7b4579","implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"NewSignerCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(uint256,uint256)\":{\"params\":{\"x\":\"The x coordinate of the public key\",\"y\":\"The y coordinate of the public key\"}}},\"title\":\"P256SignerFactory\",\"version\":1},\"userdoc\":{\"events\":{\"NewSignerCreated(uint256,uint256,address)\":{\"notice\":\"Emitted when a new P256Signer proxy contract is created\"}},\"kind\":\"user\",\"methods\":{\"create(uint256,uint256)\":{\"notice\":\"Creates a new P256Signer proxy contract\"},\"implementation()\":{\"notice\":\"The implementation address of the P256Signer contract\"}},\"notice\":\"Factory contract for creating proxies for P256Signer\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/P256SignerFactory.sol\":\"P256SignerFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Base64URL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// from OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64URL {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode32(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        //string memory result = new string(4 * ((data.length + 2) / 3));\\n        string memory result = new string(4 * ((data.length + 2) / 3) - 1);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            /*\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n*/\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xcf1ca3e3e85d1b22dec76240ef3b23f9f6416d76eb7483b80a7d0a8a8e9aa664\",\"license\":\"MIT\"},\"contracts/FCL/FCL_elliptic.sol\":{\"content\":\"//********************************************************************************************/\\n//  ___           _       ___               _         _    _ _    \\n// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ \\n// | _| '_/ -_|_-< ' \\\\  | (__| '_| || | '_ \\\\  _/ _ \\\\ | |__| | '_ \\\\\\n// |_||_| \\\\___/__/_||_|  \\\\___|_|  \\\\_, | .__/\\\\__\\\\___/ |____|_|_.__/\\n//                                |__/|_|                        \\n///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project \\n///* License: This software is licensed under MIT License \\t \\n///* This Code may be reused including license and copyright notice. \\t \\n///* See LICENSE file at the root folder of the project.\\t\\t\\t\\t \\n///* FILE: FCL_elliptic.sol\\t\\t\\t\\t\\t\\t         \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* DESCRIPTION: modified XYZZ system coordinates for EVM elliptic point multiplication\\n///*  optimization\\n///* \\n//**************************************************************************************/\\n//* WARNING: this code SHALL not be used for non prime order curves for security reasons.\\n// Code is optimized for a=-3 only curves with prime order, constant like -1, -2 shall be replaced\\n// if ever used for other curve than sec256R1\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\nlibrary FCL_Elliptic_ZZ {\\n    // Set parameters for curve sec256r1.\\n    \\n    //curve prime field modulus\\n    uint constant p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    //short weierstrass first coefficient\\n    uint constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    //short weierstrass second coefficient    \\n    uint constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    //generating point affine coordinates    \\n    uint constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    //curve order (number of points)\\n    uint constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;    \\n    /* -2 mod p constant, used to speed up inversion and doubling (avoid negation)*/\\n    uint constant minus_2 = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD;\\n    /* -2 mod n constant, used to speed up inversion*/\\n    uint constant minus_2modn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F; \\n       \\n    uint constant minus_1=      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    \\n    /**\\n    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/\\n    function FCL_nModInv(uint256 u) internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {\\n            \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2modn)\\n            mstore(add(pointer, 0xa0), n)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n       \\n    }\\n     /**\\n    /* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled*/\\n    function FCL_pModInv(uint256 u)   internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {  \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2)\\n            mstore(add(pointer, 0xa0), p)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from affine rep to XYZZ rep*/\\n    function ecAff_SetZZ(\\n        uint x0,\\n        uint y0\\n    ) internal pure returns (uint[4] memory P) {\\n        unchecked {\\n            P[2] = 1; //ZZ\\n            P[3] = 1; //ZZZ\\n            P[0] = x0;\\n            P[1] = y0;\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from XYZZ rep to affine rep*/ \\n    /*    https://hyperelliptic.org/EFD/g1p/auto-shortw-xyzz-3.html#addition-add-2008-s*/\\n    function ecZZ_SetAff( uint x,\\n        uint y,\\n        uint zz,\\n        uint zzz) internal view  returns (uint x1, uint y1)\\n    {\\n      uint zzzInv = FCL_pModInv(zzz); //1/zzz\\n      y1=mulmod(y,zzzInv,p);//Y/zzz\\n      uint b=mulmod(zz, zzzInv,p); //1/z\\n      zzzInv= mulmod(b,b,p); //1/zz\\n      x1=mulmod(x,zzzInv,p);//X/zz\\n    }\\n    \\n \\n    \\n    /**\\n    /* @dev Sutherland2008 doubling*/\\n    /* The \\\"dbl-2008-s-1\\\" doubling formulas */\\n    \\n    function ecZZ_Dbl(\\n    \\tuint x,\\n        uint y,\\n        uint zz,\\n        uint zzz\\n    ) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n    {\\n     unchecked{\\n     assembly{\\n      P0:=mulmod(2, y, p) //U = 2*Y1\\n      P2:=mulmod(P0,P0,p)  // V=U^2\\n      P3:=mulmod(x, P2,p)// S = X1*V\\n      P1:=mulmod(P0, P2,p) // W=UV\\n      P2:=mulmod(P2, zz, p) //zz3=V*ZZ1\\n      zz:=mulmod(3, mulmod(addmod(x,sub(p,zz),p), addmod(x,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      P0:=addmod(mulmod(zz,zz,p), mulmod(minus_2, P3,p),p) //X3=M^2-2S\\n      x:=mulmod(zz,addmod(P3, sub(p,P0),p),p)//M(S-X3)\\n      P3:=mulmod(P1,zzz,p)//zzz3=W*zzz1\\n      P1:=addmod(x, sub(p, mulmod(P1, y,p)),p )//Y3= M(S-X3)-W*Y1\\n      }\\n     }\\n     return (P0, P1, P2, P3);\\n    }\\n    \\n     /**\\n     * @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\\n     * warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)\\n     */\\n     \\n    //tbd: return -x1 and -Y1 in double to avoid two substractions\\n    function ecZZ_AddN(\\n    \\tuint x1,\\n        uint y1,\\n        uint zz1,\\n        uint zzz1,\\n        uint x2,\\n        uint y2) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n     {\\n       unchecked{\\n      if(y1==0){\\n       return (x2,y2,1,1);\\n      }\\n  \\n       assembly{\\n      y1:=sub(p, y1)\\n      y2:=addmod(mulmod(y2, zzz1,p),y1,p)  \\n      x2:=addmod(mulmod(x2, zz1,p),sub(p,x1),p)  \\n      P0:=mulmod(x2, x2, p)//PP = P^2\\n      P1:=mulmod(P0,x2,p)//PPP = P*PP\\n      P2:=mulmod(zz1,P0,p) ////ZZ3 = ZZ1*PP\\n      P3:= mulmod(zzz1,P1,p) ////ZZZ3 = ZZZ1*PPP\\n      zz1:=mulmod(x1, P0, p)//Q = X1*PP\\n      P0:=addmod(addmod(mulmod(y2,y2, p), sub(p,P1),p ), mulmod(minus_2, zz1,p) ,p )//R^2-PPP-2*Q\\n      P1:=addmod(mulmod(addmod(zz1, sub(p,P0),p), y2, p), mulmod(y1, P1,p),p)//R*(Q-X3)\\n     }\\n    //end assembly\\n      }//end unchecked\\n      return (P0, P1, P2, P3);\\n     }\\n       \\n     /**\\n     * @dev Return the zero curve in XYZZ coordinates.\\n     */\\n    function ecZZ_SetZero() internal pure returns (uint x, uint y, uint zz, uint zzz) {\\n        return (0, 0, 0, 0);\\n    }\\n     /**\\n     * @dev Check if point is the neutral of the curve\\n     */\\n    function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\\n    {\\n     if ( (y0 == 0)  ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)\\n     */\\n    function ecAff_SetZero() internal pure returns (uint x, uint y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve in affine rep.\\n     */\\n   function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\\n        return (y==0);\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve).\\n     */\\n    function ecAff_isOnCurve(uint x, uint y) internal pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n        unchecked {\\n            uint LHS = mulmod(y, y, p); // y^2\\n            uint RHS = addmod(mulmod(mulmod(x, x, p), x, p), mulmod(x, a, p), p); // x^3+ax\\n                 RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n           \\n            return LHS == RHS;\\n        }\\n    }\\n    \\n\\n      /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n     \\n    function ecAff_add(\\n        uint x0,\\n        uint y0,\\n        uint x1,\\n        uint y1\\n    ) internal view returns (uint, uint) {\\n        uint zz0;\\n        uint zzz0;\\n        \\n\\tif(ecAff_IsZero(x0,y0)) return (x1,y1);\\n\\tif(ecAff_IsZero(x1,y1)) return (x1,y1);\\n\\t\\n        (x0, y0, zz0, zzz0) = ecZZ_AddN(x0, y0, 1,1, x1, y1);\\n\\n        return ecZZ_SetAff(x0, y0, zz0, zzz0);\\n    }\\n\\n     /**\\n     * @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key\\n     */\\n     function ecZZ_mulmuladd_S_asm(\\n        uint Q0, uint Q1,// Point G and Q stored in one memory for stack optimization\\n        uint scalar_u,\\n        uint scalar_v\\n    ) internal view returns (uint X) {\\n     uint zz;\\n     uint zzz;\\n     uint Y;\\n     uint index=255;\\n     uint[6] memory T;\\n     uint H0;\\n     uint H1;   \\n     \\n     unchecked {\\n     \\n     if(scalar_u==0 && scalar_v==0) return 0;\\n     \\n     (H0,H1 )=ecAff_add(gx,gy,Q0, Q1);//will not work if Q=P, obvious forbidden private key\\n   \\n   /*\\n     while( ( ((scalar_u>>index)&1)+2*((scalar_v>>index)&1) ) ==0){\\n      index=index-1; \\n     }\\n     */\\n         \\n      assembly{\\n      \\n     \\n      for{  let T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      } eq(T4,0) {\\n        index := sub(index, 1)\\n        T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      }\\n      {}\\n       zz:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n           \\n      if eq(zz,1) {\\n      \\tX:=gx\\n      \\tY:=gy\\n      \\t}\\n      if eq(zz,2) {\\n       X:=Q0\\n      \\tY:=Q1\\n      }\\n      if eq(zz,3) {\\n      \\t X:=H0\\n      \\t Y:= H1\\n      }\\n     \\n      index:=sub(index,1)\\n      zz:=1\\n      zzz:=1\\n      \\n      for {   } gt( minus_1, index) { index := sub(index, 1) } \\n      {\\n      // inlined EcZZ_Dbl\\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n      \\n     { \\n      //value of dibit\\t\\n      T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      \\n      if iszero(T4){\\n       Y:=sub(p,Y)//restore the -Y inversion \\n       continue\\n      }// if T4!=0\\n        \\n      if eq(T4,1) {\\n      \\tT1:=gx\\n      \\tT2:=gy\\n      \\t\\n      \\t}\\n      if eq(T4,2) {\\n        T1:=Q0\\n      \\tT2:=Q1\\n      }\\n      if eq(T4,3) {\\n      \\t T1:=H0\\n      \\t T2:= H1\\n      \\t }\\n      \\t \\t \\n       // inlined EcZZ_AddN\\n      //T3:=sub(p, Y)\\n      //T3:=Y\\n      let y2:=addmod(mulmod(T2, zzz,p),Y,p)  //R\\n      T2:=addmod(mulmod(T1, zz,p),sub(p,X),p)  //P\\n      \\n      //special extremely rare case accumulator where EcAdd is replaced by EcDbl, no need to optimize this\\n      //todo : construct edge vector case\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       \\n       T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      \\n      continue  \\n       }\\n      }\\n      \\n      T4:=mulmod(T2, T2, p)//PP\\n      let TT1:=mulmod(T4,T2,p)//PPP, this one could be spared, but adding this register spare gas\\n      zz:=mulmod(zz,T4,p) \\n      zzz:= mulmod(zzz,TT1,p) //zz3=V*ZZ1\\n      let TT2:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,TT1),p ), mulmod(minus_2, TT2,p) ,p )\\n      Y:=addmod(mulmod(addmod(TT2, sub(p,T4),p), y2, p), mulmod(Y, TT1,p),p)\\n     \\n      X:=T4\\n       }\\n          \\n           }//end loop\\n        mstore(add(T, 0x60),zz)\\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(staticcall(not(0), 0x05, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n       \\n      //Y:=mulmod(Y,zzz,p)//Y/zzz\\n      //zz :=mulmod(zz, mload(T),p) //1/z\\n      //zz:= mulmod(zz,zz,p) //1/zz\\n      X:=mulmod(X,mload(T),p)//X/zz\\n      } //end assembly\\n     }//end unchecked\\n     \\n      return X;\\n    }\\n    \\n       \\n      //8 dimensions Shamir's trick, using precomputations stored in Shamir8,  stored as Bytecode of an external\\n      //contract at given address dataPointer\\n      //(thx to Lakhdar https://github.com/Kelvyne for EVM storage explanations and tricks)\\n      // the external tool to generate tables from public key is in the /sage directory\\n    function ecZZ_mulmuladd_S8_extcode(uint scalar_u, uint scalar_v, address dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n    \\n      unchecked{ \\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      extcodecopy(dataPointer, T, mload(T), 64)\\n      \\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\t{\\n      let TT1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(TT1,TT1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      let T1:=mulmod(TT1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      let T5:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T5,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      }\\n      {\\n      let T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      let index2:=sub(index, 64)\\n      let T3:=add(T4, add( shl(12, and(shr(index2, scalar_v),1)), shl(8, and(shr(index2, scalar_u),1)) ))\\n      let index3:=sub(index2, 64)\\n      let T2:=add(T3,add( shl(11, and(shr(index3, scalar_v),1)), shl(7, and(shr(index3, scalar_u),1)) ))\\n      index:=sub(index3, 64)\\n      let T1:=add(T2,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      \\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T1){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n       extcodecopy(dataPointer, T,T1, 64)\\n     }\\n     \\n     {\\n     \\n         /* Access to precomputed table using extcodecopy hack */\\n          \\n      // inlined EcZZ_AddN\\n      \\n      \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      let T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      \\n      //special case ecAdd(P,P)=EcDbl\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       let    T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       let T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      let T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n         continue\\n       }\\n      }\\n      \\n      let T4:=mulmod(T2, T2, p)\\n      let T1:=mulmod(T4,T2,p)//\\n       zz:=mulmod(zz,T4,p) //zzz3=V*ZZ1\\n      zzz:= mulmod(zzz,T1,p) // W=UV/\\n      let zz1:=mulmod(X, T4, p)\\n      X:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,X),p), y2, p), mulmod(Y, T1,p),p)\\n      \\n    \\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n   \\n     \\n      // improving the extcodecopy trick : append array at end of contract\\n    function ecZZ_mulmuladd_S8_hackmem(uint scalar_u, uint scalar_v, uint dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      unchecked{ \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      codecopy( T, add(mload(T), dataPointer), 64)\\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n     \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      \\n      T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      index:=sub(index, 64)\\n      T4:=add(T4, add( shl(12, and(shr(index, scalar_v),1)), shl(8, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(11, and(shr(index, scalar_v),1)), shl(7, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T4){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n     {\\n         /* Access to precomputed table using extcodecopy hack */\\n      codecopy( T, add(T4, dataPointer), 64)\\n          \\n      // inlined EcZZ_AddN\\n      \\n     \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      T4:=mulmod(T2, T2, p)\\n      T1:=mulmod(T4,T2,p)\\n      T2:=mulmod(zz,T4,p) // W=UV\\n      zzz:= mulmod(zzz,T1,p) //zz3=V*ZZ1\\n      let zz1:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,T4),p), y2, p), mulmod(Y, T1,p),p)\\n      zz:=T2\\n      X:=T4\\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n    function ecdsa_verify_mem(\\n        bytes32 message,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) internal view returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,mload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n                \\n    /**\\n     * @dev ECDSA verification, given , signature, and public key.\\n     */\\n    function ecdsa_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint[2] calldata Q\\n    ) internal  returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n     \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        address Shamir8\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n       uint sInv =FCL_nModInv(rs[1]);\\n       //uint sInv =2;\\n       \\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_extcode(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), Shamir8);\\n      \\n\\tassembly{\\n\\t\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t\\n\\t \\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n        \\n        \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_hackmem(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint256 endcontract\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n        uint sInv =FCL_nModInv(rs[1]);\\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_hackmem(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), endcontract);\\n      \\n\\tassembly{\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n}//EOF\\n\\n\\n\",\"keccak256\":\"0xff4afff0bd9034e0de7df18b225e540636313280237c828428103030093f318a\",\"license\":\"MIT\"},\"contracts/P256Signer.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {Webauthn} from \\\"./Webauthn.sol\\\";\\n\\n/// @title P256Signer\\n/// @notice A contract used to verify ECDSA signatures over secp256r1 through\\n///         EIP-1271 of Webauthn payloads.\\n/// @dev This contract is the implementation. It is meant to be used through\\n///      proxy clone.\\ncontract P256Signer {\\n    /// @notice The EIP-1271 magic value\\n    bytes4 internal constant EIP1271_MAGICVALUE = 0x1626ba7e;\\n\\n    /// @notice The old EIP-1271 magic value\\n    bytes4 internal constant OLD_EIP1271_MAGICVALUE = 0x20c13b0b;\\n\\n    /// @notice Whether the contract has been initialized\\n    bool public initialized;\\n\\n    /// @notice The x coordinate of the secp256r1 public key\\n    uint256 public x;\\n\\n    /// @notice The y coordinate of the secp256r1 public key\\n    uint256 public y;\\n\\n    /// @notice Error message when the signature is invalid\\n    error InvalidSignature();\\n\\n    /// @notice Error message when the hash is invalid\\n    error InvalidHash();\\n\\n    /// @notice Error message when the contract is already initialized\\n    error AlreadyInitialized();\\n\\n    constructor() {\\n        initialized = true;\\n    }\\n\\n    /// @notice Verifies that the signer is the owner of the secp256r1 public key.\\n    /// @param _hash The hash of the data signed\\n    /// @param _signature The signature\\n    /// @return The EIP-1271 magic value\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4) {\\n        _validate(abi.encode(_hash), _signature);\\n        return EIP1271_MAGICVALUE;\\n    }\\n\\n    /// @notice Verifies that the signer is the owner of the secp256r1 public key.\\n    /// @dev This is the old version of the function of EIP-1271 using bytes\\n    ///      memory instead of bytes32\\n    /// @param _hash The hash of the data signed\\n    /// @param _signature The signature\\n    /// @return The EIP-1271 magic value\\n    function isValidSignature(bytes memory _hash, bytes memory _signature) public view returns (bytes4) {\\n        _validate(_hash, _signature);\\n        return OLD_EIP1271_MAGICVALUE;\\n    }\\n\\n    /// @notice Validates the signature\\n    /// @param data The data signed\\n    /// @param _signature The signature\\n    function _validate(bytes memory data, bytes memory _signature) private view {\\n        bytes32 _hash = keccak256(data);\\n        (bytes memory authenticatorData, bytes memory clientData, uint256 challengeOffset, uint256[2] memory rs) =\\n            abi.decode(_signature, (bytes, bytes, uint256, uint256[2]));\\n\\n        bool valid = Webauthn.checkSignature(authenticatorData, 0x01, clientData, _hash, challengeOffset, rs, [x, y]);\\n\\n        if (!valid) revert InvalidSignature();\\n    }\\n\\n    /// @dev This function is only callable once and needs to be called immediately\\n    ///      after deployment by the factory in the same transaction.\\n    /// @param x_ The x coordinate of the public key\\n    /// @param y_ The y coordinate of the public key\\n    function initialize(uint256 x_, uint256 y_) external {\\n        if (initialized) revert AlreadyInitialized();\\n        initialized = true;\\n        x = x_;\\n        y = y_;\\n    }\\n}\\n\",\"keccak256\":\"0x0006d3aac694a3f2be810db9f3f44c816411f94d73f2aa170818f7c54cae1e04\"},\"contracts/P256SignerFactory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {P256Signer} from \\\"./P256Signer.sol\\\";\\nimport \\\"solady/src/utils/LibClone.sol\\\";\\n\\n/// @title P256SignerFactory\\n/// @notice Factory contract for creating proxies for P256Signer\\ncontract P256SignerFactory {\\n    /// @notice The implementation address of the P256Signer contract\\n    address public immutable implementation;\\n\\n    constructor(address implementation_) {\\n        implementation = implementation_;\\n    }\\n\\n    /// @notice Emitted when a new P256Signer proxy contract is created\\n    event NewSignerCreated(uint256 indexed x, uint256 indexed y, address signer);\\n\\n    /// @notice Creates a new P256Signer proxy contract\\n    /// @param x The x coordinate of the public key\\n    /// @param y The y coordinate of the public key\\n    function create(uint256 x, uint256 y) external returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(x, y));\\n        address signer = LibClone.cloneDeterministic(implementation, salt);\\n        P256Signer(signer).initialize(x, y);\\n        emit NewSignerCreated(x, y, signer);\\n        return signer;\\n    }\\n}\\n\",\"keccak256\":\"0x3bdac08bf7a1c4c1621474b10733f74a9487359212705bbca42ec678aa549a53\"},\"contracts/Webauthn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Base64URL} from \\\"./Base64URL.sol\\\";\\nimport {FCL_Elliptic_ZZ} from \\\"./FCL/FCL_elliptic.sol\\\";\\n\\nerror InvalidAuthenticatorData();\\nerror InvalidClientData();\\nerror InvalidSignature();\\n\\nlibrary Webauthn {\\n    function checkSignature(\\n        bytes memory authenticatorData,\\n        bytes1 authenticatorDataFlagMask,\\n        bytes memory clientData,\\n        bytes32 clientChallenge,\\n        uint clientChallengeDataOffset,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) public view returns (bool) {\\n        // Let the caller check if User Presence (0x01) or User Verification (0x04) are set\\n        if (\\n            (authenticatorData[32] & authenticatorDataFlagMask) !=\\n            authenticatorDataFlagMask\\n        ) {\\n            revert InvalidAuthenticatorData();\\n        }\\n        // Verify that clientData commits to the expected client challenge\\n        string memory challengeEncoded = Base64URL.encode32(\\n            abi.encodePacked(clientChallenge)\\n        );\\n        bytes memory challengeExtracted = new bytes(\\n            bytes(challengeEncoded).length\\n        );\\n        copyBytes(\\n            clientData,\\n            clientChallengeDataOffset,\\n            challengeExtracted.length,\\n            challengeExtracted,\\n            0\\n        );\\n        if (\\n            keccak256(abi.encodePacked(bytes(challengeEncoded))) !=\\n            keccak256(abi.encodePacked(challengeExtracted))\\n        ) {\\n            revert InvalidClientData();\\n        }      \\n        // Verify the signature over sha256(authenticatorData || sha256(clientData))\\n        bytes memory verifyData = new bytes(authenticatorData.length + 32);\\n        copyBytes(\\n            authenticatorData,\\n            0,\\n            authenticatorData.length,\\n            verifyData,\\n            0\\n        );\\n        copyBytes(\\n            abi.encodePacked(sha256(clientData)),\\n            0,\\n            32,\\n            verifyData,\\n            authenticatorData.length\\n        );\\n        bytes32 message = sha256(verifyData);\\n        return FCL_Elliptic_ZZ.ecdsa_verify_mem(message, rs, Q);\\n    }\\n\\n    /*\\n    The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n  */\\n    function copyBytes(\\n        bytes memory _from,\\n        uint _fromOffset,\\n        uint _length,\\n        bytes memory _to,\\n        uint _toOffset\\n    ) internal pure returns (bytes memory _copiedBytes) {\\n        uint minLength = _length + _toOffset;\\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint j = 32 + _toOffset;\\n        while (i < (32 + _fromOffset + _length)) {\\n            assembly {\\n                let tmp := mload(add(_from, i))\\n                mstore(add(_to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n        return _to;\\n    }\\n}\\n\",\"keccak256\":\"0x2a7664cb3b6cadd5ae500c6c9b06635de16e1fff5e504cccbd5952efae657683\",\"license\":\"Apache-2.0\"},\"solady/src/utils/LibClone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Minimal proxy library.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)\\n/// @author Minimal proxy by 0age (https://github.com/0age)\\n/// @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie\\n/// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\\n///\\n/// @dev Minimal proxy:\\n/// Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime,\\n/// it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,\\n/// which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.\\n///\\n/// @dev Minimal proxy (PUSH0 variant):\\n/// This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai.\\n/// It is optimized first for minimal runtime gas, then for minimal bytecode.\\n/// The PUSH0 clone functions are intentionally postfixed with a jarring \\\"_PUSH0\\\" as\\n/// many EVM chains may not support the PUSH0 opcode in the early months after Shanghai.\\n/// Please use with caution.\\n///\\n/// @dev Clones with immutable args (CWIA):\\n/// The implementation of CWIA here implements a `receive()` method that emits the\\n/// `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata,\\n/// enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards\\n/// composability. The minimal proxy implementation does not offer this feature.\\nlibrary LibClone {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Unable to deploy the clone.\\n    error DeploymentFailed();\\n\\n    /// @dev The salt must start with either the zero address or the caller.\\n    error SaltDoesNotStartWithCaller();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  MINIMAL PROXY OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Deploys a clone of `implementation`.\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            /**\\n             * --------------------------------------------------------------------------+\\n             * CREATION (9 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\\n             * --------------------------------------------------------------------------|\\n             * 60 runSize | PUSH1 runSize     | r         |                              |\\n             * 3d         | RETURNDATASIZE    | 0 r       |                              |\\n             * 81         | DUP2              | r 0 r     |                              |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                              |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\\n             * --------------------------------------------------------------------------|\\n             * RUNTIME (44 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\\n             * --------------------------------------------------------------------------|\\n             *                                                                           |\\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | 0                      |                       |\\n             * 3d      | RETURNDATASIZE | 0 0                    |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 0                  |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 0 0                |                       |\\n             *                                                                           |\\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            |                       |\\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 cds 0 0 0 0        |                       |\\n             * 37      | CALLDATACOPY   | 0 0 0 0                | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            | [0..cds): calldata    |\\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          | [0..cds): calldata    |\\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0 0 0     | [0..cds): calldata    |\\n             * 5a      | GAS            | gas addr 0 cds 0 0 0 0 | [0..cds): calldata    |\\n             * f4      | DELEGATECALL   | success 0 0            | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds success 0 0        | [0..cds): calldata    |\\n             * 3d      | RETURNDATASIZE | rds rds success 0 0    | [0..cds): calldata    |\\n             * 93      | SWAP4          | 0 rds success 0 rds    | [0..cds): calldata    |\\n             * 80      | DUP1           | 0 0 rds success 0 rds  | [0..cds): calldata    |\\n             * 3e      | RETURNDATACOPY | success 0 rds          | [0..rds): returndata  |\\n             *                                                                           |\\n             * 60 0x2a | PUSH1 0x2a     | 0x2a success 0 rds     | [0..rds): returndata  |\\n             * 57      | JUMPI          | 0 rds                  | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * fd      | REVERT         |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b      | JUMPDEST       | 0 rds                  | [0..rds): returndata  |\\n             * f3      | RETURN         |                        | [0..rds): returndata  |\\n             * --------------------------------------------------------------------------+\\n             */\\n\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            instance := create(0, 0x0c, 0x35)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic clone of `implementation` with `salt`.\\n    function cloneDeterministic(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            instance := create2(0, 0x0c, 0x35, salt)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the clone of `implementation`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(address implementation) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            hash := keccak256(0x0c, 0x35)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic clone of `implementation`,\\n    /// with `salt` by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        bytes32 hash = initCodeHash(implementation);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*          MINIMAL PROXY OPERATIONS (PUSH0 VARIANT)          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Deploys a PUSH0 clone of `implementation`.\\n    function clone_PUSH0(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            /**\\n             * --------------------------------------------------------------------------+\\n             * CREATION (9 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\\n             * --------------------------------------------------------------------------|\\n             * 60 runSize | PUSH1 runSize     | r         |                              |\\n             * 5f         | PUSH0             | 0 r       |                              |\\n             * 81         | DUP2              | r 0 r     |                              |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\\n             * 5f         | PUSH0             | 0 o r 0 r |                              |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\\n             * --------------------------------------------------------------------------|\\n             * RUNTIME (45 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\\n             * --------------------------------------------------------------------------|\\n             *                                                                           |\\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5f      | PUSH0          | 0                      |                       |\\n             * 5f      | PUSH0          | 0 0                    |                       |\\n             *                                                                           |\\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0                |                       |\\n             * 5f      | PUSH0          | 0 cds 0 0              |                       |\\n             * 5f      | PUSH0          | 0 0 cds 0 0            |                       |\\n             * 37      | CALLDATACOPY   | 0 0                    | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0                | [0..cds): calldata    |\\n             * 5f      | PUSH0          | 0 cds 0 0              | [0..cds): calldata    |\\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0         | [0..cds): calldata    |\\n             * 5a      | GAS            | gas addr 0 cds 0 0     | [0..cds): calldata    |\\n             * f4      | DELEGATECALL   | success                | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds success            | [0..cds): calldata    |\\n             * 5f      | PUSH0          | 0 rds success          | [0..cds): calldata    |\\n             * 5f      | PUSH0          | 0 0 rds success        | [0..cds): calldata    |\\n             * 3e      | RETURNDATACOPY | success                | [0..rds): returndata  |\\n             *                                                                           |\\n             * 60 0x29 | PUSH1 0x29     | 0x29 success           | [0..rds): returndata  |\\n             * 57      | JUMPI          |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\\n             * fd      | REVERT         |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b      | JUMPDEST       |                        | [0..rds): returndata  |\\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\\n             * f3      | RETURN         |                        | [0..rds): returndata  |\\n             * --------------------------------------------------------------------------+\\n             */\\n\\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\\n            mstore(0x14, implementation) // 20\\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\\n            instance := create(0, 0x0e, 0x36)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic PUSH0 clone of `implementation` with `salt`.\\n    function cloneDeterministic_PUSH0(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\\n            mstore(0x14, implementation) // 20\\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\\n            instance := create2(0, 0x0e, 0x36, salt)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the PUSH0 clone of `implementation`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash_PUSH0(address implementation) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\\n            mstore(0x14, implementation) // 20\\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\\n            hash := keccak256(0x0e, 0x36)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic PUSH0 clone of `implementation`,\\n    /// with `salt` by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress_PUSH0(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes32 hash = initCodeHash_PUSH0(implementation);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*           CLONES WITH IMMUTABLE ARGS OPERATIONS            */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Deploys a minimal proxy with `implementation`,\\n    /// using immutable arguments encoded in `data`.\\n    ///\\n    /// Note: This implementation of CWIA differs from the original implementation.\\n    /// If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`.\\n    function clone(address implementation, bytes memory data) internal returns (address instance) {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n            // The `creationSize` is `extraLength + 108`\\n            // The `runSize` is `creationSize - 10`.\\n\\n            /**\\n             * ---------------------------------------------------------------------------------------------------+\\n             * CREATION (10 bytes)                                                                                |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                                                |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * 61 runSize | PUSH2 runSize     | r         |                                                       |\\n             * 3d         | RETURNDATASIZE    | 0 r       |                                                       |\\n             * 81         | DUP2              | r 0 r     |                                                       |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                                                       |\\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                                                       |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code                            |\\n             * f3         | RETURN            |           | [0..runSize): runtime code                            |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * RUNTIME (98 bytes + extraLength)                                                                   |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * Opcode   | Mnemonic       | Stack                    | Memory                                      |\\n             * ---------------------------------------------------------------------------------------------------|\\n             *                                                                                                    |\\n             * ::: if no calldata, emit event & return w/o `DELEGATECALL` ::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds                      |                                             |\\n             * 60 0x2c  | PUSH1 0x2c     | 0x2c cds                 |                                             |\\n             * 57       | JUMPI          |                          |                                             |\\n             * 34       | CALLVALUE      | cv                       |                                             |\\n             * 3d       | RETURNDATASIZE | 0 cv                     |                                             |\\n             * 52       | MSTORE         |                          | [0..0x20): callvalue                        |\\n             * 7f sig   | PUSH32 0x9e..  | sig                      | [0..0x20): callvalue                        |\\n             * 59       | MSIZE          | 0x20 sig                 | [0..0x20): callvalue                        |\\n             * 3d       | RETURNDATASIZE | 0 0x20 sig               | [0..0x20): callvalue                        |\\n             * a1       | LOG1           |                          | [0..0x20): callvalue                        |\\n             * 00       | STOP           |                          | [0..0x20): callvalue                        |\\n             * 5b       | JUMPDEST       |                          |                                             |\\n             *                                                                                                    |\\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds                      |                                             |\\n             * 3d       | RETURNDATASIZE | 0 cds                    |                                             |\\n             * 3d       | RETURNDATASIZE | 0 0 cds                  |                                             |\\n             * 37       | CALLDATACOPY   |                          | [0..cds): calldata                          |\\n             *                                                                                                    |\\n             * ::: keep some values in stack :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d       | RETURNDATASIZE | 0                        | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0                      | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0 0                    | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0 0 0                  | [0..cds): calldata                          |\\n             * 61 extra | PUSH2 extra    | e 0 0 0 0                | [0..cds): calldata                          |\\n             *                                                                                                    |\\n             * ::: copy extra data to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 80       | DUP1           | e e 0 0 0 0              | [0..cds): calldata                          |\\n             * 60 0x62  | PUSH1 0x62     | 0x62 e e 0 0 0 0         | [0..cds): calldata                          |\\n             * 36       | CALLDATASIZE   | cds 0x62 e e 0 0 0 0     | [0..cds): calldata                          |\\n             * 39       | CODECOPY       | e 0 0 0 0                | [0..cds): calldata, [cds..cds+e): extraData |\\n             *                                                                                                    |\\n             * ::: delegate call to the implementation contract ::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 01       | ADD            | cds+e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3d       | RETURNDATASIZE | 0 cds+e 0 0 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 73 addr  | PUSH20 addr    | addr 0 cds+e 0 0 0 0     | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 5a       | GAS            | gas addr 0 cds+e 0 0 0 0 | [0..cds): calldata, [cds..cds+e): extraData |\\n             * f4       | DELEGATECALL   | success 0 0              | [0..cds): calldata, [cds..cds+e): extraData |\\n             *                                                                                                    |\\n             * ::: copy return data to memory ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d       | RETURNDATASIZE | rds success 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3d       | RETURNDATASIZE | rds rds success 0 0      | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 93       | SWAP4          | 0 rds success 0 rds      | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 80       | DUP1           | 0 0 rds success 0 rds    | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3e       | RETURNDATACOPY | success 0 rds            | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * 60 0x60  | PUSH1 0x60     | 0x60 success 0 rds       | [0..rds): returndata                        |\\n             * 57       | JUMPI          | 0 rds                    | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * ::: revert ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * fd       | REVERT         |                          | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * ::: return ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b       | JUMPDEST       | 0 rds                    | [0..rds): returndata                        |\\n             * f3       | RETURN         |                          | [0..rds): returndata                        |\\n             * ---------------------------------------------------------------------------------------------------+\\n             */\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                // Do a out-of-gas revert if `extraLength` is too big. 0xffff - 0x62 + 0x01 = 0xff9e.\\n                // The actual EVM limit may be smaller and may change over time.\\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Create the instance.\\n            instance := create(0, sub(data, 0x4c), add(extraLength, 0x6c))\\n\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic clone of `implementation`,\\n    /// using immutable arguments encoded in `data`, with `salt`.\\n    ///\\n    /// Note: This implementation of CWIA differs from the original implementation.\\n    /// If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`.\\n    function cloneDeterministic(address implementation, bytes memory data, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                // Do a out-of-gas revert if `extraLength` is too big. 0xffff - 0x62 + 0x01 = 0xff9e.\\n                // The actual EVM limit may be smaller and may change over time.\\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Create the instance.\\n            instance := create2(0, sub(data, 0x4c), add(extraLength, 0x6c), salt)\\n\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the clone of `implementation`\\n    /// using immutable arguments encoded in `data`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(address implementation, bytes memory data)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // Do a out-of-gas revert if `dataLength` is too big. 0xffff - 0x02 - 0x62 = 0xff9b.\\n            // The actual EVM limit may be smaller and may change over time.\\n            returndatacopy(returndatasize(), returndatasize(), gt(dataLength, 0xff9b))\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                sub(data, 0x5a),\\n                or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Compute and store the bytecode hash.\\n            hash := keccak256(sub(data, 0x4c), add(extraLength, 0x6c))\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic clone of\\n    /// `implementation` using immutable arguments encoded in `data`, with `salt`, by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes memory data,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes32 hash = initCodeHash(implementation, data);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      OTHER OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the address when a contract with initialization code hash,\\n    /// `hash`, is deployed with `salt`, by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress(bytes32 hash, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and store the bytecode hash.\\n            mstore8(0x00, 0xff) // Write the prefix.\\n            mstore(0x35, hash)\\n            mstore(0x01, shl(96, deployer))\\n            mstore(0x15, salt)\\n            predicted := keccak256(0x00, 0x55)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x35, 0)\\n        }\\n    }\\n\\n    /// @dev Reverts if `salt` does not start with either the zero address or the caller.\\n    function checkStartsWithCaller(bytes32 salt) internal view {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the salt does not start with the zero address or the caller.\\n            if iszero(or(iszero(shr(96, salt)), eq(caller(), shr(96, salt)))) {\\n                // Store the function selector of `SaltDoesNotStartWithCaller()`.\\n                mstore(0x00, 0x2f634836)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x159b64c65da9e6efe93b8df8c6bb1c7672a7511dcaba414aaa3e447f6d7065e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"NewSignerCreated(uint256,uint256,address)":{"notice":"Emitted when a new P256Signer proxy contract is created"}},"kind":"user","methods":{"create(uint256,uint256)":{"notice":"Creates a new P256Signer proxy contract"},"implementation()":{"notice":"The implementation address of the P256Signer contract"}},"notice":"Factory contract for creating proxies for P256Signer","version":1}}},"contracts/Webauthn.sol":{"Webauthn":{"abi":[{"inputs":[],"name":"InvalidAuthenticatorData","type":"error"},{"inputs":[],"name":"InvalidClientData","type":"error"},{"inputs":[{"internalType":"bytes","name":"authenticatorData","type":"bytes"},{"internalType":"bytes1","name":"authenticatorDataFlagMask","type":"bytes1"},{"internalType":"bytes","name":"clientData","type":"bytes"},{"internalType":"bytes32","name":"clientChallenge","type":"bytes32"},{"internalType":"uint256","name":"clientChallengeDataOffset","type":"uint256"},{"internalType":"uint256[2]","name":"rs","type":"uint256[2]"},{"internalType":"uint256[2]","name":"Q","type":"uint256[2]"}],"name":"checkSignature","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"611c2961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80630d5efec91461003a575b600080fd5b61004d6100483660046119c0565b610061565b604051901515815260200160405180910390f35b6000867effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916878960208151811061009a5761009a611a95565b0160200151167fff0000000000000000000000000000000000000000000000000000000000000016146100f9576040517ffc93479200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101258660405160200161011191815260200190565b60405160208183030381529060405261035b565b90506000815167ffffffffffffffff81111561014357610143611876565b6040519080825280601f01601f19166020018201604052801561016d576020820181803683370190505b50905061017f88878351846000610484565b50806040516020016101919190611ac4565b60405160208183030381529060405280519060200120826040516020016101b89190611ac4565b6040516020818303038152906040528051906020012014610205576040517febab5d2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a5160206102159190611b22565b67ffffffffffffffff81111561022d5761022d611876565b6040519080825280601f01601f191660200182016040528015610257576020820181803683370190505b50905061026a8b60008d51846000610484565b506102eb60028a60405161027e9190611ac4565b602060405180830381855afa15801561029b573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906102be9190611b35565b6040516020016102d091815260200190565b60405160208183030381529060405260006020848f51610484565b5060006002826040516102fe9190611ac4565b602060405180830381855afa15801561031b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061033e9190611b35565b905061034b818888610512565b9c9b505050505050505050505050565b6060815160000361037a57505060408051602081019091526000815290565b6000604051806060016040528060408152602001611bb4604091399050600060016003855160026103ab9190611b22565b6103b59190611b4e565b6103c0906004611b89565b6103ca9190611ba0565b67ffffffffffffffff8111156103e2576103e2611876565b6040519080825280601f01601f19166020018201604052801561040c576020820181803683370190505b509050600182016020820185865187015b80821015610478576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061041d565b50929695505050505050565b606060006104928386611b22565b905080845110156104a257600080fd5b60006104af876020611b22565b905060006104be856020611b22565b90505b866104cd896020611b22565b6104d79190611b22565b8210156105055788820151868201526104f1602083611b22565b91506104fe602082611b22565b90506104c1565b5093979650505050505050565b81516000901580610544575082517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255111155b8061055157506020830151155b80610580575060208301517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255111155b1561058d575060006106a7565b8151602083015161059e91906106ae565b6105aa575060006106a7565b60006105e684600160200201516105e1907fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551611ba0565b610827565b905060007fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551828709905060007fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325518387600060200201510985516020870151919250600091610656919085856108b0565b90507fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255187517fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551038208159450505050505b9392505050565b60008215806106dc57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83145b806106e5575081155b8061070f57507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82145b1561071c57506000610821565b60007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838409905060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff807fffffffff00000001000000000000000000000000fffffffffffffffffffffffc87097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff877fffffffff00000001000000000000000000000000ffffffffffffffffffffffff898a09090890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff7f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b8208919091149150505b92915050565b6000610831611858565b60208152602080820152602060408201528260608201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254f60808201527fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255160a082015260208160c0836005600019fa6108a957600080fd5b5192915050565b600080808060ff6108bf611858565b600080891580156108ce575088155b156108e35760009750505050505050506113f6565b61092f7f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f58e8e6113fe565b809250819350505060018a851c1660018a861c1660011b015b8061096a5760018503945060018b861c1660018b871c1660011b019050610948565b5060018a851c1660018a861c1660011b019650600187036109cc577f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29697507f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f594505b600287036109db578b97508a94505b600387036109ea578197508094505b60018403935060019650600195505b837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff111561134f577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff856002097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8182097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818b097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82840992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff807fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8e087fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038f08096003097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a850999507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b84099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80837fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838409089b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80837fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038e08820992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff837fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b870908985060018e891c1660018e8a1c1660011b01905080610cd557887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03985050505050611344565b60018103610d24577f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29693507f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f592505b60028103610d33578f93508e92505b60038103610d42578593508492505b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff897fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8609087fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8e88090893508061113d578361113d577fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a60020994507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff85860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848e0992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8486097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d8f0891507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8d7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038f0890507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8183099150507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c8e0893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038e0894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84860993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8460030991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8b86099a507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8c85099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80847fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848509089c507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff808e7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038508830993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff808b87097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03850899505050505050611344565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84850991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8483097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838e099c507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818d099b507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff838f097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80827fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff847fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff878809080893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80838e097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff03860809089b50505050809b50505050505b6001840393506109f9565b86606084015260208352602080840152602060408401527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808401527fffffffff00000001000000000000000000000000ffffffffffffffffffffffff60a084015260208360c0856005600019fa6113c757600080fd5b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff835189099750505050505050505b949350505050565b600080808086611415578585935093505050611453565b84611427578585935093505050611453565b61143688886001808a8a61145c565b929a509098509250905061144c88888484611721565b9350935050505b94509492505050565b6000806000808860000361147b57508492508391506001905080611714565b7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff9889039889818988090894507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a7fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8a89090895507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff86870993507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff86850992507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff84890991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff83880990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff848b0997507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80897fffffffff00000001000000000000000000000000fffffffffffffffffffffffd097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff857fffffffff00000001000000000000000000000000ffffffffffffffffffffffff037fffffffff00000001000000000000000000000000ffffffffffffffffffffffff898a09080893507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff80848b097fffffffff00000001000000000000000000000000ffffffffffffffffffffffff877fffffffff00000001000000000000000000000000ffffffffffffffffffffffff887fffffffff00000001000000000000000000000000ffffffffffffffffffffffff038d08090892505b9650965096509692505050565b600080600061172f846117d6565b90507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff818709915060007fffffffff00000001000000000000000000000000ffffffffffffffffffffffff82870990507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff81820991507fffffffff00000001000000000000000000000000ffffffffffffffffffffffff8289099350505094509492505050565b60006117e0611858565b60208152602080820152602060408201528260608201527fffffffff00000001000000000000000000000000fffffffffffffffffffffffd60808201527fffffffff00000001000000000000000000000000ffffffffffffffffffffffff60a082015260208160c0836005600019fa6108a957600080fd5b6040518060c001604052806006906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126118b657600080fd5b813567ffffffffffffffff808211156118d1576118d1611876565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561191757611917611876565b8160405283815286602085880101111561193057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600082601f83011261196157600080fd5b6040516040810181811067ffffffffffffffff8211171561198457611984611876565b806040525080604084018581111561199b57600080fd5b845b818110156119b557803583526020928301920161199d565b509195945050505050565b6000806000806000806000610120888a0312156119dc57600080fd5b873567ffffffffffffffff808211156119f457600080fd5b611a008b838c016118a5565b985060208a013591507fff0000000000000000000000000000000000000000000000000000000000000082168214611a3757600080fd5b90965060408901359080821115611a4d57600080fd5b50611a5a8a828b016118a5565b9550506060880135935060808801359250611a788960a08a01611950565b9150611a878960e08a01611950565b905092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000825160005b81811015611ae55760208186018101518583015201611acb565b506000920191825250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561082157610821611af3565b600060208284031215611b4757600080fd5b5051919050565b600082611b84577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b808202811582820484141761082157610821611af3565b8181038181111561082157610821611af356fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5fa26469706673582212208e911f0e02617650f03dbb72a782ea1e31d345cadfd774547c07b6571b0ea7a264736f6c63430008110033","opcodes":"PUSH2 0x1C29 PUSH2 0x3A PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x2D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD5EFEC9 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C0 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP7 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP8 DUP10 PUSH1 0x20 DUP2 MLOAD DUP2 LT PUSH2 0x9A JUMPI PUSH2 0x9A PUSH2 0x1A95 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD AND PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0xF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFC93479200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x125 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x111 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x35B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x143 JUMPI PUSH2 0x143 PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x17F DUP9 DUP8 DUP4 MLOAD DUP5 PUSH1 0x0 PUSH2 0x484 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEBAB5D2900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP11 MLOAD PUSH1 0x20 PUSH2 0x215 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22D JUMPI PUSH2 0x22D PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x26A DUP12 PUSH1 0x0 DUP14 MLOAD DUP5 PUSH1 0x0 PUSH2 0x484 JUMP JUMPDEST POP PUSH2 0x2EB PUSH1 0x2 DUP11 PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x1B35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D0 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP16 MLOAD PUSH2 0x484 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2FE SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x1B35 JUMP JUMPDEST SWAP1 POP PUSH2 0x34B DUP2 DUP9 DUP9 PUSH2 0x512 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x37A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BB4 PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x3 DUP6 MLOAD PUSH1 0x2 PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x3B5 SWAP2 SWAP1 PUSH2 0x1B4E JUMP JUMPDEST PUSH2 0x3C0 SWAP1 PUSH1 0x4 PUSH2 0x1B89 JUMP JUMPDEST PUSH2 0x3CA SWAP2 SWAP1 PUSH2 0x1BA0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x40C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x478 JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x41D JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x492 DUP4 DUP7 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 MLOAD LT ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4AF DUP8 PUSH1 0x20 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4BE DUP6 PUSH1 0x20 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 PUSH2 0x4CD DUP10 PUSH1 0x20 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x505 JUMPI DUP9 DUP3 ADD MLOAD DUP7 DUP3 ADD MSTORE PUSH2 0x4F1 PUSH1 0x20 DUP4 PUSH2 0x1B22 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FE PUSH1 0x20 DUP3 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP PUSH2 0x4C1 JUMP JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 ISZERO DUP1 PUSH2 0x544 JUMPI POP DUP3 MLOAD PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 GT ISZERO JUMPDEST DUP1 PUSH2 0x551 JUMPI POP PUSH1 0x20 DUP4 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0x580 JUMPI POP PUSH1 0x20 DUP4 ADD MLOAD PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 GT ISZERO JUMPDEST ISZERO PUSH2 0x58D JUMPI POP PUSH1 0x0 PUSH2 0x6A7 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x59E SWAP2 SWAP1 PUSH2 0x6AE JUMP JUMPDEST PUSH2 0x5AA JUMPI POP PUSH1 0x0 PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E6 DUP5 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x5E1 SWAP1 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 PUSH2 0x1BA0 JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP3 DUP8 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP4 DUP8 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD MULMOD DUP6 MLOAD PUSH1 0x20 DUP8 ADD MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x656 SWAP2 SWAP1 DUP6 DUP6 PUSH2 0x8B0 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP8 MLOAD PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 SUB DUP3 ADDMOD ISZERO SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x6DC JUMPI POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 EQ JUMPDEST DUP1 PUSH2 0x6E5 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x70F JUMPI POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ JUMPDEST ISZERO PUSH2 0x71C JUMPI POP PUSH1 0x0 PUSH2 0x821 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP5 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC DUP8 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP8 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP11 MULMOD MULMOD ADDMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B DUP3 ADDMOD SWAP2 SWAP1 SWAP2 EQ SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x831 PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP4 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL PUSH2 0x8A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0xFF PUSH2 0x8BF PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP10 ISZERO DUP1 ISZERO PUSH2 0x8CE JUMPI POP DUP9 ISZERO JUMPDEST ISZERO PUSH2 0x8E3 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x92F PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 DUP15 DUP15 PUSH2 0x13FE JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH1 0x1 DUP11 DUP6 SHR AND PUSH1 0x1 DUP11 DUP7 SHR AND PUSH1 0x1 SHL ADD JUMPDEST DUP1 PUSH2 0x96A JUMPI PUSH1 0x1 DUP6 SUB SWAP5 POP PUSH1 0x1 DUP12 DUP7 SHR AND PUSH1 0x1 DUP12 DUP8 SHR AND PUSH1 0x1 SHL ADD SWAP1 POP PUSH2 0x948 JUMP JUMPDEST POP PUSH1 0x1 DUP11 DUP6 SHR AND PUSH1 0x1 DUP11 DUP7 SHR AND PUSH1 0x1 SHL ADD SWAP7 POP PUSH1 0x1 DUP8 SUB PUSH2 0x9CC JUMPI PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 SWAP8 POP PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 SWAP5 POP JUMPDEST PUSH1 0x2 DUP8 SUB PUSH2 0x9DB JUMPI DUP12 SWAP8 POP DUP11 SWAP5 POP JUMPDEST PUSH1 0x3 DUP8 SUB PUSH2 0x9EA JUMPI DUP2 SWAP8 POP DUP1 SWAP5 POP JUMPDEST PUSH1 0x1 DUP5 SUB SWAP4 POP PUSH1 0x1 SWAP7 POP PUSH1 0x1 SWAP6 POP JUMPDEST DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF GT ISZERO PUSH2 0x134F JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 PUSH1 0x2 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP3 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP12 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP5 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP15 ADDMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP16 ADDMOD MULMOD PUSH1 0x3 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP6 MULMOD SWAP10 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP5 MULMOD SWAP11 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP5 MULMOD ADDMOD SWAP12 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP15 ADDMOD DUP3 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP8 MULMOD ADDMOD SWAP9 POP PUSH1 0x1 DUP15 DUP10 SHR AND PUSH1 0x1 DUP15 DUP11 SHR AND PUSH1 0x1 SHL ADD SWAP1 POP DUP1 PUSH2 0xCD5 JUMPI DUP9 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB SWAP9 POP POP POP POP POP PUSH2 0x1344 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0xD24 JUMPI PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 SWAP4 POP PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 SWAP3 POP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xD33 JUMPI DUP16 SWAP4 POP DUP15 SWAP3 POP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0xD42 JUMPI DUP6 SWAP4 POP DUP5 SWAP3 POP JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP10 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP7 MULMOD ADDMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP9 MULMOD ADDMOD SWAP4 POP DUP1 PUSH2 0x113D JUMPI DUP4 PUSH2 0x113D JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 PUSH1 0x2 MULMOD SWAP5 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP7 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP15 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP7 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 DUP16 ADDMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP16 ADDMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP4 MULMOD SWAP2 POP POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP15 ADDMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP15 ADDMOD SWAP5 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP7 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 PUSH1 0x3 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP7 MULMOD SWAP11 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP6 MULMOD SWAP12 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP6 MULMOD ADDMOD SWAP13 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP15 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP6 ADDMOD DUP4 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP12 DUP8 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP6 ADDMOD SWAP10 POP POP POP POP POP POP PUSH2 0x1344 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP6 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP4 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP15 MULMOD SWAP13 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP14 MULMOD SWAP12 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP16 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP9 MULMOD ADDMOD ADDMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 DUP15 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP9 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP7 ADDMOD MULMOD ADDMOD SWAP12 POP POP POP POP DUP1 SWAP12 POP POP POP POP POP JUMPDEST PUSH1 0x1 DUP5 SUB SWAP4 POP PUSH2 0x9F9 JUMP JUMPDEST DUP7 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP5 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x20 DUP4 PUSH1 0xC0 DUP6 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL PUSH2 0x13C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 MLOAD DUP10 MULMOD SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP7 PUSH2 0x1415 JUMPI DUP6 DUP6 SWAP4 POP SWAP4 POP POP POP PUSH2 0x1453 JUMP JUMPDEST DUP5 PUSH2 0x1427 JUMPI DUP6 DUP6 SWAP4 POP SWAP4 POP POP POP PUSH2 0x1453 JUMP JUMPDEST PUSH2 0x1436 DUP9 DUP9 PUSH1 0x1 DUP1 DUP11 DUP11 PUSH2 0x145C JUMP JUMPDEST SWAP3 SWAP11 POP SWAP1 SWAP9 POP SWAP3 POP SWAP1 POP PUSH2 0x144C DUP9 DUP9 DUP5 DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP9 PUSH1 0x0 SUB PUSH2 0x147B JUMPI POP DUP5 SWAP3 POP DUP4 SWAP2 POP PUSH1 0x1 SWAP1 POP DUP1 PUSH2 0x1714 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 SUB SWAP9 DUP10 DUP2 DUP10 DUP9 MULMOD ADDMOD SWAP5 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP10 MULMOD ADDMOD SWAP6 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP8 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP6 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP10 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP9 MULMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP12 MULMOD SWAP8 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP11 MULMOD ADDMOD ADDMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 DUP12 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP8 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP9 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP14 ADDMOD MULMOD ADDMOD SWAP3 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x172F DUP5 PUSH2 0x17D6 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP8 MULMOD SWAP2 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP8 MULMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP3 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP10 MULMOD SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E0 PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP4 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL PUSH2 0x8A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18D1 JUMPI PUSH2 0x18D1 PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1917 JUMPI PUSH2 0x1917 PUSH2 0x1876 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1984 JUMPI PUSH2 0x1984 PUSH2 0x1876 JUMP JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP1 PUSH1 0x40 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x199B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19B5 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x199D JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x19DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A00 DUP12 DUP4 DUP13 ADD PUSH2 0x18A5 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD SWAP2 POP PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND DUP3 EQ PUSH2 0x1A37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x1A4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5A DUP11 DUP3 DUP12 ADD PUSH2 0x18A5 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH2 0x1A78 DUP10 PUSH1 0xA0 DUP11 ADD PUSH2 0x1950 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A87 DUP10 PUSH1 0xE0 DUP11 ADD PUSH2 0x1950 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AE5 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x1ACB JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B84 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x1AF3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x1AF3 JUMP INVALID COINBASE TIMESTAMP NUMBER DIFFICULTY GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392D5FA2646970667358 0x22 SLT KECCAK256 DUP15 SWAP2 0x1F 0xE MUL PUSH2 0x7650 CREATE RETURNDATASIZE 0xBB PUSH19 0xA782EA1E31D345CADFD774547C07B6571B0EA7 LOG2 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"252:2764:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;252:2764:4;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FCL_nModInv_94":{"entryPoint":2087,"id":94,"parameterSlots":1,"returnSlots":1},"@FCL_pModInv_111":{"entryPoint":6102,"id":111,"parameterSlots":1,"returnSlots":1},"@checkSignature_1589":{"entryPoint":97,"id":1589,"parameterSlots":7,"returnSlots":1},"@copyBytes_1651":{"entryPoint":1156,"id":1651,"parameterSlots":5,"returnSlots":1},"@ecAff_IsZero_350":{"entryPoint":null,"id":350,"parameterSlots":2,"returnSlots":1},"@ecAff_add_484":{"entryPoint":5118,"id":484,"parameterSlots":4,"returnSlots":2},"@ecAff_isOnCurve_421":{"entryPoint":1710,"id":421,"parameterSlots":2,"returnSlots":1},"@ecZZ_AddN_277":{"entryPoint":5212,"id":277,"parameterSlots":6,"returnSlots":4},"@ecZZ_SetAff_204":{"entryPoint":5921,"id":204,"parameterSlots":4,"returnSlots":2},"@ecZZ_mulmuladd_S_asm_550":{"entryPoint":2224,"id":550,"parameterSlots":4,"returnSlots":1},"@ecdsa_verify_mem_946":{"entryPoint":1298,"id":946,"parameterSlots":3,"returnSlots":1},"@encode32_47":{"entryPoint":859,"id":47,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256":{"entryPoint":6480,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes":{"entryPoint":6309,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":6965,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_memory_ptrt_bytes1t_bytes_memory_ptrt_bytes32t_uint256t_array$_t_uint256_$2_memory_ptrt_array$_t_uint256_$2_memory_ptr":{"entryPoint":6592,"id":null,"parameterSlots":2,"returnSlots":7},"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":6852,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_library_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6946,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":6990,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7049,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7072,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":6899,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6805,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6262,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5036:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"66:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:6"},"nodeType":"YulFunctionCall","src":"56:88:6"},"nodeType":"YulExpressionStatement","src":"56:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"160:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"163:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"153:6:6"},"nodeType":"YulFunctionCall","src":"153:15:6"},"nodeType":"YulExpressionStatement","src":"153:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"184:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"187:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"177:6:6"},"nodeType":"YulFunctionCall","src":"177:15:6"},"nodeType":"YulExpressionStatement","src":"177:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:184:6"},{"body":{"nodeType":"YulBlock","src":"255:725:6","statements":[{"body":{"nodeType":"YulBlock","src":"304:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"313:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"316:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"306:6:6"},"nodeType":"YulFunctionCall","src":"306:12:6"},"nodeType":"YulExpressionStatement","src":"306:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"283:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"291:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"279:3:6"},"nodeType":"YulFunctionCall","src":"279:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"298:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:6"},"nodeType":"YulFunctionCall","src":"275:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"268:6:6"},"nodeType":"YulFunctionCall","src":"268:35:6"},"nodeType":"YulIf","src":"265:55:6"},{"nodeType":"YulVariableDeclaration","src":"329:30:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"352:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"339:12:6"},"nodeType":"YulFunctionCall","src":"339:20:6"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"333:2:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"368:28:6","value":{"kind":"number","nodeType":"YulLiteral","src":"378:18:6","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"372:2:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"419:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"421:16:6"},"nodeType":"YulFunctionCall","src":"421:18:6"},"nodeType":"YulExpressionStatement","src":"421:18:6"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"411:2:6"},{"name":"_2","nodeType":"YulIdentifier","src":"415:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"408:2:6"},"nodeType":"YulFunctionCall","src":"408:10:6"},"nodeType":"YulIf","src":"405:36:6"},{"nodeType":"YulVariableDeclaration","src":"450:76:6","value":{"kind":"number","nodeType":"YulLiteral","src":"460:66:6","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"454:2:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"535:23:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"555:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"549:5:6"},"nodeType":"YulFunctionCall","src":"549:9:6"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"539:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"567:71:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"589:6:6"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"613:2:6"},{"kind":"number","nodeType":"YulLiteral","src":"617:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"609:3:6"},"nodeType":"YulFunctionCall","src":"609:13:6"},{"name":"_3","nodeType":"YulIdentifier","src":"624:2:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"605:3:6"},"nodeType":"YulFunctionCall","src":"605:22:6"},{"kind":"number","nodeType":"YulLiteral","src":"629:2:6","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"601:3:6"},"nodeType":"YulFunctionCall","src":"601:31:6"},{"name":"_3","nodeType":"YulIdentifier","src":"634:2:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"597:3:6"},"nodeType":"YulFunctionCall","src":"597:40:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"585:3:6"},"nodeType":"YulFunctionCall","src":"585:53:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"571:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"697:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"699:16:6"},"nodeType":"YulFunctionCall","src":"699:18:6"},"nodeType":"YulExpressionStatement","src":"699:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"656:10:6"},{"name":"_2","nodeType":"YulIdentifier","src":"668:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"653:2:6"},"nodeType":"YulFunctionCall","src":"653:18:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"676:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"688:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"673:2:6"},"nodeType":"YulFunctionCall","src":"673:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"650:2:6"},"nodeType":"YulFunctionCall","src":"650:46:6"},"nodeType":"YulIf","src":"647:72:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"735:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"739:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"728:6:6"},"nodeType":"YulFunctionCall","src":"728:22:6"},"nodeType":"YulExpressionStatement","src":"728:22:6"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"766:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"774:2:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"759:6:6"},"nodeType":"YulFunctionCall","src":"759:18:6"},"nodeType":"YulExpressionStatement","src":"759:18:6"},{"body":{"nodeType":"YulBlock","src":"825:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"834:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"837:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"827:6:6"},"nodeType":"YulFunctionCall","src":"827:12:6"},"nodeType":"YulExpressionStatement","src":"827:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"800:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"808:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"796:3:6"},"nodeType":"YulFunctionCall","src":"796:15:6"},{"kind":"number","nodeType":"YulLiteral","src":"813:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"792:3:6"},"nodeType":"YulFunctionCall","src":"792:26:6"},{"name":"end","nodeType":"YulIdentifier","src":"820:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"789:2:6"},"nodeType":"YulFunctionCall","src":"789:35:6"},"nodeType":"YulIf","src":"786:55:6"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"867:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"875:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"863:3:6"},"nodeType":"YulFunctionCall","src":"863:17:6"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"886:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"894:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"882:3:6"},"nodeType":"YulFunctionCall","src":"882:17:6"},{"name":"_1","nodeType":"YulIdentifier","src":"901:2:6"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"850:12:6"},"nodeType":"YulFunctionCall","src":"850:54:6"},"nodeType":"YulExpressionStatement","src":"850:54:6"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"928:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"936:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"924:3:6"},"nodeType":"YulFunctionCall","src":"924:15:6"},{"kind":"number","nodeType":"YulLiteral","src":"941:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"920:3:6"},"nodeType":"YulFunctionCall","src":"920:26:6"},{"kind":"number","nodeType":"YulLiteral","src":"948:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"913:6:6"},"nodeType":"YulFunctionCall","src":"913:37:6"},"nodeType":"YulExpressionStatement","src":"913:37:6"},{"nodeType":"YulAssignment","src":"959:15:6","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"968:6:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"959:5:6"}]}]},"name":"abi_decode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"229:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"237:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"245:5:6","type":""}],"src":"203:777:6"},{"body":{"nodeType":"YulBlock","src":"1045:586:6","statements":[{"body":{"nodeType":"YulBlock","src":"1094:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1103:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1106:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1096:6:6"},"nodeType":"YulFunctionCall","src":"1096:12:6"},"nodeType":"YulExpressionStatement","src":"1096:12:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1073:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1081:4:6","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1069:3:6"},"nodeType":"YulFunctionCall","src":"1069:17:6"},{"name":"end","nodeType":"YulIdentifier","src":"1088:3:6"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1065:3:6"},"nodeType":"YulFunctionCall","src":"1065:27:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1058:6:6"},"nodeType":"YulFunctionCall","src":"1058:35:6"},"nodeType":"YulIf","src":"1055:55:6"},{"nodeType":"YulVariableDeclaration","src":"1119:23:6","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1139:2:6","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1133:5:6"},"nodeType":"YulFunctionCall","src":"1133:9:6"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1123:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1151:33:6","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1173:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1181:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1169:3:6"},"nodeType":"YulFunctionCall","src":"1169:15:6"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1155:10:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1259:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1261:16:6"},"nodeType":"YulFunctionCall","src":"1261:18:6"},"nodeType":"YulExpressionStatement","src":"1261:18:6"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1202:10:6"},{"kind":"number","nodeType":"YulLiteral","src":"1214:18:6","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1199:2:6"},"nodeType":"YulFunctionCall","src":"1199:34:6"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1238:10:6"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1250:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1235:2:6"},"nodeType":"YulFunctionCall","src":"1235:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1196:2:6"},"nodeType":"YulFunctionCall","src":"1196:62:6"},"nodeType":"YulIf","src":"1193:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1297:2:6","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1301:10:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1290:6:6"},"nodeType":"YulFunctionCall","src":"1290:22:6"},"nodeType":"YulExpressionStatement","src":"1290:22:6"},{"nodeType":"YulVariableDeclaration","src":"1321:17:6","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1332:6:6"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1325:3:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1347:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1365:6:6"},{"kind":"number","nodeType":"YulLiteral","src":"1373:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1361:3:6"},"nodeType":"YulFunctionCall","src":"1361:15:6"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"1351:6:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1404:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1413:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1416:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1406:6:6"},"nodeType":"YulFunctionCall","src":"1406:12:6"},"nodeType":"YulExpressionStatement","src":"1406:12:6"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"1391:6:6"},{"name":"end","nodeType":"YulIdentifier","src":"1399:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1388:2:6"},"nodeType":"YulFunctionCall","src":"1388:15:6"},"nodeType":"YulIf","src":"1385:35:6"},{"nodeType":"YulVariableDeclaration","src":"1429:17:6","value":{"name":"offset","nodeType":"YulIdentifier","src":"1440:6:6"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1433:3:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"1513:88:6","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1534:3:6"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1552:3:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1539:12:6"},"nodeType":"YulFunctionCall","src":"1539:17:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1527:6:6"},"nodeType":"YulFunctionCall","src":"1527:30:6"},"nodeType":"YulExpressionStatement","src":"1527:30:6"},{"nodeType":"YulAssignment","src":"1570:21:6","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1581:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"1586:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1577:3:6"},"nodeType":"YulFunctionCall","src":"1577:14:6"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1570:3:6"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1466:3:6"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"1471:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1463:2:6"},"nodeType":"YulFunctionCall","src":"1463:15:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1479:25:6","statements":[{"nodeType":"YulAssignment","src":"1481:21:6","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1492:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"1497:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1488:3:6"},"nodeType":"YulFunctionCall","src":"1488:14:6"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1481:3:6"}]}]},"pre":{"nodeType":"YulBlock","src":"1459:3:6","statements":[]},"src":"1455:146:6"},{"nodeType":"YulAssignment","src":"1610:15:6","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1619:6:6"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1610:5:6"}]}]},"name":"abi_decode_array_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1019:6:6","type":""},{"name":"end","nodeType":"YulTypedName","src":"1027:3:6","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1035:5:6","type":""}],"src":"985:646:6"},{"body":{"nodeType":"YulBlock","src":"1871:888:6","statements":[{"body":{"nodeType":"YulBlock","src":"1918:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1927:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1930:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1920:6:6"},"nodeType":"YulFunctionCall","src":"1920:12:6"},"nodeType":"YulExpressionStatement","src":"1920:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1892:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"1901:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1888:3:6"},"nodeType":"YulFunctionCall","src":"1888:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1913:3:6","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1884:3:6"},"nodeType":"YulFunctionCall","src":"1884:33:6"},"nodeType":"YulIf","src":"1881:53:6"},{"nodeType":"YulVariableDeclaration","src":"1943:37:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1970:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1957:12:6"},"nodeType":"YulFunctionCall","src":"1957:23:6"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1947:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1989:28:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1999:18:6","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1993:2:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2044:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2053:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2056:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2046:6:6"},"nodeType":"YulFunctionCall","src":"2046:12:6"},"nodeType":"YulExpressionStatement","src":"2046:12:6"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2032:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"2040:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2029:2:6"},"nodeType":"YulFunctionCall","src":"2029:14:6"},"nodeType":"YulIf","src":"2026:34:6"},{"nodeType":"YulAssignment","src":"2069:59:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2100:9:6"},{"name":"offset","nodeType":"YulIdentifier","src":"2111:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2096:3:6"},"nodeType":"YulFunctionCall","src":"2096:22:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2120:7:6"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2079:16:6"},"nodeType":"YulFunctionCall","src":"2079:49:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2069:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"2137:45:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2167:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2178:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2163:3:6"},"nodeType":"YulFunctionCall","src":"2163:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2150:12:6"},"nodeType":"YulFunctionCall","src":"2150:32:6"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2141:5:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2292:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2301:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2304:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2294:6:6"},"nodeType":"YulFunctionCall","src":"2294:12:6"},"nodeType":"YulExpressionStatement","src":"2294:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2204:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2215:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"2222:66:6","type":"","value":"0xff00000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2211:3:6"},"nodeType":"YulFunctionCall","src":"2211:78:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2201:2:6"},"nodeType":"YulFunctionCall","src":"2201:89:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2194:6:6"},"nodeType":"YulFunctionCall","src":"2194:97:6"},"nodeType":"YulIf","src":"2191:117:6"},{"nodeType":"YulAssignment","src":"2317:15:6","value":{"name":"value","nodeType":"YulIdentifier","src":"2327:5:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2317:6:6"}]},{"nodeType":"YulVariableDeclaration","src":"2341:48:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2374:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2385:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2370:3:6"},"nodeType":"YulFunctionCall","src":"2370:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2357:12:6"},"nodeType":"YulFunctionCall","src":"2357:32:6"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"2345:8:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"2418:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2427:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2430:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2420:6:6"},"nodeType":"YulFunctionCall","src":"2420:12:6"},"nodeType":"YulExpressionStatement","src":"2420:12:6"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"2404:8:6"},{"name":"_1","nodeType":"YulIdentifier","src":"2414:2:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2401:2:6"},"nodeType":"YulFunctionCall","src":"2401:16:6"},"nodeType":"YulIf","src":"2398:36:6"},{"nodeType":"YulAssignment","src":"2443:61:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2474:9:6"},{"name":"offset_1","nodeType":"YulIdentifier","src":"2485:8:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2470:3:6"},"nodeType":"YulFunctionCall","src":"2470:24:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2496:7:6"}],"functionName":{"name":"abi_decode_bytes","nodeType":"YulIdentifier","src":"2453:16:6"},"nodeType":"YulFunctionCall","src":"2453:51:6"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2443:6:6"}]},{"nodeType":"YulAssignment","src":"2513:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2540:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2551:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2536:3:6"},"nodeType":"YulFunctionCall","src":"2536:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2523:12:6"},"nodeType":"YulFunctionCall","src":"2523:32:6"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2513:6:6"}]},{"nodeType":"YulAssignment","src":"2564:43:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2591:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2602:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2587:3:6"},"nodeType":"YulFunctionCall","src":"2587:19:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2574:12:6"},"nodeType":"YulFunctionCall","src":"2574:33:6"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2564:6:6"}]},{"nodeType":"YulAssignment","src":"2616:64:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2655:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2666:3:6","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2651:3:6"},"nodeType":"YulFunctionCall","src":"2651:19:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2672:7:6"}],"functionName":{"name":"abi_decode_array_uint256","nodeType":"YulIdentifier","src":"2626:24:6"},"nodeType":"YulFunctionCall","src":"2626:54:6"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2616:6:6"}]},{"nodeType":"YulAssignment","src":"2689:64:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2728:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2739:3:6","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:6"},"nodeType":"YulFunctionCall","src":"2724:19:6"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2745:7:6"}],"functionName":{"name":"abi_decode_array_uint256","nodeType":"YulIdentifier","src":"2699:24:6"},"nodeType":"YulFunctionCall","src":"2699:54:6"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2689:6:6"}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptrt_bytes1t_bytes_memory_ptrt_bytes32t_uint256t_array$_t_uint256_$2_memory_ptrt_array$_t_uint256_$2_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1789:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1800:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1812:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1820:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1828:6:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1836:6:6","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1844:6:6","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1852:6:6","type":""},{"name":"value6","nodeType":"YulTypedName","src":"1860:6:6","type":""}],"src":"1636:1123:6"},{"body":{"nodeType":"YulBlock","src":"2867:92:6","statements":[{"nodeType":"YulAssignment","src":"2877:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2889:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2900:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2885:3:6"},"nodeType":"YulFunctionCall","src":"2885:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2877:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2919:9:6"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2944:6:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2937:6:6"},"nodeType":"YulFunctionCall","src":"2937:14:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2930:6:6"},"nodeType":"YulFunctionCall","src":"2930:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2912:6:6"},"nodeType":"YulFunctionCall","src":"2912:41:6"},"nodeType":"YulExpressionStatement","src":"2912:41:6"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2836:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2847:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2858:4:6","type":""}],"src":"2764:195:6"},{"body":{"nodeType":"YulBlock","src":"2996:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3013:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3016:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3006:6:6"},"nodeType":"YulFunctionCall","src":"3006:88:6"},"nodeType":"YulExpressionStatement","src":"3006:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3110:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3113:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3103:6:6"},"nodeType":"YulFunctionCall","src":"3103:15:6"},"nodeType":"YulExpressionStatement","src":"3103:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3134:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3137:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3127:6:6"},"nodeType":"YulFunctionCall","src":"3127:15:6"},"nodeType":"YulExpressionStatement","src":"3127:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"2964:184:6"},{"body":{"nodeType":"YulBlock","src":"3272:63:6","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3289:3:6"},{"name":"value0","nodeType":"YulIdentifier","src":"3294:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3282:6:6"},"nodeType":"YulFunctionCall","src":"3282:19:6"},"nodeType":"YulExpressionStatement","src":"3282:19:6"},{"nodeType":"YulAssignment","src":"3310:19:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3321:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"3326:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3317:3:6"},"nodeType":"YulFunctionCall","src":"3317:12:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3310:3:6"}]}]},"name":"abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3248:3:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3253:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3264:3:6","type":""}],"src":"3153:182:6"},{"body":{"nodeType":"YulBlock","src":"3477:275:6","statements":[{"nodeType":"YulVariableDeclaration","src":"3487:27:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3507:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3501:5:6"},"nodeType":"YulFunctionCall","src":"3501:13:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3491:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3523:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"3532:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3527:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"3594:77:6","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3619:3:6"},{"name":"i","nodeType":"YulIdentifier","src":"3624:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3615:3:6"},"nodeType":"YulFunctionCall","src":"3615:11:6"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3642:6:6"},{"name":"i","nodeType":"YulIdentifier","src":"3650:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3638:3:6"},"nodeType":"YulFunctionCall","src":"3638:14:6"},{"kind":"number","nodeType":"YulLiteral","src":"3654:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3634:3:6"},"nodeType":"YulFunctionCall","src":"3634:25:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3628:5:6"},"nodeType":"YulFunctionCall","src":"3628:32:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3608:6:6"},"nodeType":"YulFunctionCall","src":"3608:53:6"},"nodeType":"YulExpressionStatement","src":"3608:53:6"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3553:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"3556:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3550:2:6"},"nodeType":"YulFunctionCall","src":"3550:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3564:21:6","statements":[{"nodeType":"YulAssignment","src":"3566:17:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3575:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"3578:4:6","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:6"},"nodeType":"YulFunctionCall","src":"3571:12:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3566:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"3546:3:6","statements":[]},"src":"3542:129:6"},{"nodeType":"YulVariableDeclaration","src":"3680:26:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3694:3:6"},{"name":"length","nodeType":"YulIdentifier","src":"3699:6:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3690:3:6"},"nodeType":"YulFunctionCall","src":"3690:16:6"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3684:2:6","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3722:2:6"},{"kind":"number","nodeType":"YulLiteral","src":"3726:1:6","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3715:6:6"},"nodeType":"YulFunctionCall","src":"3715:13:6"},"nodeType":"YulExpressionStatement","src":"3715:13:6"},{"nodeType":"YulAssignment","src":"3737:9:6","value":{"name":"_1","nodeType":"YulIdentifier","src":"3744:2:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3737:3:6"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3453:3:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3458:6:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3469:3:6","type":""}],"src":"3340:412:6"},{"body":{"nodeType":"YulBlock","src":"3789:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3809:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3799:6:6"},"nodeType":"YulFunctionCall","src":"3799:88:6"},"nodeType":"YulExpressionStatement","src":"3799:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3903:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3906:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3896:6:6"},"nodeType":"YulFunctionCall","src":"3896:15:6"},"nodeType":"YulExpressionStatement","src":"3896:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3927:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3930:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3920:6:6"},"nodeType":"YulFunctionCall","src":"3920:15:6"},"nodeType":"YulExpressionStatement","src":"3920:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3757:184:6"},{"body":{"nodeType":"YulBlock","src":"3994:77:6","statements":[{"nodeType":"YulAssignment","src":"4004:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4015:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4018:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4011:3:6"},"nodeType":"YulFunctionCall","src":"4011:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4004:3:6"}]},{"body":{"nodeType":"YulBlock","src":"4043:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4045:16:6"},"nodeType":"YulFunctionCall","src":"4045:18:6"},"nodeType":"YulExpressionStatement","src":"4045:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4035:1:6"},{"name":"sum","nodeType":"YulIdentifier","src":"4038:3:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4032:2:6"},"nodeType":"YulFunctionCall","src":"4032:10:6"},"nodeType":"YulIf","src":"4029:36:6"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"3977:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"3980:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"3986:3:6","type":""}],"src":"3946:125:6"},{"body":{"nodeType":"YulBlock","src":"4157:103:6","statements":[{"body":{"nodeType":"YulBlock","src":"4203:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4212:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4215:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4205:6:6"},"nodeType":"YulFunctionCall","src":"4205:12:6"},"nodeType":"YulExpressionStatement","src":"4205:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4178:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"4187:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4174:3:6"},"nodeType":"YulFunctionCall","src":"4174:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"4199:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4170:3:6"},"nodeType":"YulFunctionCall","src":"4170:32:6"},"nodeType":"YulIf","src":"4167:52:6"},{"nodeType":"YulAssignment","src":"4228:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4244:9:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4238:5:6"},"nodeType":"YulFunctionCall","src":"4238:16:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4228:6:6"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4123:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4134:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4146:6:6","type":""}],"src":"4076:184:6"},{"body":{"nodeType":"YulBlock","src":"4297:152:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4314:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4317:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4307:6:6"},"nodeType":"YulFunctionCall","src":"4307:88:6"},"nodeType":"YulExpressionStatement","src":"4307:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4411:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4414:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4404:6:6"},"nodeType":"YulFunctionCall","src":"4404:15:6"},"nodeType":"YulExpressionStatement","src":"4404:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4435:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4438:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4428:6:6"},"nodeType":"YulFunctionCall","src":"4428:15:6"},"nodeType":"YulExpressionStatement","src":"4428:15:6"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"4265:184:6"},{"body":{"nodeType":"YulBlock","src":"4500:228:6","statements":[{"body":{"nodeType":"YulBlock","src":"4531:168:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4552:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4555:77:6","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4545:6:6"},"nodeType":"YulFunctionCall","src":"4545:88:6"},"nodeType":"YulExpressionStatement","src":"4545:88:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4653:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4656:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4646:6:6"},"nodeType":"YulFunctionCall","src":"4646:15:6"},"nodeType":"YulExpressionStatement","src":"4646:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4681:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4684:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4674:6:6"},"nodeType":"YulFunctionCall","src":"4674:15:6"},"nodeType":"YulExpressionStatement","src":"4674:15:6"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4520:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4513:6:6"},"nodeType":"YulFunctionCall","src":"4513:9:6"},"nodeType":"YulIf","src":"4510:189:6"},{"nodeType":"YulAssignment","src":"4708:14:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4717:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4720:1:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4713:3:6"},"nodeType":"YulFunctionCall","src":"4713:9:6"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"4708:1:6"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4485:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4488:1:6","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"4494:1:6","type":""}],"src":"4454:274:6"},{"body":{"nodeType":"YulBlock","src":"4785:116:6","statements":[{"nodeType":"YulAssignment","src":"4795:20:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4810:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4813:1:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4806:3:6"},"nodeType":"YulFunctionCall","src":"4806:9:6"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"4795:7:6"}]},{"body":{"nodeType":"YulBlock","src":"4873:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4875:16:6"},"nodeType":"YulFunctionCall","src":"4875:18:6"},"nodeType":"YulExpressionStatement","src":"4875:18:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4844:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4837:6:6"},"nodeType":"YulFunctionCall","src":"4837:9:6"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4851:1:6"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"4858:7:6"},{"name":"x","nodeType":"YulIdentifier","src":"4867:1:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4854:3:6"},"nodeType":"YulFunctionCall","src":"4854:15:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4848:2:6"},"nodeType":"YulFunctionCall","src":"4848:22:6"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4834:2:6"},"nodeType":"YulFunctionCall","src":"4834:37:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4827:6:6"},"nodeType":"YulFunctionCall","src":"4827:45:6"},"nodeType":"YulIf","src":"4824:71:6"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4764:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4767:1:6","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"4773:7:6","type":""}],"src":"4733:168:6"},{"body":{"nodeType":"YulBlock","src":"4955:79:6","statements":[{"nodeType":"YulAssignment","src":"4965:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4977:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4980:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4973:3:6"},"nodeType":"YulFunctionCall","src":"4973:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"4965:4:6"}]},{"body":{"nodeType":"YulBlock","src":"5006:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5008:16:6"},"nodeType":"YulFunctionCall","src":"5008:18:6"},"nodeType":"YulExpressionStatement","src":"5008:18:6"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"4997:4:6"},{"name":"x","nodeType":"YulIdentifier","src":"5003:1:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4994:2:6"},"nodeType":"YulFunctionCall","src":"4994:11:6"},"nodeType":"YulIf","src":"4991:37:6"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4937:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4940:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"4946:4:6","type":""}],"src":"4906:128:6"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_array_uint256(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, 64)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        let srcEnd := add(offset, 64)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := offset\n        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, 0x20)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_bytes1t_bytes_memory_ptrt_bytes32t_uint256t_array$_t_uint256_$2_memory_ptrt_array$_t_uint256_$2_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xff00000000000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value1 := value\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := abi_decode_array_uint256(add(headStart, 160), dataEnd)\n        value6 := abi_decode_array_uint256(add(headStart, 224), dataEnd)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_bytes32__to_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, value0)\n        end := add(pos, 32)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        let _1 := add(pos, length)\n        mstore(_1, 0)\n        end := _1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x35 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xD5EFEC9 EQ PUSH2 0x3A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH2 0x48 CALLDATASIZE PUSH1 0x4 PUSH2 0x19C0 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP7 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP8 DUP10 PUSH1 0x20 DUP2 MLOAD DUP2 LT PUSH2 0x9A JUMPI PUSH2 0x9A PUSH2 0x1A95 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD AND PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0xF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFC93479200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x125 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x111 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x35B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x143 JUMPI PUSH2 0x143 PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x17F DUP9 DUP8 DUP4 MLOAD DUP5 PUSH1 0x0 PUSH2 0x484 JUMP JUMPDEST POP DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x191 SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x205 JUMPI PUSH1 0x40 MLOAD PUSH32 0xEBAB5D2900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP11 MLOAD PUSH1 0x20 PUSH2 0x215 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22D JUMPI PUSH2 0x22D PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x257 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x26A DUP12 PUSH1 0x0 DUP14 MLOAD DUP5 PUSH1 0x0 PUSH2 0x484 JUMP JUMPDEST POP PUSH2 0x2EB PUSH1 0x2 DUP11 PUSH1 0x40 MLOAD PUSH2 0x27E SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BE SWAP2 SWAP1 PUSH2 0x1B35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D0 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x20 DUP5 DUP16 MLOAD PUSH2 0x484 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x2 DUP3 PUSH1 0x40 MLOAD PUSH2 0x2FE SWAP2 SWAP1 PUSH2 0x1AC4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x31B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x33E SWAP2 SWAP1 PUSH2 0x1B35 JUMP JUMPDEST SWAP1 POP PUSH2 0x34B DUP2 DUP9 DUP9 PUSH2 0x512 JUMP JUMPDEST SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x0 SUB PUSH2 0x37A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x40 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BB4 PUSH1 0x40 SWAP2 CODECOPY SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x3 DUP6 MLOAD PUSH1 0x2 PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x3B5 SWAP2 SWAP1 PUSH2 0x1B4E JUMP JUMPDEST PUSH2 0x3C0 SWAP1 PUSH1 0x4 PUSH2 0x1B89 JUMP JUMPDEST PUSH2 0x3CA SWAP2 SWAP1 PUSH2 0x1BA0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E2 JUMPI PUSH2 0x3E2 PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x40C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x1 DUP3 ADD PUSH1 0x20 DUP3 ADD DUP6 DUP7 MLOAD DUP8 ADD JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x478 JUMPI PUSH1 0x3 DUP3 ADD SWAP2 POP DUP2 MLOAD PUSH1 0x3F DUP2 PUSH1 0x12 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0xC SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 PUSH1 0x6 SHR AND DUP6 ADD MLOAD DUP5 MSTORE8 PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH1 0x3F DUP2 AND DUP6 ADD MLOAD DUP5 MSTORE8 POP PUSH1 0x1 DUP4 ADD SWAP3 POP PUSH2 0x41D JUMP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x492 DUP4 DUP7 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 MLOAD LT ISZERO PUSH2 0x4A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4AF DUP8 PUSH1 0x20 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4BE DUP6 PUSH1 0x20 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 PUSH2 0x4CD DUP10 PUSH1 0x20 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x4D7 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x505 JUMPI DUP9 DUP3 ADD MLOAD DUP7 DUP3 ADD MSTORE PUSH2 0x4F1 PUSH1 0x20 DUP4 PUSH2 0x1B22 JUMP JUMPDEST SWAP2 POP PUSH2 0x4FE PUSH1 0x20 DUP3 PUSH2 0x1B22 JUMP JUMPDEST SWAP1 POP PUSH2 0x4C1 JUMP JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 ISZERO DUP1 PUSH2 0x544 JUMPI POP DUP3 MLOAD PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 GT ISZERO JUMPDEST DUP1 PUSH2 0x551 JUMPI POP PUSH1 0x20 DUP4 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0x580 JUMPI POP PUSH1 0x20 DUP4 ADD MLOAD PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 GT ISZERO JUMPDEST ISZERO PUSH2 0x58D JUMPI POP PUSH1 0x0 PUSH2 0x6A7 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x59E SWAP2 SWAP1 PUSH2 0x6AE JUMP JUMPDEST PUSH2 0x5AA JUMPI POP PUSH1 0x0 PUSH2 0x6A7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E6 DUP5 PUSH1 0x1 PUSH1 0x20 MUL ADD MLOAD PUSH2 0x5E1 SWAP1 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 PUSH2 0x1BA0 JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP3 DUP8 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP4 DUP8 PUSH1 0x0 PUSH1 0x20 MUL ADD MLOAD MULMOD DUP6 MLOAD PUSH1 0x20 DUP8 ADD MLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x656 SWAP2 SWAP1 DUP6 DUP6 PUSH2 0x8B0 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 DUP8 MLOAD PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 SUB DUP3 ADDMOD ISZERO SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 ISZERO DUP1 PUSH2 0x6DC JUMPI POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 EQ JUMPDEST DUP1 PUSH2 0x6E5 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x70F JUMPI POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ JUMPDEST ISZERO PUSH2 0x71C JUMPI POP PUSH1 0x0 PUSH2 0x821 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP5 MULMOD SWAP1 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC DUP8 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP8 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP11 MULMOD MULMOD ADDMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B DUP3 ADDMOD SWAP2 SWAP1 SWAP2 EQ SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x831 PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP4 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL PUSH2 0x8A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0xFF PUSH2 0x8BF PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP10 ISZERO DUP1 ISZERO PUSH2 0x8CE JUMPI POP DUP9 ISZERO JUMPDEST ISZERO PUSH2 0x8E3 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x13F6 JUMP JUMPDEST PUSH2 0x92F PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 DUP15 DUP15 PUSH2 0x13FE JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH1 0x1 DUP11 DUP6 SHR AND PUSH1 0x1 DUP11 DUP7 SHR AND PUSH1 0x1 SHL ADD JUMPDEST DUP1 PUSH2 0x96A JUMPI PUSH1 0x1 DUP6 SUB SWAP5 POP PUSH1 0x1 DUP12 DUP7 SHR AND PUSH1 0x1 DUP12 DUP8 SHR AND PUSH1 0x1 SHL ADD SWAP1 POP PUSH2 0x948 JUMP JUMPDEST POP PUSH1 0x1 DUP11 DUP6 SHR AND PUSH1 0x1 DUP11 DUP7 SHR AND PUSH1 0x1 SHL ADD SWAP7 POP PUSH1 0x1 DUP8 SUB PUSH2 0x9CC JUMPI PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 SWAP8 POP PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 SWAP5 POP JUMPDEST PUSH1 0x2 DUP8 SUB PUSH2 0x9DB JUMPI DUP12 SWAP8 POP DUP11 SWAP5 POP JUMPDEST PUSH1 0x3 DUP8 SUB PUSH2 0x9EA JUMPI DUP2 SWAP8 POP DUP1 SWAP5 POP JUMPDEST PUSH1 0x1 DUP5 SUB SWAP4 POP PUSH1 0x1 SWAP7 POP PUSH1 0x1 SWAP6 POP JUMPDEST DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF GT ISZERO PUSH2 0x134F JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 PUSH1 0x2 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP3 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP12 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP5 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP15 ADDMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP16 ADDMOD MULMOD PUSH1 0x3 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP6 MULMOD SWAP10 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP5 MULMOD SWAP11 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP5 MULMOD ADDMOD SWAP12 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP15 ADDMOD DUP3 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP8 MULMOD ADDMOD SWAP9 POP PUSH1 0x1 DUP15 DUP10 SHR AND PUSH1 0x1 DUP15 DUP11 SHR AND PUSH1 0x1 SHL ADD SWAP1 POP DUP1 PUSH2 0xCD5 JUMPI DUP9 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB SWAP9 POP POP POP POP POP PUSH2 0x1344 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0xD24 JUMPI PUSH32 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296 SWAP4 POP PUSH32 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5 SWAP3 POP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xD33 JUMPI DUP16 SWAP4 POP DUP15 SWAP3 POP JUMPDEST PUSH1 0x3 DUP2 SUB PUSH2 0xD42 JUMPI DUP6 SWAP4 POP DUP5 SWAP3 POP JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP10 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP7 MULMOD ADDMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP15 DUP9 MULMOD ADDMOD SWAP4 POP DUP1 PUSH2 0x113D JUMPI DUP4 PUSH2 0x113D JUMPI PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 PUSH1 0x2 MULMOD SWAP5 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP7 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP15 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP7 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 DUP16 ADDMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP14 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP16 ADDMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP4 MULMOD SWAP2 POP POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP15 ADDMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP15 ADDMOD SWAP5 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP7 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 PUSH1 0x3 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP12 DUP7 MULMOD SWAP11 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP13 DUP6 MULMOD SWAP12 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP6 MULMOD ADDMOD SWAP13 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP15 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP6 ADDMOD DUP4 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP12 DUP8 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP6 ADDMOD SWAP10 POP POP POP POP POP POP PUSH2 0x1344 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP6 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP4 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP15 MULMOD SWAP13 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP14 MULMOD SWAP12 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP16 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP8 DUP9 MULMOD ADDMOD ADDMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 DUP15 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP9 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP7 ADDMOD MULMOD ADDMOD SWAP12 POP POP POP POP DUP1 SWAP12 POP POP POP POP POP JUMPDEST PUSH1 0x1 DUP5 SUB SWAP4 POP PUSH2 0x9F9 JUMP JUMPDEST DUP7 PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP5 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP5 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x20 DUP4 PUSH1 0xC0 DUP6 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL PUSH2 0x13C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 MLOAD DUP10 MULMOD SWAP8 POP POP POP POP POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP7 PUSH2 0x1415 JUMPI DUP6 DUP6 SWAP4 POP SWAP4 POP POP POP PUSH2 0x1453 JUMP JUMPDEST DUP5 PUSH2 0x1427 JUMPI DUP6 DUP6 SWAP4 POP SWAP4 POP POP POP PUSH2 0x1453 JUMP JUMPDEST PUSH2 0x1436 DUP9 DUP9 PUSH1 0x1 DUP1 DUP11 DUP11 PUSH2 0x145C JUMP JUMPDEST SWAP3 SWAP11 POP SWAP1 SWAP9 POP SWAP3 POP SWAP1 POP PUSH2 0x144C DUP9 DUP9 DUP5 DUP5 PUSH2 0x1721 JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP9 PUSH1 0x0 SUB PUSH2 0x147B JUMPI POP DUP5 SWAP3 POP DUP4 SWAP2 POP PUSH1 0x1 SWAP1 POP DUP1 PUSH2 0x1714 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SWAP9 DUP10 SUB SWAP9 DUP10 DUP2 DUP10 DUP9 MULMOD ADDMOD SWAP5 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP11 DUP10 MULMOD ADDMOD SWAP6 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP8 MULMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP6 MULMOD SWAP3 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP10 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP9 MULMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP12 MULMOD SWAP8 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP6 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP11 MULMOD ADDMOD ADDMOD SWAP4 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 DUP12 MULMOD PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP8 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP9 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF SUB DUP14 ADDMOD MULMOD ADDMOD SWAP3 POP JUMPDEST SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x172F DUP5 PUSH2 0x17D6 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP8 MULMOD SWAP2 POP PUSH1 0x0 PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP8 MULMOD SWAP1 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP2 DUP3 MULMOD SWAP2 POP PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP10 MULMOD SWAP4 POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17E0 PUSH2 0x1858 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC0 DUP4 PUSH1 0x5 PUSH1 0x0 NOT STATICCALL PUSH2 0x8A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x18D1 JUMPI PUSH2 0x18D1 PUSH2 0x1876 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1917 JUMPI PUSH2 0x1917 PUSH2 0x1876 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1930 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1961 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1984 JUMPI PUSH2 0x1984 PUSH2 0x1876 JUMP JUMPDEST DUP1 PUSH1 0x40 MSTORE POP DUP1 PUSH1 0x40 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x199B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x19B5 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x199D JUMP JUMPDEST POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x19DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A00 DUP12 DUP4 DUP13 ADD PUSH2 0x18A5 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD SWAP2 POP PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND DUP3 EQ PUSH2 0x1A37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x1A4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A5A DUP11 DUP3 DUP12 ADD PUSH2 0x18A5 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH2 0x1A78 DUP10 PUSH1 0xA0 DUP11 ADD PUSH2 0x1950 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A87 DUP10 PUSH1 0xE0 DUP11 ADD PUSH2 0x1950 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1AE5 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x1ACB JUMP JUMPDEST POP PUSH1 0x0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x1AF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1B84 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x1AF3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x821 JUMPI PUSH2 0x821 PUSH2 0x1AF3 JUMP INVALID COINBASE TIMESTAMP NUMBER DIFFICULTY GASLIMIT CHAINID SELFBALANCE BASEFEE 0x49 0x4A 0x4B 0x4C 0x4D 0x4E 0x4F POP MLOAD MSTORE MSTORE8 SLOAD SSTORE JUMP JUMPI PC MSIZE GAS PUSH2 0x6263 PUSH5 0x6566676869 PUSH11 0x6B6C6D6E6F707172737475 PUSH23 0x7778797A303132333435363738392D5FA2646970667358 0x22 SLT KECCAK256 DUP15 SWAP2 0x1F 0xE MUL PUSH2 0x7650 CREATE RETURNDATASIZE 0xBB PUSH19 0xA782EA1E31D345CADFD774547C07B6571B0EA7 LOG2 PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"252:2764:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;275:1867;;;;;;:::i;:::-;;:::i;:::-;;;2937:14:6;;2930:22;2912:41;;2900:2;2885:18;275:1867:4;;;;;;;;567:4;759:25;692:92;;;717:25;693:17;711:2;693:21;;;;;;;;:::i;:::-;;;;;:49;:21;:49;692:92;675:178;;816:26;;;;;;;;;;;;;;675:178;937:30;970:75;1019:15;1002:33;;;;;;3282:19:6;;3326:2;3317:12;;3153:182;1002:33:4;;;;;;;;;;;;;970:18;:75::i;:::-;937:108;;1055:31;1118:16;1112:30;1089:63;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1089:63:4;;1055:97;;1162:168;1185:10;1209:25;1248:18;:25;1287:18;1319:1;1162:9;:168::i;:::-;;1452:18;1435:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;1425:47;;;;;;1390:16;1367:41;;;;;;;;:::i;:::-;;;;;;;;;;;;;1357:52;;;;;;:115;1340:194;;1504:19;;;;;;;;;;;;;;1340:194;1634:23;1670:17;:24;1697:2;1670:29;;;;:::i;:::-;1660:40;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1660:40:4;;1634:66;;1710:142;1733:17;1764:1;1779:17;:24;1817:10;1841:1;1710:9;:142::i;:::-;;1862:162;1902:18;1909:10;1902:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1885:36;;;;;;3282:19:6;;3326:2;3317:12;;3153:182;1885:36:4;;;;;;;;;;;;;1935:1;1950:2;1966:10;1990:17;:24;1862:9;:162::i;:::-;;2034:15;2052:18;2059:10;2052:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2034:36;;2087:48;2120:7;2129:2;2133:1;2087:32;:48::i;:::-;2080:55;275:1867;-1:-1:-1;;;;;;;;;;;;275:1867:4:o;521:3298:0:-;581:13;813:4;:11;828:1;813:16;809:31;;-1:-1:-1;;831:9:0;;;;;;;;;-1:-1:-1;831:9:0;;;521:3298::o;809:31::-;890:19;912:6;;;;;;;;;;;;;;;;;890:28;;1395:20;1459:1;1454;1435:4;:11;1449:1;1435:15;;;;:::i;:::-;1434:21;;;;:::i;:::-;1429:27;;:1;:27;:::i;:::-;:31;;;;:::i;:::-;1418:43;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1418:43:0;;1395:66;;1636:1;1629:5;1625:13;1737:2;1729:6;1725:15;1844:4;1895;1889:11;1883:4;1879:22;1807:1577;1928:6;1919:7;1916:19;1807:1577;;;2030:1;2021:7;2017:15;2006:26;;2068:7;2062:14;2752:4;2744:5;2740:2;2736:14;2732:25;2722:8;2718:40;2712:47;2681:9;2652:125;2822:1;2811:9;2807:17;2794:30;;2953:4;2945:5;2941:2;2937:14;2933:25;2923:8;2919:40;2913:47;2882:9;2853:125;3023:1;3012:9;3008:17;2995:30;;3153:4;3145:5;3142:1;3138:13;3134:24;3124:8;3120:39;3114:46;3083:9;3054:124;3223:1;3212:9;3208:17;3195:30;;3304:4;3297:5;3293:16;3283:8;3279:31;3273:38;3262:9;3254:58;;3357:1;3346:9;3342:17;3329:30;;1807:1577;;;-1:-1:-1;3806:6:0;;521:3298;-1:-1:-1;;;;;;521:3298:0:o;2275:739:4:-;2449:25;2486:14;2503:19;2513:9;2503:7;:19;:::i;:::-;2486:36;;2554:9;2540:3;:10;:23;;2532:32;;;;;;2619:6;2628:16;2633:11;2628:2;:16;:::i;:::-;2619:25;-1:-1:-1;2735:6:4;2744:14;2749:9;2744:2;:14;:::i;:::-;2735:23;;2768:220;2799:7;2780:16;2785:11;2780:2;:16;:::i;:::-;:26;;;;:::i;:::-;2775:1;:32;2768:220;;;2867:13;;;2861:20;2905:11;;;2898:24;2949:7;2954:2;2878:1;2949:7;:::i;:::-;;-1:-1:-1;2970:7:4;2975:2;2970:7;;:::i;:::-;;;2768:220;;;-1:-1:-1;3004:3:4;;2275:739;-1:-1:-1;;;;;;;2275:739:4:o;23199:703:1:-;23352:5;;23332:4;;23352:10;;:24;;-1:-1:-1;23366:5:1;;2121:66;-1:-1:-1;23366:10:1;23352:24;:38;;;-1:-1:-1;23380:5:1;;;;:10;23352:38;:48;;;-1:-1:-1;23392:5:1;;;;2121:66;-1:-1:-1;23392:8:1;23352:48;23348:91;;;-1:-1:-1;23423:5:1;23416:12;;23348:91;23487:4;;;23493;;;23471:27;;23487:4;23471:15;:27::i;:::-;23466:71;;-1:-1:-1;23521:5:1;23514:12;;23466:71;23550:9;23562:20;23576:2;23579:1;23576:5;;;;23574:7;;2121:66;23574:7;:::i;:::-;23562:11;:20::i;:::-;23550:32;-1:-1:-1;23601:13:1;2121:66;23637:4;23627:7;23615:30;23601:44;-1:-1:-1;23655:13:1;2121:66;23684:4;23677:2;23680:1;23677:5;;;;23670:22;23744:4;;;23750;;;23655:37;;-1:-1:-1;23702:7:1;;23723:51;;23744:4;23755:8;23655:37;23723:20;:51::i;:::-;23720:54;;23837:1;23831:2;23825:9;23823:1;23819:16;23816:2;23809:30;23876:7;;-1:-1:-1;;;;;23199:703:1;;;;;;:::o;8222:436::-;8286:4;8306:6;;;:16;;;1457:66;8316:1;:6;8306:16;:26;;;-1:-1:-1;8326:6:1;;8306:26;:36;;;;1457:66;8336:1;:6;8306:36;8302:79;;;-1:-1:-1;8365:5:1;8358:12;;8302:79;8414:8;1457:66;8435:1;8432;8425:15;8414:26;-1:-1:-1;8461:8:1;1457:66;;1597;8517:1;8510:15;1457:66;8503:1;1457:66;8496:1;8493;8486:15;8479:29;8472:57;8461:68;-1:-1:-1;1457:66:1;1742;8571:3;8564:17;8631:10;;;;;-1:-1:-1;;8222:436:1;;;;;:::o;2740:784::-;2795:14;2821:22;;:::i;:::-;2982:4;2973:7;2966:21;3027:4;3020;3011:7;3007:18;3000:32;3072:4;3065;3056:7;3052:18;3045:32;3176:1;3169:4;3160:7;3156:18;3149:29;3218:11;3211:4;3202:7;3198:18;3191:39;3270:1;3263:4;3254:7;3250:18;3243:29;3414:4;3405:7;3399:4;3390:7;3384:4;3380:1;3376:6;3365:54;3355:110;;3449:1;3446;3439:12;3355:110;3486:14;;2740:784;-1:-1:-1;;2740:784:1:o;9246:4884::-;9437:6;;;;9505:3;9515:16;;:::i;:::-;9538:7;;9601:11;;:26;;;;-1:-1:-1;9616:11:1;;9601:26;9598:39;;;9636:1;9629:8;;;;;;;;;;;9598:39;9659:23;1887:66;1986;9675:2;9679;9659:9;:23::i;:::-;9650:32;;;;;;;;9978:1;9968:8;9961:5;9957:20;9953:27;9948:1;9938:8;9931:5;9927:20;9923:27;9920:1;9916:35;9911:71;9897:236;9994:2;9897:236;;10030:1;10023:5;10019:13;10010:22;;10112:1;10102:8;10095:5;10091:20;10087:27;10082:1;10072:8;10065:5;10061:20;10057:27;10054:1;10050:35;10045:71;10041:75;;9897:236;;;9900:90;10212:1;10202:8;10195:5;10191:20;10187:27;10182:1;10172:8;10165:5;10161:20;10157:27;10154:1;10150:35;10145:71;10141:75;;10244:1;10241:2;10238:8;10235:48;;10259:2;10256:5;;10272:2;10269:5;;10235:48;10299:1;10296:2;10293:8;10290:47;;10314:2;10311:5;;10327:2;10324:5;;10290:47;10353:1;10350:2;10347:8;10344:50;;10369:2;10366:5;;10384:2;10380:6;;10344:50;10424:1;10418:5;10414:12;10407:19;;10437:1;10433:5;;10450:1;10445:6;;10465:2781;10488:5;10479:7;10475:19;10465:2781;;;10584:1;10581;10578;10571:15;10633:1;10630:2;10627;10620:15;10673:1;10670:2;10667:1;10660:15;10711:1;10708:2;10704;10697:16;10693:20;;10795:1;10791;10788;10785:2;10783:1;10776:14;10772:1;10768:2;10766:1;10762:9;10760:1;10753:21;10746:47;10743:1;10736:61;10847:1;10843:3;10840:2;10833:16;10828:21;;10888:1;10884:2;10880;10873:17;10869:21;;10972:1;10969;10966:2;10957:7;10950:21;10946:1;10943:2;10940;10933:15;10926:48;10923:51;;11089:1;11086;11082:2;11079:1;11075:10;11072:1;11065:23;11062:2;11055:36;11051:40;;11226:1;11223:2;11219:1;11216;11212:2;11205:16;11198:32;11194:36;;11410:1;11400:8;11393:5;11389:20;11385:27;11380:1;11370:8;11363:5;11359:20;11355:27;11352:1;11348:35;11343:71;11339:75;;11438:2;11428:84;;11459:1;11457;11453:8;11450:11;;11496:8;;;;;;11428:84;11548:1;11545:2;11542:8;11539:58;;11564:2;11560:6;;11578:2;11574:6;;11539:58;11613:1;11610:2;11607:8;11604:50;;11630:2;11626:6;;11644:2;11640:6;;11604:50;11670:1;11667:2;11664:8;11661:54;;11687:2;11683:6;;11703:2;11698:7;;11661:54;11832:1;11830;11827;11823:3;11819:2;11812:17;11805:29;11883:1;11880;11878;11874:8;11871:1;11868:2;11864;11857:16;11850:35;11846:39;-1:-1:-1;12059:2:1;12053:741;;12079:2;12073:713;;12118:1;12115;12112;12105:15;12101:19;;12164:1;12161:2;12158;12151:15;12147:19;;12201:1;12198:2;12195:1;12188:15;12184:19;;12251:1;12248:2;12244;12237:16;12285:1;12282:2;12280:1;12273:14;12268:19;;12318:1;12314:2;12312:1;12308:9;12306:1;12299:21;12294:26;;12345:1;12341:3;12338:2;12331:16;12327:20;;;12370:1;12367:2;12365:1;12358:14;12354:18;;12402:1;12398:2;12396:1;12392:9;12390:1;12383:21;12379:25;;12428:1;12425:2;12422;12415:15;12411:19;;12453:1;12450:2;12448:1;12441:14;12437:18;;12481:1;12477:3;12474:2;12467:16;12462:21;;12523:1;12519:2;12515;12508:17;12504:21;;12607:1;12604;12601:2;12592:7;12585:21;12581:1;12578:2;12575;12568:15;12561:48;12558:51;;12666:1;12663;12660;12657;12653:9;12649:2;12642:23;12639:2;12632:36;12628:40;;12731:1;12727;12724;12720:2;12713:16;12710:1;12706:24;12702:2;12695:40;12691:44;;12767:8;;;;;;;12073:713;12827:1;12823:2;12819;12812:17;12808:21;;12862:1;12859:2;12856;12849:15;12955:1;12952:2;12949;12942:15;12938:19;;12986:1;12982:3;12978;12971:17;12965:23;;13030:1;13026:2;13023:1;13016:16;13115:1;13111;13107:3;13098:7;13091:22;13086:1;13081:3;13079:1;13075:10;13071:1;13067:2;13064;13057:16;13050:39;13043:75;13039:79;;13193:1;13190;13186:3;13183:1;13176:16;13172:1;13168:2;13164:1;13160:2;13158:1;13154:9;13149:3;13142:24;13135:39;13128:67;13125:70;;;;;13211:2;13208:5;;11306:1916;;;;10465:2781;10517:1;10510:5;10506:13;10497:22;;10465:2781;;;13285:2;13279:4;13276:1;13272:12;13265:23;13509:4;13506:1;13499:15;13542:4;13535;13532:1;13528:12;13521:26;13575:4;13568;13565:1;13561:12;13554:26;13699:7;13692:4;13689:1;13685:12;13678:29;13735:1;13728:4;13725:1;13721:12;13714:23;13860:4;13857:1;13851:4;13848:1;13842:4;13838:1;13834:6;13823:42;13813:88;;13891:1;13888;13881:12;13813:88;14049:1;14046;14040:8;14038:1;14031:20;14028:23;;14115:8;;;;;;;9246:4884;;;;;;;:::o;8758:375::-;8874:4;;;;8075;8935:38;;8967:2;8970;8959:14;;;;;;;;8935:38;8075:4;8976:38;;9008:2;9011;9000:14;;;;;;;;8976:38;9048:30;9058:2;9062;9066:1;9068;9071:2;9075;9048:9;:30::i;:::-;9026:52;;-1:-1:-1;9026:52:1;;-1:-1:-1;9026:52:1;-1:-1:-1;9026:52:1;-1:-1:-1;9096:30:1;9026:52;;;;9096:11;:30::i;:::-;9089:37;;;;;;8758:375;;;;;;;;:::o;6339:872::-;6484:7;6493;6501;6509;6552:2;6556:1;6552:5;6549:45;;-1:-1:-1;6575:2:1;;-1:-1:-1;6578:2:1;;-1:-1:-1;6581:1:1;;-1:-1:-1;6581:1:1;6567:18;;6549:45;6629:1;6625:10;;;;;6629:1;6664:4;6660:2;6653:18;6646:31;6642:35;;6725:1;6721:2;6719:1;6715:9;6712:1;6708:3;6704:2;6697:17;6690:37;6686:41;;6755:1;6751:2;6747;6740:17;6736:21;;6791:1;6788:2;6785;6778:15;6774:19;;6830:1;6827:2;6823:3;6816:16;6812:20;;6876:1;6873:2;6868:4;6861:17;6856:22;;6925:1;6921:2;6917;6910:17;6905:22;;7020:1;7016;7012:3;7003:7;6996:22;6991:1;6987:2;6985:1;6981:9;6977:1;6973:2;6970;6963:16;6956:38;6949:74;6945:78;;7112:1;7109;7106:2;7102;7095:16;7091:1;7087:2;7083:1;7079:2;7077:1;7073:9;7068:3;7061:24;7054:39;7047:67;7043:71;;6339:872;;;;;;;;;;;;:::o;4857:328::-;4962:7;4971;4992:11;5006:16;5018:3;5006:11;:16::i;:::-;4992:30;-1:-1:-1;1457:66:1;5050:6;5048:1;5041:18;5038:21;-1:-1:-1;5074:6:1;1457:66;5092:6;5088:2;5081:20;5074:27;-1:-1:-1;1457:66:1;5132:1;5130;5123:13;5115:21;-1:-1:-1;1457:66:1;5163:6;5161:1;5154:18;5151:21;;4984:201;;4857:328;;;;;;;:::o;3627:763::-;3684:14;3710:22;;:::i;:::-;3860:4;3851:7;3844:21;3905:4;3898;3889:7;3885:18;3878:32;3950:4;3943;3934:7;3930:18;3923:32;4054:1;4047:4;4038:7;4034:18;4027:29;4096:7;4089:4;4080:7;4076:18;4069:35;4144:1;4137:4;4128:7;4124:18;4117:29;4288:4;4279:7;4273:4;4264:7;4258:4;4254:1;4250:6;4239:54;4229:110;;4323:1;4320;4313:12;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:184:6:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:777;245:5;298:3;291:4;283:6;279:17;275:27;265:55;;316:1;313;306:12;265:55;352:6;339:20;378:18;415:2;411;408:10;405:36;;;421:18;;:::i;:::-;555:2;549:9;617:4;609:13;;460:66;605:22;;;629:2;601:31;597:40;585:53;;;653:18;;;673:22;;;650:46;647:72;;;699:18;;:::i;:::-;739:10;735:2;728:22;774:2;766:6;759:18;820:3;813:4;808:2;800:6;796:15;792:26;789:35;786:55;;;837:1;834;827:12;786:55;901:2;894:4;886:6;882:17;875:4;867:6;863:17;850:54;948:1;941:4;936:2;928:6;924:15;920:26;913:37;968:6;959:15;;;;;;203:777;;;;:::o;985:646::-;1035:5;1088:3;1081:4;1073:6;1069:17;1065:27;1055:55;;1106:1;1103;1096:12;1055:55;1139:2;1133:9;1181:2;1173:6;1169:15;1250:6;1238:10;1235:22;1214:18;1202:10;1199:34;1196:62;1193:88;;;1261:18;;:::i;:::-;1301:10;1297:2;1290:22;;1332:6;1373:2;1365:6;1361:15;1399:3;1391:6;1388:15;1385:35;;;1416:1;1413;1406:12;1385:35;1440:6;1455:146;1471:6;1466:3;1463:15;1455:146;;;1539:17;;1527:30;;1586:4;1577:14;;;;1488;1455:146;;;-1:-1:-1;1619:6:6;;985:646;-1:-1:-1;;;;;985:646:6:o;1636:1123::-;1812:6;1820;1828;1836;1844;1852;1860;1913:3;1901:9;1892:7;1888:23;1884:33;1881:53;;;1930:1;1927;1920:12;1881:53;1970:9;1957:23;1999:18;2040:2;2032:6;2029:14;2026:34;;;2056:1;2053;2046:12;2026:34;2079:49;2120:7;2111:6;2100:9;2096:22;2079:49;:::i;:::-;2069:59;;2178:2;2167:9;2163:18;2150:32;2137:45;;2222:66;2215:5;2211:78;2204:5;2201:89;2191:117;;2304:1;2301;2294:12;2191:117;2327:5;;-1:-1:-1;2385:2:6;2370:18;;2357:32;;2401:16;;;2398:36;;;2430:1;2427;2420:12;2398:36;;2453:51;2496:7;2485:8;2474:9;2470:24;2453:51;:::i;:::-;2443:61;;;2551:2;2540:9;2536:18;2523:32;2513:42;;2602:3;2591:9;2587:19;2574:33;2564:43;;2626:54;2672:7;2666:3;2655:9;2651:19;2626:54;:::i;:::-;2616:64;;2699:54;2745:7;2739:3;2728:9;2724:19;2699:54;:::i;:::-;2689:64;;1636:1123;;;;;;;;;;:::o;2964:184::-;3016:77;3013:1;3006:88;3113:4;3110:1;3103:15;3137:4;3134:1;3127:15;3340:412;3469:3;3507:6;3501:13;3532:1;3542:129;3556:6;3553:1;3550:13;3542:129;;;3654:4;3638:14;;;3634:25;;3628:32;3615:11;;;3608:53;3571:12;3542:129;;;-1:-1:-1;3726:1:6;3690:16;;3715:13;;;-1:-1:-1;3690:16:6;3340:412;-1:-1:-1;3340:412:6:o;3757:184::-;3809:77;3806:1;3799:88;3906:4;3903:1;3896:15;3930:4;3927:1;3920:15;3946:125;4011:9;;;4032:10;;;4029:36;;;4045:18;;:::i;4076:184::-;4146:6;4199:2;4187:9;4178:7;4174:23;4170:32;4167:52;;;4215:1;4212;4205:12;4167:52;-1:-1:-1;4238:16:6;;4076:184;-1:-1:-1;4076:184:6:o;4454:274::-;4494:1;4520;4510:189;;4555:77;4552:1;4545:88;4656:4;4653:1;4646:15;4684:4;4681:1;4674:15;4510:189;-1:-1:-1;4713:9:6;;4454:274::o;4733:168::-;4806:9;;;4837;;4854:15;;;4848:22;;4834:37;4824:71;;4875:18;;:::i;4906:128::-;4973:9;;;4994:11;;;4991:37;;;5008:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1441800","executionCost":"1537","totalCost":"1443337"},"external":{"checkSignature(bytes,bytes1,bytes,bytes32,uint256,uint256[2],uint256[2])":"infinite"},"internal":{"copyBytes(bytes memory,uint256,uint256,bytes memory,uint256)":"infinite"}},"methodIdentifiers":{"checkSignature(bytes,bytes1,bytes,bytes32,uint256,uint256[2],uint256[2])":"0d5efec9"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAuthenticatorData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClientData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"authenticatorData\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"authenticatorDataFlagMask\",\"type\":\"bytes1\"},{\"internalType\":\"bytes\",\"name\":\"clientData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"clientChallenge\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"clientChallengeDataOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"rs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Q\",\"type\":\"uint256[2]\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Webauthn.sol\":\"Webauthn\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/Base64URL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// from OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64URL {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode32(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        //string memory result = new string(4 * ((data.length + 2) / 3));\\n        string memory result = new string(4 * ((data.length + 2) / 3) - 1);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(12, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(\\n                    resultPtr,\\n                    mload(add(tablePtr, and(shr(6, input), 0x3F)))\\n                )\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            /*\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n*/\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xcf1ca3e3e85d1b22dec76240ef3b23f9f6416d76eb7483b80a7d0a8a8e9aa664\",\"license\":\"MIT\"},\"contracts/FCL/FCL_elliptic.sol\":{\"content\":\"//********************************************************************************************/\\n//  ___           _       ___               _         _    _ _    \\n// | __| _ ___ __| |_    / __|_ _ _  _ _ __| |_ ___  | |  (_) |__ \\n// | _| '_/ -_|_-< ' \\\\  | (__| '_| || | '_ \\\\  _/ _ \\\\ | |__| | '_ \\\\\\n// |_||_| \\\\___/__/_||_|  \\\\___|_|  \\\\_, | .__/\\\\__\\\\___/ |____|_|_.__/\\n//                                |__/|_|                        \\n///* Copyright (C) 2022 - Renaud Dubois - This file is part of FCL (Fresh CryptoLib) project \\n///* License: This software is licensed under MIT License \\t \\n///* This Code may be reused including license and copyright notice. \\t \\n///* See LICENSE file at the root folder of the project.\\t\\t\\t\\t \\n///* FILE: FCL_elliptic.sol\\t\\t\\t\\t\\t\\t         \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n///* DESCRIPTION: modified XYZZ system coordinates for EVM elliptic point multiplication\\n///*  optimization\\n///* \\n//**************************************************************************************/\\n//* WARNING: this code SHALL not be used for non prime order curves for security reasons.\\n// Code is optimized for a=-3 only curves with prime order, constant like -1, -2 shall be replaced\\n// if ever used for other curve than sec256R1\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\nlibrary FCL_Elliptic_ZZ {\\n    // Set parameters for curve sec256r1.\\n    \\n    //curve prime field modulus\\n    uint constant p = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    //short weierstrass first coefficient\\n    uint constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    //short weierstrass second coefficient    \\n    uint constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    //generating point affine coordinates    \\n    uint constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    //curve order (number of points)\\n    uint constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;    \\n    /* -2 mod p constant, used to speed up inversion and doubling (avoid negation)*/\\n    uint constant minus_2 = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFD;\\n    /* -2 mod n constant, used to speed up inversion*/\\n    uint constant minus_2modn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC63254F; \\n       \\n    uint constant minus_1=      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n    \\n    /**\\n    /* inversion mod n via a^(n-2), use of precompiled using little Fermat theorem*/\\n    function FCL_nModInv(uint256 u) internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {\\n            \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2modn)\\n            mstore(add(pointer, 0xa0), n)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n       \\n    }\\n     /**\\n    /* @dev inversion mod nusing little Fermat theorem via a^(n-2), use of precompiled*/\\n    function FCL_pModInv(uint256 u)   internal view returns (uint256 result) {\\n        uint[6] memory pointer;\\n        assembly {  \\n            // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n            mstore(pointer, 0x20)\\n            mstore(add(pointer, 0x20), 0x20)\\n            mstore(add(pointer, 0x40), 0x20)\\n            // Define variables base, exponent and modulus\\n            mstore(add(pointer, 0x60), u)\\n            mstore(add(pointer, 0x80), minus_2)\\n            mstore(add(pointer, 0xa0), p)\\n          \\n            // Call the precompiled contract 0x05 = ModExp\\n            if iszero(staticcall(not(0), 0x05, pointer, 0xc0, pointer, 0x20)) {\\n                revert(0, 0)\\n            }\\n            result:=mload(pointer)\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from affine rep to XYZZ rep*/\\n    function ecAff_SetZZ(\\n        uint x0,\\n        uint y0\\n    ) internal pure returns (uint[4] memory P) {\\n        unchecked {\\n            P[2] = 1; //ZZ\\n            P[3] = 1; //ZZZ\\n            P[0] = x0;\\n            P[1] = y0;\\n        }\\n    }\\n    \\n    /**\\n    /* @dev Convert from XYZZ rep to affine rep*/ \\n    /*    https://hyperelliptic.org/EFD/g1p/auto-shortw-xyzz-3.html#addition-add-2008-s*/\\n    function ecZZ_SetAff( uint x,\\n        uint y,\\n        uint zz,\\n        uint zzz) internal view  returns (uint x1, uint y1)\\n    {\\n      uint zzzInv = FCL_pModInv(zzz); //1/zzz\\n      y1=mulmod(y,zzzInv,p);//Y/zzz\\n      uint b=mulmod(zz, zzzInv,p); //1/z\\n      zzzInv= mulmod(b,b,p); //1/zz\\n      x1=mulmod(x,zzzInv,p);//X/zz\\n    }\\n    \\n \\n    \\n    /**\\n    /* @dev Sutherland2008 doubling*/\\n    /* The \\\"dbl-2008-s-1\\\" doubling formulas */\\n    \\n    function ecZZ_Dbl(\\n    \\tuint x,\\n        uint y,\\n        uint zz,\\n        uint zzz\\n    ) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n    {\\n     unchecked{\\n     assembly{\\n      P0:=mulmod(2, y, p) //U = 2*Y1\\n      P2:=mulmod(P0,P0,p)  // V=U^2\\n      P3:=mulmod(x, P2,p)// S = X1*V\\n      P1:=mulmod(P0, P2,p) // W=UV\\n      P2:=mulmod(P2, zz, p) //zz3=V*ZZ1\\n      zz:=mulmod(3, mulmod(addmod(x,sub(p,zz),p), addmod(x,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      P0:=addmod(mulmod(zz,zz,p), mulmod(minus_2, P3,p),p) //X3=M^2-2S\\n      x:=mulmod(zz,addmod(P3, sub(p,P0),p),p)//M(S-X3)\\n      P3:=mulmod(P1,zzz,p)//zzz3=W*zzz1\\n      P1:=addmod(x, sub(p, mulmod(P1, y,p)),p )//Y3= M(S-X3)-W*Y1\\n      }\\n     }\\n     return (P0, P1, P2, P3);\\n    }\\n    \\n     /**\\n     * @dev Sutherland2008 add a ZZ point with a normalized point and greedy formulae\\n     * warning: assume that P1(x1,y1)!=P2(x2,y2), true in multiplication loop with prime order (cofactor 1)\\n     */\\n     \\n    //tbd: return -x1 and -Y1 in double to avoid two substractions\\n    function ecZZ_AddN(\\n    \\tuint x1,\\n        uint y1,\\n        uint zz1,\\n        uint zzz1,\\n        uint x2,\\n        uint y2) internal pure returns (uint P0, uint P1,uint P2,uint P3)\\n     {\\n       unchecked{\\n      if(y1==0){\\n       return (x2,y2,1,1);\\n      }\\n  \\n       assembly{\\n      y1:=sub(p, y1)\\n      y2:=addmod(mulmod(y2, zzz1,p),y1,p)  \\n      x2:=addmod(mulmod(x2, zz1,p),sub(p,x1),p)  \\n      P0:=mulmod(x2, x2, p)//PP = P^2\\n      P1:=mulmod(P0,x2,p)//PPP = P*PP\\n      P2:=mulmod(zz1,P0,p) ////ZZ3 = ZZ1*PP\\n      P3:= mulmod(zzz1,P1,p) ////ZZZ3 = ZZZ1*PPP\\n      zz1:=mulmod(x1, P0, p)//Q = X1*PP\\n      P0:=addmod(addmod(mulmod(y2,y2, p), sub(p,P1),p ), mulmod(minus_2, zz1,p) ,p )//R^2-PPP-2*Q\\n      P1:=addmod(mulmod(addmod(zz1, sub(p,P0),p), y2, p), mulmod(y1, P1,p),p)//R*(Q-X3)\\n     }\\n    //end assembly\\n      }//end unchecked\\n      return (P0, P1, P2, P3);\\n     }\\n       \\n     /**\\n     * @dev Return the zero curve in XYZZ coordinates.\\n     */\\n    function ecZZ_SetZero() internal pure returns (uint x, uint y, uint zz, uint zzz) {\\n        return (0, 0, 0, 0);\\n    }\\n     /**\\n     * @dev Check if point is the neutral of the curve\\n     */\\n    function ecZZ_IsZero (uint x0, uint y0, uint zz0, uint zzz0) internal pure returns (bool)\\n    {\\n     if ( (y0 == 0)  ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n    /**\\n     * @dev Return the zero curve in affine coordinates. Compatible with the double formulae (no special case)\\n     */\\n    function ecAff_SetZero() internal pure returns (uint x, uint y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve in affine rep.\\n     */\\n   function ecAff_IsZero(uint x, uint y) internal pure returns (bool flag) {\\n        return (y==0);\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve (reject Neutral that is indeed on the curve).\\n     */\\n    function ecAff_isOnCurve(uint x, uint y) internal pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n        unchecked {\\n            uint LHS = mulmod(y, y, p); // y^2\\n            uint RHS = addmod(mulmod(mulmod(x, x, p), x, p), mulmod(x, a, p), p); // x^3+ax\\n                 RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n           \\n            return LHS == RHS;\\n        }\\n    }\\n    \\n\\n      /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n     \\n    function ecAff_add(\\n        uint x0,\\n        uint y0,\\n        uint x1,\\n        uint y1\\n    ) internal view returns (uint, uint) {\\n        uint zz0;\\n        uint zzz0;\\n        \\n\\tif(ecAff_IsZero(x0,y0)) return (x1,y1);\\n\\tif(ecAff_IsZero(x1,y1)) return (x1,y1);\\n\\t\\n        (x0, y0, zz0, zzz0) = ecZZ_AddN(x0, y0, 1,1, x1, y1);\\n\\n        return ecZZ_SetAff(x0, y0, zz0, zzz0);\\n    }\\n\\n     /**\\n     * @dev Computation of uG+vQ using Strauss-Shamir's trick, G basepoint, Q public key\\n     */\\n     function ecZZ_mulmuladd_S_asm(\\n        uint Q0, uint Q1,// Point G and Q stored in one memory for stack optimization\\n        uint scalar_u,\\n        uint scalar_v\\n    ) internal view returns (uint X) {\\n     uint zz;\\n     uint zzz;\\n     uint Y;\\n     uint index=255;\\n     uint[6] memory T;\\n     uint H0;\\n     uint H1;   \\n     \\n     unchecked {\\n     \\n     if(scalar_u==0 && scalar_v==0) return 0;\\n     \\n     (H0,H1 )=ecAff_add(gx,gy,Q0, Q1);//will not work if Q=P, obvious forbidden private key\\n   \\n   /*\\n     while( ( ((scalar_u>>index)&1)+2*((scalar_v>>index)&1) ) ==0){\\n      index=index-1; \\n     }\\n     */\\n         \\n      assembly{\\n      \\n     \\n      for{  let T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      } eq(T4,0) {\\n        index := sub(index, 1)\\n        T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      }\\n      {}\\n       zz:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n           \\n      if eq(zz,1) {\\n      \\tX:=gx\\n      \\tY:=gy\\n      \\t}\\n      if eq(zz,2) {\\n       X:=Q0\\n      \\tY:=Q1\\n      }\\n      if eq(zz,3) {\\n      \\t X:=H0\\n      \\t Y:= H1\\n      }\\n     \\n      index:=sub(index,1)\\n      zz:=1\\n      zzz:=1\\n      \\n      for {   } gt( minus_1, index) { index := sub(index, 1) } \\n      {\\n      // inlined EcZZ_Dbl\\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n      \\n     { \\n      //value of dibit\\t\\n      T4:=add( shl(1, and(shr(index, scalar_v),1)), and(shr(index, scalar_u),1) )\\n      \\n      if iszero(T4){\\n       Y:=sub(p,Y)//restore the -Y inversion \\n       continue\\n      }// if T4!=0\\n        \\n      if eq(T4,1) {\\n      \\tT1:=gx\\n      \\tT2:=gy\\n      \\t\\n      \\t}\\n      if eq(T4,2) {\\n        T1:=Q0\\n      \\tT2:=Q1\\n      }\\n      if eq(T4,3) {\\n      \\t T1:=H0\\n      \\t T2:= H1\\n      \\t }\\n      \\t \\t \\n       // inlined EcZZ_AddN\\n      //T3:=sub(p, Y)\\n      //T3:=Y\\n      let y2:=addmod(mulmod(T2, zzz,p),Y,p)  //R\\n      T2:=addmod(mulmod(T1, zz,p),sub(p,X),p)  //P\\n      \\n      //special extremely rare case accumulator where EcAdd is replaced by EcDbl, no need to optimize this\\n      //todo : construct edge vector case\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       \\n       T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      \\n      continue  \\n       }\\n      }\\n      \\n      T4:=mulmod(T2, T2, p)//PP\\n      let TT1:=mulmod(T4,T2,p)//PPP, this one could be spared, but adding this register spare gas\\n      zz:=mulmod(zz,T4,p) \\n      zzz:= mulmod(zzz,TT1,p) //zz3=V*ZZ1\\n      let TT2:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,TT1),p ), mulmod(minus_2, TT2,p) ,p )\\n      Y:=addmod(mulmod(addmod(TT2, sub(p,T4),p), y2, p), mulmod(Y, TT1,p),p)\\n     \\n      X:=T4\\n       }\\n          \\n           }//end loop\\n        mstore(add(T, 0x60),zz)\\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(staticcall(not(0), 0x05, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n       \\n      //Y:=mulmod(Y,zzz,p)//Y/zzz\\n      //zz :=mulmod(zz, mload(T),p) //1/z\\n      //zz:= mulmod(zz,zz,p) //1/zz\\n      X:=mulmod(X,mload(T),p)//X/zz\\n      } //end assembly\\n     }//end unchecked\\n     \\n      return X;\\n    }\\n    \\n       \\n      //8 dimensions Shamir's trick, using precomputations stored in Shamir8,  stored as Bytecode of an external\\n      //contract at given address dataPointer\\n      //(thx to Lakhdar https://github.com/Kelvyne for EVM storage explanations and tricks)\\n      // the external tool to generate tables from public key is in the /sage directory\\n    function ecZZ_mulmuladd_S8_extcode(uint scalar_u, uint scalar_v, address dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n    \\n      unchecked{ \\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      extcodecopy(dataPointer, T, mload(T), 64)\\n      \\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\t{\\n      let TT1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(TT1,TT1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      let T1:=mulmod(TT1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      let T5:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n      \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T5,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      }\\n      {\\n      let T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      let index2:=sub(index, 64)\\n      let T3:=add(T4, add( shl(12, and(shr(index2, scalar_v),1)), shl(8, and(shr(index2, scalar_u),1)) ))\\n      let index3:=sub(index2, 64)\\n      let T2:=add(T3,add( shl(11, and(shr(index3, scalar_v),1)), shl(7, and(shr(index3, scalar_u),1)) ))\\n      index:=sub(index3, 64)\\n      let T1:=add(T2,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      \\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T1){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n       extcodecopy(dataPointer, T,T1, 64)\\n     }\\n     \\n     {\\n     \\n         /* Access to precomputed table using extcodecopy hack */\\n          \\n      // inlined EcZZ_AddN\\n      \\n      \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      let T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      \\n      //special case ecAdd(P,P)=EcDbl\\n      if eq(y2,0){\\n       if eq(T2,0){\\n       let    T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n       T2:=mulmod(T1,T1,p)  // V=U^2\\n       let T3:=mulmod(X, T2,p)// S = X1*V\\n      \\n      let TT1:=mulmod(T1, T2,p) // W=UV\\n      y2:= addmod(X,zz,p)\\n      TT1:=addmod(X,sub(p,zz),p)\\n      y2:=mulmod(y2,TT1,p)\\n      T2:=addmod(X,zz,p)\\n      T1:=addmod(X,sub(p,zz),p)\\n      T2:=mulmod(T1,T2,p)\\n      let T4:=mulmod(3,T2,p)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n       zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      \\n      Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n         continue\\n       }\\n      }\\n      \\n      let T4:=mulmod(T2, T2, p)\\n      let T1:=mulmod(T4,T2,p)//\\n       zz:=mulmod(zz,T4,p) //zzz3=V*ZZ1\\n      zzz:= mulmod(zzz,T1,p) // W=UV/\\n      let zz1:=mulmod(X, T4, p)\\n      X:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,X),p), y2, p), mulmod(Y, T1,p),p)\\n      \\n    \\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n   \\n     \\n      // improving the extcodecopy trick : append array at end of contract\\n    function ecZZ_mulmuladd_S8_hackmem(uint scalar_u, uint scalar_v, uint dataPointer) \\n    internal  returns(uint X/*, uint Y*/)\\n    {\\n      uint zz; // third and  coordinates of the point\\n     \\n      uint[6] memory T;\\n      zz=256;//start index\\n      \\n      unchecked{ \\n      \\n      while(T[0]==0)\\n      {\\n      zz=zz-1;\\n      //tbd case of msb octobit is null\\n      T[0]=64*(128*((scalar_v>>zz)&1)+64*((scalar_v>>(zz-64))&1)+\\n           32*((scalar_v>>(zz-128))&1)+16*((scalar_v>>(zz-192))&1)+\\n               8*((scalar_u>>zz)&1)+4*((scalar_u>>(zz-64))&1)+2*((scalar_u>>(zz-128))&1)+((scalar_u>>(zz-192))&1));\\n      }\\n     assembly{\\n   \\n      codecopy( T, add(mload(T), dataPointer), 64)\\n      X:= mload(T)\\n      let Y:= mload(add(T,32))\\n      let zzz:=1\\n      zz:=1\\n     \\n      //loop over 1/4 of scalars thx to Shamir's trick over 8 points\\n      for { let index := 254 } gt(index, 191) { index := add(index, 191) } \\n      { \\n   \\n      let T1:=mulmod(2, Y, p) //U = 2*Y1, y free\\n      let T2:=mulmod(T1,T1,p)  // V=U^2\\n      let T3:=mulmod(X, T2,p)// S = X1*V\\n      T1:=mulmod(T1, T2,p) // W=UV\\n      let T4:=mulmod(3, mulmod(addmod(X,sub(p,zz),p), addmod(X,zz,p),p) ,p) //M=3*(X1-ZZ1)*(X1+ZZ1)\\n      zzz:=mulmod(T1,zzz,p)//zzz3=W*zzz1\\n      zz:=mulmod(T2, zz, p) //zz3=V*ZZ1, V free\\n     \\n      X:=addmod(mulmod(T4,T4,p), mulmod(minus_2, T3,p),p) //X3=M^2-2S\\n      //T2:=mulmod(T4,addmod(T3, sub(p, X),p),p)//M(S-X3)\\n      T2:=mulmod(T4,addmod(X, sub(p, T3),p),p)//-M(S-X3)=M(X3-S)\\n     \\n      //Y:= addmod(T2, sub(p, mulmod(T1, Y ,p)),p  )//Y3= M(S-X3)-W*Y1\\n      Y:= addmod(mulmod(T1, Y ,p), T2,p  )//-Y3= W*Y1-M(S-X3), we replace Y by -Y to avoid a sub in ecAdd\\n       \\n      /* compute element to access in precomputed table */\\n      \\n      T4:= add( shl(13, and(shr(index, scalar_v),1)), shl(9, and(shr(index, scalar_u),1)) )\\n      index:=sub(index, 64)\\n      T4:=add(T4, add( shl(12, and(shr(index, scalar_v),1)), shl(8, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(11, and(shr(index, scalar_v),1)), shl(7, and(shr(index, scalar_u),1)) ))\\n      index:=sub(index, 64)\\n      T4:=add(T4,add( shl(10, and(shr(index, scalar_v),1)), shl(6, and(shr(index, scalar_u),1)) ))\\n      //index:=add(index,192), restore index, interleaved with loop\\n      \\n      //tbd: check validity of formulae with (0,1) to remove conditional jump\\n         if iszero(T4){\\n           Y:=sub(p, Y)\\n    \\n         continue\\n         }\\n     {\\n         /* Access to precomputed table using extcodecopy hack */\\n      codecopy( T, add(T4, dataPointer), 64)\\n          \\n      // inlined EcZZ_AddN\\n      \\n     \\n      let y2:=addmod(mulmod(mload(add(T,32)), zzz,p),Y,p)  \\n      T2:=addmod(mulmod(mload(T), zz,p),sub(p,X),p)  \\n      T4:=mulmod(T2, T2, p)\\n      T1:=mulmod(T4,T2,p)\\n      T2:=mulmod(zz,T4,p) // W=UV\\n      zzz:= mulmod(zzz,T1,p) //zz3=V*ZZ1\\n      let zz1:=mulmod(X, T4, p)\\n      T4:=addmod(addmod(mulmod(y2,y2, p), sub(p,T1),p ), mulmod(minus_2, zz1,p) ,p )\\n      Y:=addmod(mulmod(addmod(zz1, sub(p,T4),p), y2, p), mulmod(Y, T1,p),p)\\n      zz:=T2\\n      X:=T4\\n      }\\n      \\n     }//end loop\\n      mstore(add(T, 0x60),zz)\\n        \\n      //(X,Y)=ecZZ_SetAff(X,Y,zz, zzz);\\n      //T[0] = inverseModp_Hard(T[0], p); //1/zzz, inline modular inversion using precompile:\\n     // Define length of base, exponent and modulus. 0x20 == 32 bytes\\n      mstore(T, 0x20)\\n      mstore(add(T, 0x20), 0x20)\\n      mstore(add(T, 0x40), 0x20)\\n      // Define variables base, exponent and modulus\\n      //mstore(add(pointer, 0x60), u)\\n      mstore(add(T, 0x80), minus_2)\\n      mstore(add(T, 0xa0), p)\\n               \\n      // Call the precompiled contract 0x05 = ModExp\\n      if iszero(call(not(0), 0x05, 0, T, 0xc0, T, 0x20)) {\\n            revert(0, 0)\\n      }\\n      \\n      zz:=mload(T)\\n      X:=mulmod(X,zz,p)//X/zz\\n       }       \\n      }//end unchecked\\n    }\\n\\n    function ecdsa_verify_mem(\\n        bytes32 message,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) internal view returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,mload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n                \\n    /**\\n     * @dev ECDSA verification, given , signature, and public key.\\n     */\\n    function ecdsa_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint[2] calldata Q\\n    ) internal  returns (bool) {\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0||rs[1]>=n) {\\n            return false;\\n        }\\n        \\n        \\n        if (!ecAff_isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n  \\t\\n        uint sInv = FCL_nModInv(n-rs[1]);\\n        \\n        uint scalar_u=mulmod(uint(message), sInv, n);\\n        uint scalar_v= mulmod(rs[0], sInv, n);\\n        uint x1;\\n\\t\\n       x1=ecZZ_mulmuladd_S_asm(Q[0], Q[1],scalar_u, scalar_v);\\n       \\t\\n       \\t\\n        assembly{\\n\\t x1:=addmod(x1,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t//return true; \\t\\n        return x1 == 0;\\n        \\n       }\\n     \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q stored in contract at address Shamir8\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_verify(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        address Shamir8\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n       uint sInv =FCL_nModInv(rs[1]);\\n       //uint sInv =2;\\n       \\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_extcode(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), Shamir8);\\n      \\n\\tassembly{\\n\\t\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n\\t\\n\\t \\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n        \\n        \\n      /**\\n      * @dev ECDSA verification using a precomputed table of multiples of P and Q appended at end of contract at address endcontract\\n        generation of contract bytecode for precomputations is done using sagemath code \\n        (see sage directory, WebAuthn_precompute.sage)\\n      */\\n        \\n      function ecdsa_precomputed_hackmem(\\n        bytes32 message,\\n        uint[2] calldata rs,\\n        uint256 endcontract\\n    ) internal  returns (bool) {\\n     if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            return false;\\n        }\\n        /* Q is pushed via bytecode assumed to be correct\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }*/\\n        \\n        uint sInv =FCL_nModInv(rs[1]);\\n     \\tuint X;\\n         \\n       //Shamir 8 dimensions\\t\\n        X=ecZZ_mulmuladd_S8_hackmem(mulmod(uint(message), sInv, n), mulmod(rs[0], sInv, n), endcontract);\\n      \\n\\tassembly{\\n\\t X:=addmod(X,sub(n,calldataload(rs)), n)\\n\\t}\\n        return X == 0;\\n        \\n        }//end  ecdsa_precomputed_verify()\\n}//EOF\\n\\n\\n\",\"keccak256\":\"0xff4afff0bd9034e0de7df18b225e540636313280237c828428103030093f318a\",\"license\":\"MIT\"},\"contracts/Webauthn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Base64URL} from \\\"./Base64URL.sol\\\";\\nimport {FCL_Elliptic_ZZ} from \\\"./FCL/FCL_elliptic.sol\\\";\\n\\nerror InvalidAuthenticatorData();\\nerror InvalidClientData();\\nerror InvalidSignature();\\n\\nlibrary Webauthn {\\n    function checkSignature(\\n        bytes memory authenticatorData,\\n        bytes1 authenticatorDataFlagMask,\\n        bytes memory clientData,\\n        bytes32 clientChallenge,\\n        uint clientChallengeDataOffset,\\n        uint[2] memory rs,\\n        uint[2] memory Q\\n    ) public view returns (bool) {\\n        // Let the caller check if User Presence (0x01) or User Verification (0x04) are set\\n        if (\\n            (authenticatorData[32] & authenticatorDataFlagMask) !=\\n            authenticatorDataFlagMask\\n        ) {\\n            revert InvalidAuthenticatorData();\\n        }\\n        // Verify that clientData commits to the expected client challenge\\n        string memory challengeEncoded = Base64URL.encode32(\\n            abi.encodePacked(clientChallenge)\\n        );\\n        bytes memory challengeExtracted = new bytes(\\n            bytes(challengeEncoded).length\\n        );\\n        copyBytes(\\n            clientData,\\n            clientChallengeDataOffset,\\n            challengeExtracted.length,\\n            challengeExtracted,\\n            0\\n        );\\n        if (\\n            keccak256(abi.encodePacked(bytes(challengeEncoded))) !=\\n            keccak256(abi.encodePacked(challengeExtracted))\\n        ) {\\n            revert InvalidClientData();\\n        }      \\n        // Verify the signature over sha256(authenticatorData || sha256(clientData))\\n        bytes memory verifyData = new bytes(authenticatorData.length + 32);\\n        copyBytes(\\n            authenticatorData,\\n            0,\\n            authenticatorData.length,\\n            verifyData,\\n            0\\n        );\\n        copyBytes(\\n            abi.encodePacked(sha256(clientData)),\\n            0,\\n            32,\\n            verifyData,\\n            authenticatorData.length\\n        );\\n        bytes32 message = sha256(verifyData);\\n        return FCL_Elliptic_ZZ.ecdsa_verify_mem(message, rs, Q);\\n    }\\n\\n    /*\\n    The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n  */\\n    function copyBytes(\\n        bytes memory _from,\\n        uint _fromOffset,\\n        uint _length,\\n        bytes memory _to,\\n        uint _toOffset\\n    ) internal pure returns (bytes memory _copiedBytes) {\\n        uint minLength = _length + _toOffset;\\n        require(_to.length >= minLength); // Buffer too small. Should be a better way?\\n        uint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n        uint j = 32 + _toOffset;\\n        while (i < (32 + _fromOffset + _length)) {\\n            assembly {\\n                let tmp := mload(add(_from, i))\\n                mstore(add(_to, j), tmp)\\n            }\\n            i += 32;\\n            j += 32;\\n        }\\n        return _to;\\n    }\\n}\\n\",\"keccak256\":\"0x2a7664cb3b6cadd5ae500c6c9b06635de16e1fff5e504cccbd5952efae657683\",\"license\":\"Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"solady/src/utils/LibClone.sol":{"LibClone":{"abi":[{"inputs":[],"name":"DeploymentFailed","type":"error"},{"inputs":[],"name":"SaltDoesNotStartWithCaller","type":"error"}],"devdoc":{"author":"Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)Minimal proxy by 0age (https://github.com/0age)Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)","details":"Minimal proxy: Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime, it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern, which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.Minimal proxy (PUSH0 variant): This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai. It is optimized first for minimal runtime gas, then for minimal bytecode. The PUSH0 clone functions are intentionally postfixed with a jarring \"_PUSH0\" as many EVM chains may not support the PUSH0 opcode in the early months after Shanghai. Please use with caution.Clones with immutable args (CWIA): The implementation of CWIA here implements a `receive()` method that emits the `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata, enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards composability. The minimal proxy implementation does not offer this feature.","errors":{"DeploymentFailed()":[{"details":"Unable to deploy the clone."}],"SaltDoesNotStartWithCaller()":[{"details":"The salt must start with either the zero address or the caller."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085183991db7baf9a8c472ed938b65ece7704c3e464fcd3ed28a602be2f6404a664736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 XOR CODECOPY SWAP2 0xDB PUSH28 0xAF9A8C472ED938B65ECE7704C3E464FCD3ED28A602BE2F6404A66473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"1500:36285:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1500:36285:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085183991db7baf9a8c472ed938b65ece7704c3e464fcd3ed28a602be2f6404a664736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 XOR CODECOPY SWAP2 0xDB PUSH28 0xAF9A8C472ED938B65ECE7704C3E464FCD3ED28A602BE2F6404A66473 PUSH16 0x6C634300081100330000000000000000 ","sourceMap":"1500:36285:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"checkStartsWithCaller(bytes32)":"infinite","clone(address)":"infinite","clone(address,bytes memory)":"infinite","cloneDeterministic(address,bytes memory,bytes32)":"infinite","cloneDeterministic(address,bytes32)":"infinite","cloneDeterministic_PUSH0(address,bytes32)":"infinite","clone_PUSH0(address)":"infinite","initCodeHash(address)":"infinite","initCodeHash(address,bytes memory)":"infinite","initCodeHash_PUSH0(address)":"infinite","predictDeterministicAddress(address,bytes memory,bytes32,address)":"infinite","predictDeterministicAddress(address,bytes32,address)":"infinite","predictDeterministicAddress(bytes32,bytes32,address)":"infinite","predictDeterministicAddress_PUSH0(address,bytes32,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DeploymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaltDoesNotStartWithCaller\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)Minimal proxy by 0age (https://github.com/0age)Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\",\"details\":\"Minimal proxy: Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime, it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern, which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.Minimal proxy (PUSH0 variant): This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai. It is optimized first for minimal runtime gas, then for minimal bytecode. The PUSH0 clone functions are intentionally postfixed with a jarring \\\"_PUSH0\\\" as many EVM chains may not support the PUSH0 opcode in the early months after Shanghai. Please use with caution.Clones with immutable args (CWIA): The implementation of CWIA here implements a `receive()` method that emits the `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata, enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards composability. The minimal proxy implementation does not offer this feature.\",\"errors\":{\"DeploymentFailed()\":[{\"details\":\"Unable to deploy the clone.\"}],\"SaltDoesNotStartWithCaller()\":[{\"details\":\"The salt must start with either the zero address or the caller.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Minimal proxy library.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solady/src/utils/LibClone.sol\":\"LibClone\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"solady/src/utils/LibClone.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Minimal proxy library.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)\\n/// @author Minimal proxy by 0age (https://github.com/0age)\\n/// @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie\\n/// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)\\n///\\n/// @dev Minimal proxy:\\n/// Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime,\\n/// it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,\\n/// which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.\\n///\\n/// @dev Minimal proxy (PUSH0 variant):\\n/// This is a new minimal proxy that uses the PUSH0 opcode introduced during Shanghai.\\n/// It is optimized first for minimal runtime gas, then for minimal bytecode.\\n/// The PUSH0 clone functions are intentionally postfixed with a jarring \\\"_PUSH0\\\" as\\n/// many EVM chains may not support the PUSH0 opcode in the early months after Shanghai.\\n/// Please use with caution.\\n///\\n/// @dev Clones with immutable args (CWIA):\\n/// The implementation of CWIA here implements a `receive()` method that emits the\\n/// `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata,\\n/// enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards\\n/// composability. The minimal proxy implementation does not offer this feature.\\nlibrary LibClone {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Unable to deploy the clone.\\n    error DeploymentFailed();\\n\\n    /// @dev The salt must start with either the zero address or the caller.\\n    error SaltDoesNotStartWithCaller();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  MINIMAL PROXY OPERATIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Deploys a clone of `implementation`.\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            /**\\n             * --------------------------------------------------------------------------+\\n             * CREATION (9 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\\n             * --------------------------------------------------------------------------|\\n             * 60 runSize | PUSH1 runSize     | r         |                              |\\n             * 3d         | RETURNDATASIZE    | 0 r       |                              |\\n             * 81         | DUP2              | r 0 r     |                              |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                              |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\\n             * --------------------------------------------------------------------------|\\n             * RUNTIME (44 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\\n             * --------------------------------------------------------------------------|\\n             *                                                                           |\\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | 0                      |                       |\\n             * 3d      | RETURNDATASIZE | 0 0                    |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 0                  |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 0 0                |                       |\\n             *                                                                           |\\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            |                       |\\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          |                       |\\n             * 3d      | RETURNDATASIZE | 0 0 cds 0 0 0 0        |                       |\\n             * 37      | CALLDATACOPY   | 0 0 0 0                | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0 0 0            | [0..cds): calldata    |\\n             * 3d      | RETURNDATASIZE | 0 cds 0 0 0 0          | [0..cds): calldata    |\\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0 0 0     | [0..cds): calldata    |\\n             * 5a      | GAS            | gas addr 0 cds 0 0 0 0 | [0..cds): calldata    |\\n             * f4      | DELEGATECALL   | success 0 0            | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds success 0 0        | [0..cds): calldata    |\\n             * 3d      | RETURNDATASIZE | rds rds success 0 0    | [0..cds): calldata    |\\n             * 93      | SWAP4          | 0 rds success 0 rds    | [0..cds): calldata    |\\n             * 80      | DUP1           | 0 0 rds success 0 rds  | [0..cds): calldata    |\\n             * 3e      | RETURNDATACOPY | success 0 rds          | [0..rds): returndata  |\\n             *                                                                           |\\n             * 60 0x2a | PUSH1 0x2a     | 0x2a success 0 rds     | [0..rds): returndata  |\\n             * 57      | JUMPI          | 0 rds                  | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * fd      | REVERT         |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b      | JUMPDEST       | 0 rds                  | [0..rds): returndata  |\\n             * f3      | RETURN         |                        | [0..rds): returndata  |\\n             * --------------------------------------------------------------------------+\\n             */\\n\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            instance := create(0, 0x0c, 0x35)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic clone of `implementation` with `salt`.\\n    function cloneDeterministic(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            instance := create2(0, 0x0c, 0x35, salt)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the clone of `implementation`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(address implementation) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x21, 0x5af43d3d93803e602a57fd5bf3)\\n            mstore(0x14, implementation)\\n            mstore(0x00, 0x602c3d8160093d39f33d3d3d3d363d3d37363d73)\\n            hash := keccak256(0x0c, 0x35)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x21, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic clone of `implementation`,\\n    /// with `salt` by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        bytes32 hash = initCodeHash(implementation);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*          MINIMAL PROXY OPERATIONS (PUSH0 VARIANT)          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Deploys a PUSH0 clone of `implementation`.\\n    function clone_PUSH0(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            /**\\n             * --------------------------------------------------------------------------+\\n             * CREATION (9 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                       |\\n             * --------------------------------------------------------------------------|\\n             * 60 runSize | PUSH1 runSize     | r         |                              |\\n             * 5f         | PUSH0             | 0 r       |                              |\\n             * 81         | DUP2              | r 0 r     |                              |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                              |\\n             * 5f         | PUSH0             | 0 o r 0 r |                              |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code   |\\n             * f3         | RETURN            |           | [0..runSize): runtime code   |\\n             * --------------------------------------------------------------------------|\\n             * RUNTIME (45 bytes)                                                        |\\n             * --------------------------------------------------------------------------|\\n             * Opcode  | Mnemonic       | Stack                  | Memory                |\\n             * --------------------------------------------------------------------------|\\n             *                                                                           |\\n             * ::: keep some values in stack ::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5f      | PUSH0          | 0                      |                       |\\n             * 5f      | PUSH0          | 0 0                    |                       |\\n             *                                                                           |\\n             * ::: copy calldata to memory ::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0                |                       |\\n             * 5f      | PUSH0          | 0 cds 0 0              |                       |\\n             * 5f      | PUSH0          | 0 0 cds 0 0            |                       |\\n             * 37      | CALLDATACOPY   | 0 0                    | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: delegate call to the implementation contract :::::::::::::::::::::::: |\\n             * 36      | CALLDATASIZE   | cds 0 0                | [0..cds): calldata    |\\n             * 5f      | PUSH0          | 0 cds 0 0              | [0..cds): calldata    |\\n             * 73 addr | PUSH20 addr    | addr 0 cds 0 0         | [0..cds): calldata    |\\n             * 5a      | GAS            | gas addr 0 cds 0 0     | [0..cds): calldata    |\\n             * f4      | DELEGATECALL   | success                | [0..cds): calldata    |\\n             *                                                                           |\\n             * ::: copy return data to memory :::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds success            | [0..cds): calldata    |\\n             * 5f      | PUSH0          | 0 rds success          | [0..cds): calldata    |\\n             * 5f      | PUSH0          | 0 0 rds success        | [0..cds): calldata    |\\n             * 3e      | RETURNDATACOPY | success                | [0..rds): returndata  |\\n             *                                                                           |\\n             * 60 0x29 | PUSH1 0x29     | 0x29 success           | [0..rds): returndata  |\\n             * 57      | JUMPI          |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: revert :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\\n             * fd      | REVERT         |                        | [0..rds): returndata  |\\n             *                                                                           |\\n             * ::: return :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b      | JUMPDEST       |                        | [0..rds): returndata  |\\n             * 3d      | RETURNDATASIZE | rds                    | [0..rds): returndata  |\\n             * 5f      | PUSH0          | 0 rds                  | [0..rds): returndata  |\\n             * f3      | RETURN         |                        | [0..rds): returndata  |\\n             * --------------------------------------------------------------------------+\\n             */\\n\\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\\n            mstore(0x14, implementation) // 20\\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\\n            instance := create(0, 0x0e, 0x36)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic PUSH0 clone of `implementation` with `salt`.\\n    function cloneDeterministic_PUSH0(address implementation, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\\n            mstore(0x14, implementation) // 20\\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\\n            instance := create2(0, 0x0e, 0x36, salt)\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the PUSH0 clone of `implementation`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash_PUSH0(address implementation) internal pure returns (bytes32 hash) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x24, 0x5af43d5f5f3e6029573d5ffd5b3d5ff3) // 16\\n            mstore(0x14, implementation) // 20\\n            mstore(0x00, 0x602d5f8160095f39f35f5f365f5f37365f73) // 9 + 9\\n            hash := keccak256(0x0e, 0x36)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic PUSH0 clone of `implementation`,\\n    /// with `salt` by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress_PUSH0(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes32 hash = initCodeHash_PUSH0(implementation);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*           CLONES WITH IMMUTABLE ARGS OPERATIONS            */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Deploys a minimal proxy with `implementation`,\\n    /// using immutable arguments encoded in `data`.\\n    ///\\n    /// Note: This implementation of CWIA differs from the original implementation.\\n    /// If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`.\\n    function clone(address implementation, bytes memory data) internal returns (address instance) {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n            // The `creationSize` is `extraLength + 108`\\n            // The `runSize` is `creationSize - 10`.\\n\\n            /**\\n             * ---------------------------------------------------------------------------------------------------+\\n             * CREATION (10 bytes)                                                                                |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * Opcode     | Mnemonic          | Stack     | Memory                                                |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * 61 runSize | PUSH2 runSize     | r         |                                                       |\\n             * 3d         | RETURNDATASIZE    | 0 r       |                                                       |\\n             * 81         | DUP2              | r 0 r     |                                                       |\\n             * 60 offset  | PUSH1 offset      | o r 0 r   |                                                       |\\n             * 3d         | RETURNDATASIZE    | 0 o r 0 r |                                                       |\\n             * 39         | CODECOPY          | 0 r       | [0..runSize): runtime code                            |\\n             * f3         | RETURN            |           | [0..runSize): runtime code                            |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * RUNTIME (98 bytes + extraLength)                                                                   |\\n             * ---------------------------------------------------------------------------------------------------|\\n             * Opcode   | Mnemonic       | Stack                    | Memory                                      |\\n             * ---------------------------------------------------------------------------------------------------|\\n             *                                                                                                    |\\n             * ::: if no calldata, emit event & return w/o `DELEGATECALL` ::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds                      |                                             |\\n             * 60 0x2c  | PUSH1 0x2c     | 0x2c cds                 |                                             |\\n             * 57       | JUMPI          |                          |                                             |\\n             * 34       | CALLVALUE      | cv                       |                                             |\\n             * 3d       | RETURNDATASIZE | 0 cv                     |                                             |\\n             * 52       | MSTORE         |                          | [0..0x20): callvalue                        |\\n             * 7f sig   | PUSH32 0x9e..  | sig                      | [0..0x20): callvalue                        |\\n             * 59       | MSIZE          | 0x20 sig                 | [0..0x20): callvalue                        |\\n             * 3d       | RETURNDATASIZE | 0 0x20 sig               | [0..0x20): callvalue                        |\\n             * a1       | LOG1           |                          | [0..0x20): callvalue                        |\\n             * 00       | STOP           |                          | [0..0x20): callvalue                        |\\n             * 5b       | JUMPDEST       |                          |                                             |\\n             *                                                                                                    |\\n             * ::: copy calldata to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds                      |                                             |\\n             * 3d       | RETURNDATASIZE | 0 cds                    |                                             |\\n             * 3d       | RETURNDATASIZE | 0 0 cds                  |                                             |\\n             * 37       | CALLDATACOPY   |                          | [0..cds): calldata                          |\\n             *                                                                                                    |\\n             * ::: keep some values in stack :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d       | RETURNDATASIZE | 0                        | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0                      | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0 0                    | [0..cds): calldata                          |\\n             * 3d       | RETURNDATASIZE | 0 0 0 0                  | [0..cds): calldata                          |\\n             * 61 extra | PUSH2 extra    | e 0 0 0 0                | [0..cds): calldata                          |\\n             *                                                                                                    |\\n             * ::: copy extra data to memory :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 80       | DUP1           | e e 0 0 0 0              | [0..cds): calldata                          |\\n             * 60 0x62  | PUSH1 0x62     | 0x62 e e 0 0 0 0         | [0..cds): calldata                          |\\n             * 36       | CALLDATASIZE   | cds 0x62 e e 0 0 0 0     | [0..cds): calldata                          |\\n             * 39       | CODECOPY       | e 0 0 0 0                | [0..cds): calldata, [cds..cds+e): extraData |\\n             *                                                                                                    |\\n             * ::: delegate call to the implementation contract ::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 36       | CALLDATASIZE   | cds e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 01       | ADD            | cds+e 0 0 0 0            | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3d       | RETURNDATASIZE | 0 cds+e 0 0 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 73 addr  | PUSH20 addr    | addr 0 cds+e 0 0 0 0     | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 5a       | GAS            | gas addr 0 cds+e 0 0 0 0 | [0..cds): calldata, [cds..cds+e): extraData |\\n             * f4       | DELEGATECALL   | success 0 0              | [0..cds): calldata, [cds..cds+e): extraData |\\n             *                                                                                                    |\\n             * ::: copy return data to memory ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 3d       | RETURNDATASIZE | rds success 0 0          | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3d       | RETURNDATASIZE | rds rds success 0 0      | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 93       | SWAP4          | 0 rds success 0 rds      | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 80       | DUP1           | 0 0 rds success 0 rds    | [0..cds): calldata, [cds..cds+e): extraData |\\n             * 3e       | RETURNDATACOPY | success 0 rds            | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * 60 0x60  | PUSH1 0x60     | 0x60 success 0 rds       | [0..rds): returndata                        |\\n             * 57       | JUMPI          | 0 rds                    | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * ::: revert ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * fd       | REVERT         |                          | [0..rds): returndata                        |\\n             *                                                                                                    |\\n             * ::: return ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: |\\n             * 5b       | JUMPDEST       | 0 rds                    | [0..rds): returndata                        |\\n             * f3       | RETURN         |                          | [0..rds): returndata                        |\\n             * ---------------------------------------------------------------------------------------------------+\\n             */\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                // Do a out-of-gas revert if `extraLength` is too big. 0xffff - 0x62 + 0x01 = 0xff9e.\\n                // The actual EVM limit may be smaller and may change over time.\\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Create the instance.\\n            instance := create(0, sub(data, 0x4c), add(extraLength, 0x6c))\\n\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Deploys a deterministic clone of `implementation`,\\n    /// using immutable arguments encoded in `data`, with `salt`.\\n    ///\\n    /// Note: This implementation of CWIA differs from the original implementation.\\n    /// If the calldata is empty, it will emit a `ReceiveETH(uint256)` event and skip the `DELEGATECALL`.\\n    function cloneDeterministic(address implementation, bytes memory data, bytes32 salt)\\n        internal\\n        returns (address instance)\\n    {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                // Do a out-of-gas revert if `extraLength` is too big. 0xffff - 0x62 + 0x01 = 0xff9e.\\n                // The actual EVM limit may be smaller and may change over time.\\n                sub(data, add(0x59, lt(extraLength, 0xff9e))),\\n                or(shl(0x78, add(extraLength, 0x62)), 0xfd6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Create the instance.\\n            instance := create2(0, sub(data, 0x4c), add(extraLength, 0x6c), salt)\\n\\n            // If `instance` is zero, revert.\\n            if iszero(instance) {\\n                // Store the function selector of `DeploymentFailed()`.\\n                mstore(0x00, 0x30116425)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Returns the initialization code hash of the clone of `implementation`\\n    /// using immutable arguments encoded in `data`.\\n    /// Used for mining vanity addresses with create2crunch.\\n    function initCodeHash(address implementation, bytes memory data)\\n        internal\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        assembly {\\n            // Compute the boundaries of the data and cache the memory slots around it.\\n            let mBefore3 := mload(sub(data, 0x60))\\n            let mBefore2 := mload(sub(data, 0x40))\\n            let mBefore1 := mload(sub(data, 0x20))\\n            let dataLength := mload(data)\\n            let dataEnd := add(add(data, 0x20), dataLength)\\n            let mAfter1 := mload(dataEnd)\\n\\n            // Do a out-of-gas revert if `dataLength` is too big. 0xffff - 0x02 - 0x62 = 0xff9b.\\n            // The actual EVM limit may be smaller and may change over time.\\n            returndatacopy(returndatasize(), returndatasize(), gt(dataLength, 0xff9b))\\n\\n            // +2 bytes for telling how much data there is appended to the call.\\n            let extraLength := add(dataLength, 2)\\n\\n            // Write the bytecode before the data.\\n            mstore(data, 0x5af43d3d93803e606057fd5bf3)\\n            // Write the address of the implementation.\\n            mstore(sub(data, 0x0d), implementation)\\n            // Write the rest of the bytecode.\\n            mstore(\\n                sub(data, 0x21),\\n                or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)\\n            )\\n            // `keccak256(\\\"ReceiveETH(uint256)\\\")`\\n            mstore(\\n                sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff\\n            )\\n            mstore(\\n                sub(data, 0x5a),\\n                or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)\\n            )\\n            mstore(dataEnd, shl(0xf0, extraLength))\\n\\n            // Compute and store the bytecode hash.\\n            hash := keccak256(sub(data, 0x4c), add(extraLength, 0x6c))\\n\\n            // Restore the overwritten memory surrounding `data`.\\n            mstore(dataEnd, mAfter1)\\n            mstore(data, dataLength)\\n            mstore(sub(data, 0x20), mBefore1)\\n            mstore(sub(data, 0x40), mBefore2)\\n            mstore(sub(data, 0x60), mBefore3)\\n        }\\n    }\\n\\n    /// @dev Returns the address of the deterministic clone of\\n    /// `implementation` using immutable arguments encoded in `data`, with `salt`, by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes memory data,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes32 hash = initCodeHash(implementation, data);\\n        predicted = predictDeterministicAddress(hash, salt, deployer);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      OTHER OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the address when a contract with initialization code hash,\\n    /// `hash`, is deployed with `salt`, by `deployer`.\\n    /// Note: The returned result has dirty upper 96 bits. Please clean if used in assembly.\\n    function predictDeterministicAddress(bytes32 hash, bytes32 salt, address deployer)\\n        internal\\n        pure\\n        returns (address predicted)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and store the bytecode hash.\\n            mstore8(0x00, 0xff) // Write the prefix.\\n            mstore(0x35, hash)\\n            mstore(0x01, shl(96, deployer))\\n            mstore(0x15, salt)\\n            predicted := keccak256(0x00, 0x55)\\n            // Restore the part of the free memory pointer that has been overwritten.\\n            mstore(0x35, 0)\\n        }\\n    }\\n\\n    /// @dev Reverts if `salt` does not start with either the zero address or the caller.\\n    function checkStartsWithCaller(bytes32 salt) internal view {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the salt does not start with the zero address or the caller.\\n            if iszero(or(iszero(shr(96, salt)), eq(caller(), shr(96, salt)))) {\\n                // Store the function selector of `SaltDoesNotStartWithCaller()`.\\n                mstore(0x00, 0x2f634836)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x159b64c65da9e6efe93b8df8c6bb1c7672a7511dcaba414aaa3e447f6d7065e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Minimal proxy library.","version":1}}}}}}